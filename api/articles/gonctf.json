{"title":"A ctf challenge about variable storage","uid":"ec8400bf6f96d412e898d5ce3ea11cc4","slug":"gonctf","date":"2022-07-05T00:45:24.373Z","updated":"2022-12-16T07:38:01.122Z","comments":true,"path":"api/articles/gonctf.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/catkey_1.png","content":"<p>关于这个挑战的Write up！</p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">//SPDX-License-Identifier: Unlicense</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.9</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Chal</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">private</span> flag<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> _flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        flag <span class=\"token operator\">=</span> _flag<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>difficulty<span class=\"token punctuation\">,</span> block<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>=</span> <span class=\"token number\">15</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> _flag <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes1</span> idx <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _flag<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> _flag<span class=\"token punctuation\">[</span><span class=\"token builtin\">uint8</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> idx<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> to<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        to<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>题目要求获得flag</p>\n<p>题目合约创建详情：<a href=\"https://ropsten.etherscan.io/tx/0x1b8069c52d74ef0aa7c4692b5a7d77f2f1cafc0ad53d3b238748239645edbf03\">https://ropsten.etherscan.io/tx/0x1b8069c52d74ef0aa7c4692b5a7d77f2f1cafc0ad53d3b238748239645edbf03</a></p>\n<p>flag GoN{…}</p>\n<h2 id=\"First-Analyze\"><a href=\"#First-Analyze\" class=\"headerlink\" title=\"First Analyze\"></a>First Analyze</h2><p>题目可见string存储在slot0的位置，通过web3.py可以查询到该插槽内存储的内容从而直接获得flag，这里涉及到了关于solidity存储字符串类型数据的问题。</p>\n<p>字符串数据类型存储分为两个情况，首先要了解到，每个字母占2个十六进制位，每个汉字占6个十六进制位 </p>\n<p>case1</p>\n<p>十六进制位小于64位，直接存储在对应插槽</p>\n<p>case2</p>\n<p>十六进制位大于64位，存储方式类似数组，对应插槽存储长度，实际内容存储在keccak256(x)，x&#x3D;slot(string)，该题对应的x为0</p>\n<p>脚本获得字符串长度为0x53大于64位，所以对应case2</p>\n<h2 id=\"First-try\"><a href=\"#First-try\" class=\"headerlink\" title=\"First try\"></a>First try</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> web3 <span class=\"token keyword\">import</span> Web3<span class=\"token punctuation\">,</span>HTTPProvider\nw3<span class=\"token operator\">=</span>Web3<span class=\"token punctuation\">(</span>HTTPProvider<span class=\"token punctuation\">(</span><span class=\"token string\">'https://ropsten.infura.io/v3/071f682145af4cfc9f0b92a497e89431'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getStorageAt<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\na<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getStorageAt<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span>Web3<span class=\"token punctuation\">.</span>sha3<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nb<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getStorageAt<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span>Web3<span class=\"token punctuation\">.</span>sha3<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>获得如下字符串</p>\n<p>GnLxqvoioVhgcnelxp{}KayHs|\\x7fkCy\\x7fkA~RVFIODU</p>\n<p>所得flag为乱码还包含不可见字符，证明存在问题</p>\n<p>尝试使用凯撒密码和维吉尼亚密码的解密方式无法获得flag，回归solidity代码继续分析</p>\n<h2 id=\"Second-Analyze\"><a href=\"#Second-Analyze\" class=\"headerlink\" title=\"Second Analyze\"></a>Second Analyze</h2><p>关注代码中的query()部分</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>=</span> <span class=\"token number\">15</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> _flag <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes1</span> idx <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> _flag<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> _flag<span class=\"token punctuation\">[</span><span class=\"token builtin\">uint8</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> idx<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对该函数进行分析由于require要求调用一次需要15eth并且random不确定，从而打消了直接调用获得并拼接获得flag的想法</p>\n<p>但是该函数有一点值得注意的是return处_flag[uint8(idx)] ^ idx其中是bytes类型的 _flag的第idx位与idx进行异或运算(1对1为0，0对0为0，1对0为1，0对1为1)虽然随机数random不可控，但是我们可以自行构建脚本，实现idx可控从而不使用合约中的函数并按照题目方法进行计算并拼接即可</p>\n<h2 id=\"Final-Try\"><a href=\"#Final-Try\" class=\"headerlink\" title=\"Final Try\"></a>Final Try</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>number <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token builtin\">str</span><span class=\"token operator\">=</span><span class=\"token string\">\"476e4c7871766f696f566867636e656c78707b7d4b617948737c7f6b43797f6b417e525646494f4455\"</span>\nflag<span class=\"token operator\">=</span><span class=\"token string\">''</span>\nj<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> i<span class=\"token operator\">%</span><span class=\"token number\">2</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        _str<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n        flag<span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>_str<span class=\"token operator\">^</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        j<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\na<span class=\"token operator\">=</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>long_to_bytes<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>题目中bytes1类型是在每两位进行异或<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行脚本得到flag：GoN{using_blockchain_to_keep_data_public}</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>在遇到相似的顺序类加密问题时，首先考虑凯撒密码和维吉尼亚密码，如果这两种方法解密失败那就要回过头去寻找题目给出的信息，hint也好还是题目代码也好，一定是有所遗漏，回归代码仔细审计，得到解决方案。</p>\n","text":"关于这个挑战的Write up！ Code//SPDX-License-Identifier: Unlicense pragma solidity ^0.8.9; contract Chal &#123; string private flag; address public o...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"区块链 ctf","slug":"区块链-ctf","count":12,"path":"api/tags/区块链-ctf.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#First-Analyze\"><span class=\"toc-text\">First Analyze</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#First-try\"><span class=\"toc-text\">First try</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Second-Analyze\"><span class=\"toc-text\">Second Analyze</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Final-Try\"><span class=\"toc-text\">Final Try</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Summary\"><span class=\"toc-text\">Summary</span></a></li></ol>","author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/296321666270692_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Understanding DAO with an example","uid":"9577d25fd5332f28e4fb9b967ac228a0","slug":"one-example-to-know-DAO","date":"2022-08-01T10:30:36.709Z","updated":"2022-12-16T07:36:31.407Z","comments":true,"path":"api/articles/one-example-to-know-DAO.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-w/images1/img/202208011825170.png","text":"IntroWhat is DAO？DAO的英文全称为Decentralized A utonomous O rganization，常见的中文翻译为去中心化自治组织（社区），是一种以公开透明的计算机代码来体现的组织，其受控于股东，并不受中央政府影响。一个分布式自治组织的金融交易记...","link":"","photos":[],"count_time":{"symbolsCount":"38k","symbolsTime":"35 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":19,"path":"api/tags/区块链.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/296321666270692_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}