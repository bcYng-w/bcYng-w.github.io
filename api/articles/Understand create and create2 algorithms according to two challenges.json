{"title":"Understand create and create2 algorithms according to two challenges","uid":"e5737740b784095b2d07fd3a962c9c2b","slug":"Understand create and create2 algorithms according to two challenges","date":"2022-08-02T02:38:41.514Z","updated":"2022-12-16T07:41:26.789Z","comments":true,"path":"api/articles/Understand create and create2 algorithms according to two challenges.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221216154105583.png","content":"<h2 id=\"0x00-合约地址计算\"><a href=\"#0x00-合约地址计算\" class=\"headerlink\" title=\"0x00 合约地址计算\"></a>0x00 合约地址计算</h2><p>合约地址按照一定的规律计算而来，所以在合约部署之前即可计算出合约地址。</p>\n<p> 地址计算有两种方式</p>\n<span id=\"more\"></span> \n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li><code>Create</code> : <code>Web3.sha3(rlp.encode(deployingAddress, nonce))[12:]</code></li>\n<li><code>Create2</code> : <code>Web3.keccak(0xff ++ deployingAddr ++ salt ++ keccak256(bytecode))[12:]</code></li>\n</ul></blockquote>\n<p><strong>[sha3和keccak256相同]</strong></p>\n<h2 id=\"0x01-create方法\"><a href=\"#0x01-create方法\" class=\"headerlink\" title=\"0x01 create方法\"></a>0x01 create方法</h2><p>以太坊合约的地址是根据创建者（sender）的地址以及创建者发送过的交易数量（nonce）来计算确定的。 <code>sender</code>和<code>nonce</code> 进行<a href=\"https://learnblockchain.cn/2019/05/20/geth-rlp-encode/\">RLP编码</a>，然后用<code>Keccak-256</code> 进行hash计算。</p>\n<p>计算地址的python代码如下</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">from</span> web3 <span class=\"token keyword\">import</span> Web3<span class=\"token punctuation\">,</span>HTTPProvider\n<span class=\"token keyword\">import</span> rlp\nw3<span class=\"token operator\">=</span><span class=\"token function\">Web3</span><span class=\"token punctuation\">(</span><span class=\"token function\">HTTPProvider</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://ropsten.infura.io/v3/071f682145af4cfc9f0b92a497e89431'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//以ropsten网络进行测试</span>\n\ndef <span class=\"token function\">getnonce</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span><span class=\"token function\">getTransactionCount</span><span class=\"token punctuation\">(</span>Web3<span class=\"token punctuation\">.</span><span class=\"token function\">toChecksumAddress</span><span class=\"token punctuation\">(</span><span class=\"token function\">hex</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//此处地址使用十六进制</span>\n    \ndef <span class=\"token function\">getaddress</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span>nonce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Web3<span class=\"token punctuation\">.</span><span class=\"token function\">sha3</span><span class=\"token punctuation\">(</span>rlp<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>addr<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//注意此处使用的是地址的十进制</span>\n    <span class=\"token comment\">//计算数据总共有64位，取后40位为地址</span>\n\naddr<span class=\"token operator\">=</span>部署合约的msg<span class=\"token punctuation\">.</span>sender。如果是合约中部署的<span class=\"token keyword\">new</span>合约，则为合约地址\nnonce<span class=\"token operator\">=</span><span class=\"token function\">getnonce</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token comment\">//获得交易数量nonce注意获得的nonce是下一次交易的nonce，并非本次</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>nonce<span class=\"token punctuation\">)</span>\n\ngetnextaddress<span class=\"token operator\">=</span><span class=\"token function\">getaddress</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span>nonce<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>getnextaddress<span class=\"token punctuation\">)</span><span class=\"token comment\">//得到下一个部署的合约的地址</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>值得注意的是：根据<a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-161.md#specification\">EIP 161</a> 规范合约帐户使用 nonce&#x3D;1 初始（在主网络上）。 因此，由一个合约创建的第一个合约地址将使用非零nonce进行计算。</strong></p>\n<p><strong>以下进行测试：</strong></p>\n<h3 id=\"测试一，使用metamask账户直接部署\"><a href=\"#测试一，使用metamask账户直接部署\" class=\"headerlink\" title=\"测试一，使用metamask账户直接部署\"></a>测试一，使用metamask账户直接部署</h3><p>运行python文件获得如下内容</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281248503.png\"></p>\n<p>即下一笔交易将是第294，并且下一个合约地址将是0x22a21fc272921b6de75320422e3ef44ad3a9fca3</p>\n<p>在remix编译器中部署一个新的合约，查看合约地址如下</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281248211.png\"></p>\n<p>可以发现，合约地址和计算的地址是相同的。</p>\n<p>所部署合约源码（为测试二准备）</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">b</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//empty</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">a</span> <span class=\"token punctuation\">&#123;</span>\n\t\n    b <span class=\"token keyword\">public</span> target<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _ctfLauncher<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _player<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span>\n    <span class=\"token punctuation\">&#123;</span>\n        target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"测试二，合约中部署新的合约\"><a href=\"#测试二，合约中部署新的合约\" class=\"headerlink\" title=\"测试二，合约中部署新的合约\"></a>测试二，合约中部署新的合约</h3><p>计算方法和测试一中的方法一样，不过nonce处存在不同。</p>\n<p>根据<a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-161.md#specification\">EIP 161</a>规定，由一个合约创建的第一个合约地址将使用非零nonce进行计算即nonce&#x3D;1。</p>\n<p>方便起见，直接计算测试一中的target地址</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281248407.png\"></p>\n<p>合约在部署时候新建了new b合约，所以addr应为合约地址</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281248363.png\"></p>\n<p>运行得到结果</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281248003.png\"></p>\n<p>查看合约中创建的合约地址，可见计算正确</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281248852.png\"></p>\n<h2 id=\"0x02-create2方法\"><a href=\"#0x02-create2方法\" class=\"headerlink\" title=\"0x02  create2方法\"></a>0x02  create2方法</h2><p><code>CREATE2</code> 不再依赖于账户的 <code>nonce</code>，而是对以下参数进行哈希计算，得出新的地址：</p>\n<ul>\n<li>合约创建者的地址（<code>address</code>)</li>\n<li>作为参数的混淆值（<code>salt</code>）</li>\n<li>合约创建代码 (<code>init_code</code>)</li>\n</ul>\n<p>参考<a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1014.md\">EIP 1014</a></p>\n<p>具体的计算公式如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Web3<span class=\"token punctuation\">.</span>sha3<span class=\"token punctuation\">(</span><span class=\"token number\">0xff</span> <span class=\"token operator\">+</span><span class=\"token operator\">+</span> address <span class=\"token operator\">+</span><span class=\"token operator\">+</span> salt <span class=\"token operator\">+</span><span class=\"token operator\">+</span> keccak256<span class=\"token punctuation\">(</span>init_code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>注意：①此处的++指的是字节的拼接而不是数字加减所以顺序不可打乱②address为执行deploy函数（见下文部署合约代码）的合约地址</strong></p>\n<p>计算地址的python代码如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">deployingAddr<span class=\"token operator\">=</span><span class=\"token string\">'address without 0x'</span>\ns<span class=\"token operator\">=</span>Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr<span class=\"token operator\">=</span>code<span class=\"token punctuation\">)</span>\na<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'%02x'</span> <span class=\"token operator\">%</span> b <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nsalt<span class=\"token operator\">=</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>i为随机数\np<span class=\"token operator\">=</span>Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0xff'</span> <span class=\"token operator\">+</span> deployingAddr <span class=\"token operator\">+</span> salt <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>计算地址的solidity代码如下</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> addr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> bytecode<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> salt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">bytes32</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>addr<span class=\"token punctuation\">,</span>salt<span class=\"token punctuation\">,</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用salt进行指定地址的合约部署代码如下</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Deployer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// contractBytecode是待部署合约的bytecode</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bytes</span> code <span class=\"token operator\">=</span> hex<span class=\"token string\">\"your code\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> salt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> bytecode <span class=\"token operator\">=</span> code<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">address</span> addr<span class=\"token punctuation\">;</span>\n      \n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n          addr <span class=\"token operator\">:=</span> <span class=\"token function\">create2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> salt<span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        a<span class=\"token operator\">=</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"0x03-解题练习\"><a href=\"#0x03-解题练习\" class=\"headerlink\" title=\"0x03  解题练习\"></a>0x03  解题练习</h2><h3 id=\"create练习\"><a href=\"#create练习\" class=\"headerlink\" title=\"create练习\"></a>create练习</h3><p>题目地址：blockchain-ctf第十一题Rainy Day Fund</p>\n<p>题目代码</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token number\">0.4</span><span class=\"token number\">.24</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"../CtfFramework.sol\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">DebugAuthorizer</span><span class=\"token punctuation\">&#123;</span>\n    \n    <span class=\"token builtin\">bool</span> <span class=\"token keyword\">public</span> debugMode<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">==</span> <span class=\"token number\">1.337</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            debugMode<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">RainyDayFund</span> <span class=\"token keyword\">is</span> CtfFramework<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> developer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token operator\">=></span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> fundManagerEnabled<span class=\"token punctuation\">;</span>\n    DebugAuthorizer <span class=\"token keyword\">public</span> debugAuthorizer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _ctfLauncher<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _player<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span>\n        <span class=\"token function\">CtfFramework</span><span class=\"token punctuation\">(</span>_ctfLauncher<span class=\"token punctuation\">,</span> _player<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//debugAuthorizer = (new DebugAuthorizer).value(1.337 ether)(); // Debug mode only used during development</span>\n        debugAuthorizer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DebugAuthorizer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        developer <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n        fundManagerEnabled<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">isManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>fundManagerEnabled<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> debugAuthorizer<span class=\"token punctuation\">.</span><span class=\"token function\">debugMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> developer<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Unauthorized: Not a Fund Manager\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> ctf<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Anyone can add to the fund    </span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">addFundManager</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _newManager<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> isManager ctf<span class=\"token punctuation\">&#123;</span>\n        fundManagerEnabled<span class=\"token punctuation\">[</span>_newManager<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">removeFundManager</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _previousManager<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> isManager ctf<span class=\"token punctuation\">&#123;</span>\n        fundManagerEnabled<span class=\"token punctuation\">[</span>_previousManager<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> isManager ctf<span class=\"token punctuation\">&#123;</span>\n        msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>题目要求很简单就是要偷走题目中的所有合约，但是取走题目合约中的需要调用withdraw函数，该函数要求ismanager的要求，查看修饰内容，fundManagerEnabled[msg.sender]和msg.sender &#x3D;&#x3D; developer不能修改，唯一的入口是debugAuthorizer.debugMode()，而DebugAuthorizer中的判断只在构造时执行，所以必须要预测该合约地址。</p>\n<p>使用create计算方法根据developer和nonce计算合约地址，再根据合约地址和nonce计算new DebugAuthorizer()，转入1.337 ether即可</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281248485.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281249329.png\"></p>\n<p>在进行withdraw即可通关</p>\n<h3 id=\"create2练习\"><a href=\"#create2练习\" class=\"headerlink\" title=\"create2练习\"></a>create2练习</h3><p>题目地址：capture the ether–Fuzzy identity</p>\n<p>题目代码</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.4.21</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IName</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">FuzzyIdentityChallenge</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">bool</span> <span class=\"token keyword\">public</span> isComplete<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">isSmarx</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">isBadCode</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        isComplete <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isSmarx</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">IName</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"smarx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isBadCode</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">bytes20</span> addr <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes20</span><span class=\"token punctuation\">(</span>_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes20</span> id <span class=\"token operator\">=</span> hex<span class=\"token string\">\"000000000000000000000000000000000badc0de\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes20</span> mask <span class=\"token operator\">=</span> hex<span class=\"token string\">\"000000000000000000000000000000000fffffff\"</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">34</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">&amp;</span> mask <span class=\"token operator\">==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            mask <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n            id <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>题目要求使isComplete &#x3D; true，即使msg.sender合约中public存储变量name为bytes32(“smarx”)，并且合约地址中有badc0de字符</p>\n<p>使用create计算方法爆破salt获得含有指定字符的地址，爆破代码如下</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> web3 <span class=\"token keyword\">import</span> Web3<span class=\"token punctuation\">,</span>HTTPProvider\n\ndeployingAddr<span class=\"token operator\">=</span><span class=\"token string\">'2bA2D4a1B728D87E9319ce51B3F5086a78f945d9'</span>\n\ncode<span class=\"token operator\">=</span><span class=\"token string\">'60806040527f736d61727800000000000000000000000000000000000000000000000000000060005573553c7e7d4ba3f92d85c009cacb2b995d9e3c79b7600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561008957600080fd5b50610119806100996000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806306fdde03146037578063dd365b8b146053575b600080fd5b603d605b565b6040518082815260200191505060405180910390f35b60596061565b005b60005481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663380c7a676040518163ffffffff1660e01b8152600401600060405180830381600087803b15801560ca57600080fd5b505af115801560dd573d6000803e3d6000fd5b5050505056fea2646970667358221220434aa07aa1939601b3982d4fefcf99b542f6bc06572ed87993a90d2ff7cf687c64736f6c63430006000033'</span>\n\n<span class=\"token operator\">//</span>待部署合约的bytecode\n\ns<span class=\"token operator\">=</span>Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr<span class=\"token operator\">=</span>code<span class=\"token punctuation\">)</span>\n\na<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'%02x'</span> <span class=\"token operator\">%</span> b <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>将s转变为字节\n\ni<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    salt<span class=\"token operator\">=</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>salt<span class=\"token punctuation\">)</span>\n    p<span class=\"token operator\">=</span>Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0xff'</span> <span class=\"token operator\">+</span> deployingAddr <span class=\"token operator\">+</span> salt <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">'badc0de'</span> <span class=\"token keyword\">in</span> p<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>salt<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span>\n    i<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281249991.png\"></p>\n<p>使用爆破出的salt部署IName合约，再通过部署的合约调用题目中的authenticate()函数即可通关</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281249251.png\"></p>\n","text":"0x00 合约地址计算合约地址按照一定的规律计算而来，所以在合约部署之前即可计算出合约地址。 地址计算有两种方式 Create : Web3.sha3(rlp.encode(deployingAddress, nonce))[12:] Create2 : Web3.keccak(...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":20,"path":"api/tags/区块链.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x00-%E5%90%88%E7%BA%A6%E5%9C%B0%E5%9D%80%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">0x00 合约地址计算</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-create%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">0x01 create方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E4%B8%80%EF%BC%8C%E4%BD%BF%E7%94%A8metamask%E8%B4%A6%E6%88%B7%E7%9B%B4%E6%8E%A5%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">测试一，使用metamask账户直接部署</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E4%BA%8C%EF%BC%8C%E5%90%88%E7%BA%A6%E4%B8%AD%E9%83%A8%E7%BD%B2%E6%96%B0%E7%9A%84%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">测试二，合约中部署新的合约</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-create2%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">0x02  create2方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03-%E8%A7%A3%E9%A2%98%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">0x03  解题练习</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#create%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">create练习</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#create2%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">create2练习</span></a></li></ol></li></ol>","author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/337861699266393_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Ethernaut","uid":"d254f0c02017b2eb8e14e9b15540cca1","slug":"ethernaut","date":"2022-08-02T02:42:37.160Z","updated":"2022-12-16T07:17:08.118Z","comments":true,"path":"api/articles/ethernaut.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-w/images1/img/202208011808700.svg","text":"地址https://ethernaut.openzeppelin.com/ 1.fallback 题目要求：获得合约所有权并将余额变成0 Codepragma solidity ^0.6.0; import '@openzeppelin/contracts/math/SafeMa...","link":"","photos":[],"count_time":{"symbolsCount":"66k","symbolsTime":"1:01"},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":20,"path":"api/tags/区块链.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/337861699266393_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Find abnormal transactions","uid":"6aeab2a5cd77c3106ff796f4ea68ab90","slug":"Find-abnormal-transactions","date":"2022-08-02T02:37:38.068Z","updated":"2022-12-16T07:30:59.247Z","comments":true,"path":"api/articles/Find-abnormal-transactions.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221216153041111.png","text":"一道新颖的区块链安全方向ctf题目，交易详情：https://kovan.etherscan.io/address/0x16537776395108789FE5cC5420545CAb210a7D30 code 题目描述： The funds are lost somewhere...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":20,"path":"api/tags/区块链.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/337861699266393_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}