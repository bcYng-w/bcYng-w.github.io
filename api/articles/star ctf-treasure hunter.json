{"title":"2022 *ctf-->Treasure Hunter","uid":"de2cba75e8e35434333862362c47f8f7","slug":"star ctf-treasure hunter","date":"2022-08-01T10:44:08.818Z","updated":"2022-12-16T07:26:29.690Z","comments":true,"path":"api/articles/star ctf-treasure hunter.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/0e54d9909c9ed7951f644c8e92eceab5.png","content":"<p>周六时候打了一下*ctf，其中的区块链题目还是蛮有意思的，拿出来分享一下</p>\n<h1 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h1><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">>=</span><span class=\"token version number\">0.8.0</span> <span class=\"token operator\">&lt;</span><span class=\"token version number\">0.9.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">uint256</span> <span class=\"token keyword\">constant</span> SMT_STACK_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">uint256</span> <span class=\"token keyword\">constant</span> DEPTH <span class=\"token operator\">=</span> <span class=\"token number\">160</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">library</span> <span class=\"token class-name\">SMT</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Leaf</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">address</span> key<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint8</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Mode</span> <span class=\"token punctuation\">&#123;</span>\n        BlackList<span class=\"token punctuation\">,</span>\n        WhiteList\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Method</span> <span class=\"token punctuation\">&#123;</span>\n        Insert<span class=\"token punctuation\">,</span>\n        Delete\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">calcLeaf</span><span class=\"token punctuation\">(</span>Leaf <span class=\"token keyword\">memory</span> a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> l<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">verifyByMode</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _proofs<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _targets<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> _expectedRoot<span class=\"token punctuation\">,</span>\n        Mode _mode\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> leaves <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Leaf</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>_targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            leaves<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Leaf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">:</span> _targets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">uint8</span><span class=\"token punctuation\">(</span>_mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">,</span> leaves<span class=\"token punctuation\">,</span> _expectedRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _proofs<span class=\"token punctuation\">,</span>\n        Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _leaves<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> _expectedRoot\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">calcRoot</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">,</span> _leaves<span class=\"token punctuation\">,</span> _expectedRoot<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> _expectedRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">updateSingleTarget</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _proofs<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> _target<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> _prevRoot<span class=\"token punctuation\">,</span>\n        Method _method\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> nextLeaves <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Leaf</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> prevLeaves <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Leaf</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nextLeaves<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Leaf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">:</span> _target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">uint8</span><span class=\"token punctuation\">(</span>_method<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        prevLeaves<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Leaf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">:</span> _target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">uint8</span><span class=\"token punctuation\">(</span>_method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">,</span> nextLeaves<span class=\"token punctuation\">,</span> prevLeaves<span class=\"token punctuation\">,</span> _prevRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">unpdateTargets</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _proofs<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _targets<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> _prevRoot<span class=\"token punctuation\">,</span>\n        Method _method\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> nextLeaves <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Leaf</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>_targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> prevLeaves <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Leaf</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>_targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>_targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            nextLeaves<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Leaf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">:</span> _targets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">uint8</span><span class=\"token punctuation\">(</span>_method<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            prevLeaves<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Leaf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">:</span> _targets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">uint8</span><span class=\"token punctuation\">(</span>_method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">,</span> nextLeaves<span class=\"token punctuation\">,</span> prevLeaves<span class=\"token punctuation\">,</span> _prevRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _proofs<span class=\"token punctuation\">,</span>\n        Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _nextLeaves<span class=\"token punctuation\">,</span>\n        Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _prevLeaves<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> _prevRoot\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">,</span> _prevLeaves<span class=\"token punctuation\">,</span> _prevRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"update proof not valid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">calcRoot</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">,</span> _nextLeaves<span class=\"token punctuation\">,</span> _prevRoot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">checkGroupSorted</span><span class=\"token punctuation\">(</span>Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _leaves<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>_leaves<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint160</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _leaves<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">>=</span> <span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span>_leaves<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            temp <span class=\"token operator\">=</span> <span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span>_leaves<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getBit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span> key<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> height<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">&lt;=</span> DEPTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">>></span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">parentPath</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span> key<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> height<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">&lt;=</span> DEPTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">copyBit</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> height <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">copyBit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span> key<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> height<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">&lt;=</span> DEPTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">>></span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">calcRoot</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _proofs<span class=\"token punctuation\">,</span>\n        Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _leaves<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> _root\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkGroupSorted</span><span class=\"token punctuation\">(</span>_leaves<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint160</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> stackKeys <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">uint160</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>SMT_STACK_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> stackValues <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>SMT_STACK_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint256</span> proofIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint256</span> leaveIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint256</span> stackTop <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>proofIndex <span class=\"token operator\">&lt;</span> _proofs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">[</span>proofIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x4c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                proofIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>stackTop <span class=\"token operator\">&lt;</span> SMT_STACK_SIZE<span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>leaveIndex <span class=\"token operator\">&lt;</span> _leaves<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                stackKeys<span class=\"token punctuation\">[</span>stackTop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span>_leaves<span class=\"token punctuation\">[</span>leaveIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                stackValues<span class=\"token punctuation\">[</span>stackTop<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">calcLeaf</span><span class=\"token punctuation\">(</span>_leaves<span class=\"token punctuation\">[</span>leaveIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                stackTop<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                leaveIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">[</span>proofIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x50</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                proofIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>stackTop <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>proofIndex <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;=</span> _proofs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token builtin\">uint256</span> height <span class=\"token operator\">=</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">[</span>proofIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token builtin\">bytes32</span> currentProof <span class=\"token operator\">=</span> _proofs<span class=\"token punctuation\">[</span>proofIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>currentProof <span class=\"token operator\">!=</span> _root<span class=\"token punctuation\">,</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getBit</span><span class=\"token punctuation\">(</span>stackKeys<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    stackValues<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>currentProof<span class=\"token punctuation\">,</span> stackValues<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    stackValues<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>stackValues<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> currentProof<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                stackKeys<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">parentPath</span><span class=\"token punctuation\">(</span>stackKeys<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">[</span>proofIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0x48</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                proofIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>stackTop <span class=\"token operator\">>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>proofIndex <span class=\"token operator\">&lt;</span> _proofs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token builtin\">uint256</span> height <span class=\"token operator\">=</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">[</span>proofIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token builtin\">uint256</span> aSet <span class=\"token operator\">=</span> <span class=\"token function\">getBit</span><span class=\"token punctuation\">(</span>stackKeys<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token builtin\">uint256</span> bSet <span class=\"token operator\">=</span> <span class=\"token function\">getBit</span><span class=\"token punctuation\">(</span>stackKeys<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                stackKeys<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">parentPath</span><span class=\"token punctuation\">(</span>stackKeys<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                stackKeys<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">parentPath</span><span class=\"token punctuation\">(</span>stackKeys<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>stackKeys<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> stackKeys<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> aSet <span class=\"token operator\">!=</span> bSet<span class=\"token punctuation\">,</span><span class=\"token string\">\"8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aSet <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    stackValues<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>\n                        stackValues<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        stackValues<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                    stackValues<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>\n                        stackValues<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                        stackValues<span class=\"token punctuation\">[</span>stackTop <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                stackTop <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">revert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>leaveIndex <span class=\"token operator\">==</span> _leaves<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span><span class=\"token string\">\"9\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>stackTop <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> stackValues<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">TreasureHunter</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">public</span> root<span class=\"token punctuation\">;</span>\n    SMT<span class=\"token punctuation\">.</span>Mode <span class=\"token keyword\">public</span> smtMode <span class=\"token operator\">=</span> SMT<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span>WhiteList<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bool</span> <span class=\"token keyword\">public</span> solved <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> team<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> haveKey<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> haveTreasureChest<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">event</span> <span class=\"token function\">FindKey</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> _from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">PickupTreasureChest</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> _from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">OpenTreasureChest</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> _from<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        root <span class=\"token operator\">=</span> SMT<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> hunters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hunters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e</span><span class=\"token punctuation\">;</span>\n        hunters<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45</span><span class=\"token punctuation\">;</span>\n        hunters<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6B175474E89094C44Da98b954EedeAC495271d0F</span><span class=\"token punctuation\">;</span>\n        hunters<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x6B3595068778DD592e39A122f4f5a5cF09C90fE2</span><span class=\"token punctuation\">;</span>\n        hunters<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B</span><span class=\"token punctuation\">;</span>\n        hunters<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xc00e94Cb662C3520282E6f5717214004A7f26888</span><span class=\"token punctuation\">;</span>\n        hunters<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xD533a949740bb3306d119CC777fa900bA034cd52</span><span class=\"token punctuation\">;</span>\n        hunters<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xdAC17F958D2ee523a2206206994597C13D831ec7</span><span class=\"token punctuation\">;</span>\n\n        SMT<span class=\"token punctuation\">.</span>Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> nextLeaves <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SMT</span><span class=\"token punctuation\">.</span>Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        SMT<span class=\"token punctuation\">.</span>Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> prevLeaves <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SMT</span><span class=\"token punctuation\">.</span>Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint8</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> hunters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            nextLeaves<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> SMT<span class=\"token punctuation\">.</span><span class=\"token function\">Leaf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">:</span> hunters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            prevLeaves<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> SMT<span class=\"token punctuation\">.</span><span class=\"token function\">Leaf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>key<span class=\"token punctuation\">:</span> hunters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> proof <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000000000000000000000000000000000000000000000000000000004c</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000000000000000000000000000000000000000000000000000000004c</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000000000000000000000000000000000000000000000000000000004c</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000000000000000000000000000000000000000000000000000000004c</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000000000000000000000000000000000000000000000000000000048</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000000000000000000000000000000000000000000000000000000095</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000000000000000000000000000000000000000000000000000000048</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000000000000000000000000000000000000000000000000000000099</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000000000000000000000000000000000000000000000000000000048</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000000000000000000000000000000000000000000000000000000009e</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000000000000000000000000000000000000000000000000000000004c</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000000000000000000000000000000000000000000000000000000004c</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000000000000000000000000000000000000000000000000000000004c</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000000000000000000000000000000000000000000000000000000004c</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000000000000000000000000000000000000000000000000000000048</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000000000000000000000000000000000000000000000000000000009b</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000000000000000000000000000000000000000000000000000000048</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000000000000000000000000000000000000000000000000000000009c</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000000000000000000000000000000000000000000000000000000048</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">19</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000000000000000000000000000000000000000000000000000000009e</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x0000000000000000000000000000000000000000000000000000000000000048</span><span class=\"token punctuation\">;</span>\n        proof<span class=\"token punctuation\">[</span><span class=\"token number\">21</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x000000000000000000000000000000000000000000000000000000000000009f</span><span class=\"token punctuation\">;</span>\n\n        root <span class=\"token operator\">=</span> SMT<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>proof<span class=\"token punctuation\">,</span> nextLeaves<span class=\"token punctuation\">,</span> prevLeaves<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">checkteam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>team<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">removeIndex</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> team<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>team<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            team<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> team<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        team<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> team<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _proofs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>haveKey<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkteam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        team<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root <span class=\"token operator\">=</span> SMT<span class=\"token punctuation\">.</span><span class=\"token function\">updateSingleTarget</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> SMT<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">.</span>Insert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">leave</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _proofs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>haveTreasureChest<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>team<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n                team <span class=\"token operator\">=</span> <span class=\"token function\">removeIndex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        root <span class=\"token operator\">=</span> SMT<span class=\"token punctuation\">.</span><span class=\"token function\">updateSingleTarget</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> SMT<span class=\"token punctuation\">.</span>Method<span class=\"token punctuation\">.</span>Delete<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">findKey</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _proofs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>smtMode <span class=\"token operator\">==</span> SMT<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span>BlackList<span class=\"token punctuation\">,</span> <span class=\"token string\">\"not blacklist mode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>SMT<span class=\"token punctuation\">.</span><span class=\"token function\">verifyByMode</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">,</span> team<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> smtMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hunter has fallen into a trap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        haveKey<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        smtMode <span class=\"token operator\">=</span> SMT<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span>WhiteList<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">FindKey</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">pickupTreasureChest</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _proofs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>smtMode <span class=\"token operator\">==</span> SMT<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span>WhiteList<span class=\"token punctuation\">,</span> <span class=\"token string\">\"not whitelist mode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            SMT<span class=\"token punctuation\">.</span><span class=\"token function\">verifyByMode</span><span class=\"token punctuation\">(</span>_proofs<span class=\"token punctuation\">,</span> team<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> smtMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"hunter hasn't found the treasure chest\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        haveTreasureChest<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        smtMode <span class=\"token operator\">=</span> SMT<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span>BlackList<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">PickupTreasureChest</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">openTreasureChest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>haveKey<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> haveTreasureChest<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        solved <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">OpenTreasureChest</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isSolved</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> solved<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"analyze\"><a href=\"#analyze\" class=\"headerlink\" title=\"analyze\"></a>analyze</h1><p>rwctf中有一道同名密码题，借鉴了一下，属于是收到了很大的启发吧，主要是考察算法理解能力。wp链接：<a href=\"https://r3kapig.com/writeup/20220125-rwctf4/#treasure-hunter\">https://r3kapig.com/writeup/20220125-rwctf4/#treasure-hunter</a></p>\n<p>题目通过代码实现了一个稀疏的默克尔树的功能。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Leaf</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> key<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint8</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>每一片叶子的hash由calcLeaf函数计算，如果叶子的value为0，hash则为0，否则将key和value进行拼接在进行hash计算</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">calcLeaf</span><span class=\"token punctuation\">(</span>Leaf <span class=\"token keyword\">memory</span> a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>merge函数和calcLeaf函数实现方法几乎一样，如果有0则返回非0值，否则拼接在进行hash计算</p>\n<p>解题关键在于读懂calcRoot，接受_proofs和_leaves用来计算root，proofs可以理解为opcode操作码</p>\n<ul>\n<li>0x4c: 把 leaf 压栈</li>\n<li>0x50 height proof: 把栈顶一个高度为height的元素，与proof合并，产生一个高度为height+1的元素</li>\n<li>0x48 height: 把栈顶两个高度为height元素，合并成一个高度为height+1的元素</li>\n</ul>\n<p>proof不仅包括了opcode还包括了height等其他计算root的重要参数，所以一定要读懂该函数才能合理安排顺序构造proof。</p>\n<p>得到flag的要求就是pickupTreasureChest和findkey，都有一个共同的限制条件就是team的长度要大于4，所以要先使用4个不同的account调用enter，每一次调用都会验证当前叶子是否存在于树上。由此产生了本题的第一个问题，怎样满足调用enter时需要满足的条件。(注意这里是有坑的，account必须要从小到大的顺序待用enter，否则在调用pickupTreasureChest时候过不去require(checkGroupSorted(_leaves))的验证)</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">checkGroupSorted</span><span class=\"token punctuation\">(</span>Leaf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _leaves<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>_leaves<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token builtin\">uint160</span> temp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _leaves<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">>=</span> <span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span>_leaves<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n           temp <span class=\"token operator\">=</span> <span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span>_leaves<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   \n   正是由于忽略了这部分代码，导致之前的调用顺序是乱的，导致构造的pickupTreasureChest的proof无法通过验证，正是由于这个原因，在比赛期间这道题没有做出来<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>把题目合约中的计算部分抽出来用来计算每一步的值进行逆运算得到初始l和r</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">ctf</span>  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">calcLeaf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> a<span class=\"token punctuation\">,</span><span class=\"token builtin\">uint8</span> i<span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getBit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span> key<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> height<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">>></span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> l<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">parentPath</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span> key<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> height<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">copyBit</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> height <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">copyBit</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span> key<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> height<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">>></span> height<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getkey</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> a<span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>根据init函数中提供的hunters和对应的opcode，手动按顺序来逆运算出生成root时对应的l和r，对应过程如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">key[0]&#x3D;67195782237580418295514311543555631277138434366\n\nvalue[0]&#x3D;0x42091f1481d9d568ab08dce0e8f3911898017e21906034ecd2118d2763b99d9c\n\n\n\nkey[1]&#x3D;597733001430176024049334587394716596403930790981\n\nvalue[1]&#x3D;0x2063a2b5df4feb4eafc67a25e78de774944b78020cd06ecd374fed9015fb4611\n\n\n\nkey[2]&#x3D;611382286831621467233887798921843936019654057231\n\nvalue[2]&#x3D;0x28c420d41601e064fc8cc12b320362ca54019acc8f163ced66d9dc6175c08828\n\n\n\nkey[3]&#x3D;612056933926044330453951588849579298520690135010\n\nvalue[3]&#x3D;0x1b6f546f2f331bc5096695091bf5acea54870c174dc1db4fa7a9ad56b0384b40\n\n\n\n\naset&#x3D;0\n\nkey[2]&#x3D;610862012478150829092946394924383918371815555072\n\nkey[3]&#x3D;610862012478150829092946394924383918371815555072\n\nvalue[2]&#x3D;0x213efbd08a6ee2d6bb2b0b1fd0e5ae51a23a4c01f9d512297fc6047904134a27\n\n\n\naset&#x3D;0\n\nkey[1]&#x3D;593735040165679310520246963290989976735222595584\n\nkey[2]&#x3D;593735040165679310520246963290989976735222595584\n\nvalue[1]&#x3D;0xb5b476b49d923292d3ec729b3dddf94c1e917dd3e58ba754da05f9d8699b3736\n\n \n\n\naset&#x3D;0\n\nkey[0]&#x3D;0\n\nkey[1]&#x3D;0\n\nvalue[0]&#x3D;0xe9f810898db8dc62342eaa122fd26525362f2b70bd462edef6e4e34093d66c17\n\n\n\n\n\nkey[1]&#x3D;978200031609045874420567273872976536139233684635\n\nvalue[1]&#x3D;0x06888f968192a70674eacf045568b8ea9498309e832d1afd30932de111b5de81\n\n\n\nkey[2]&#x3D;1096451400262405796991039590211805051831004063880\n\nvalue[2]&#x3D;0x3815ddcd584b5527f7ceffc40c0107318577faa17dfc2b32a35b8513b0f0f950\n\n\n\nkey[3]&#x3D;1217167119161789330316589216740865579008239390034\n\nvalue[3]&#x3D;0x1354cde30ff01cefe86de5e324565b9387a794adcf8cd1ddeaf76e7fff0106b0\n\n\n\nkey[4]&#x3D;1248875146012964071876423320777688075155124985543\n\nvalue[4]&#x3D;0x591a3b2777bc31889c69fb5cad740ac457874aa5ce74c0ad08912df8ad7d112c\n\ntop&#x3D;5\n\n\n\n\naset&#x3D;0\n\nkey[3]&#x3D;1187470080331358621040493926581979953470445191168\n\nkey[4]&#x3D;1187470080331358621040493926581979953470445191168\n\nvalue[3]&#x3D;0x5e2d4ac1a991f07a58b5b59b2ca7427ff1e928a4aa95a868b82d67a8173c8306\n\n\n\naset&#x3D;0\n\nkey[2]&#x3D;1096126227998177188652763624537212264741949407232\n\nkey[3]&#x3D;1096126227998177188652763624537212264741949407232\n\nvalue[2]&#x3D;0xf4d48cacb338d80223fa2a9769ddfc803cc33d764ba4e5a0f5c304f2eb7cf5bc\n\n\n\naset&#x3D;0\n\nkey[1]&#x3D;730750818665451459101842416358141509827966271488\n\nkey[2]&#x3D;730750818665451459101842416358141509827966271488\n\nvalue[1]&#x3D;0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2\n\n\n\naset&#x3D;0\n\nkey[0]&#x3D;0\n\nkey[1]&#x3D;0\n\nvalue[0]&#x3D;0xe2e8ebf79be9c50374592f83db1c4c82e4d97b4dae6dc26332d259289467ff8e\n\n\n最终得到init产生的root是由以下的l和r进行merge而来的：\n\nl&#x3D;0xe9f810898db8dc62342eaa122fd26525362f2b70bd462edef6e4e34093d66c17\n\nr&#x3D;0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>得到了初始化时所用的l和r之后，我们就可以构造enter所用的proof了</p>\n<p>我所用的账户如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">account1：0x749F4eddefA7C74Adf35892Ee1bbf76884728b34\naccount2：0xc2f71D890910F7E34cfd4Aef8079b814c0b6711f\naccount3：0xC8aF1811a07FfeB80FF7A00662338E3D079F1Cdf\naccount4：0xcD21ba755eFC7c73900e63C2b36d2134f5E712Ba<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：验证时验证value为0的leaves即nextleaves，更新指定位置的hash值时更新的是value为1的leaves即nextleaves。</p>\n<p>知道了以上这些就可以构造出四次调用enter的proof如下</p>\n<p>1：0x749F4eddefA7C74Adf35892Ee1bbf76884728b34:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[&quot;0x000000000000000000000000000000000000000000000000000000000000004c&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000050&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009c&quot;,&quot;0xe9f810898db8dc62342eaa122fd26525362f2b70bd462edef6e4e34093d66c17&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000050&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009c&quot;,&quot;0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>第一次压栈时leaf.value为0所以stackvalue为0，所以两次0x50进行合并操作计算的是l:0xe9f810898db8dc62342eaa122fd26525362f2b70bd462edef6e4e34093d66c17l和r:0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2进行merge的结果，而实际更新的root是由leaf.value为1时对应该proof所计算出的root，对应的会更新新的l而r不会变，比如此处进行enter之后l和r会变为如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">l:0xf726c3600caf4ae2dc00053b4afe24456ac19369a5be709f08fcc06422ddaaed\nr：0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>如下构造同上。</p>\n<p>2：0xc2f71D890910F7E34cfd4Aef8079b814c0b6711f</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[&quot;0x000000000000000000000000000000000000000000000000000000000000004c&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000050&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000099&quot;,&quot;0xf726c3600caf4ae2dc00053b4afe24456ac19369a5be709f08fcc06422ddaaed&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000050&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000099&quot;,&quot;0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3：0xC8aF1811a07FfeB80FF7A00662338E3D079F1Cdf</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[&quot;0x000000000000000000000000000000000000000000000000000000000000004c&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000050&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009e&quot;,&quot;0xb0d1fdbfcc8a700fa28d1c7de5c93ce07f599052695b20ed2e93a206c573bcdc&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000050&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009e&quot;,&quot;0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>4：0xcD21ba755eFC7c73900e63C2b36d2134f5E712Ba</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[&quot;0x000000000000000000000000000000000000000000000000000000000000004c&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000050&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009e&quot;,&quot;0xef4cf01a185126f8fd9d2323968857bc6d05b860d81bf93e9c7d43ad068aafc8&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000050&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009e&quot;,&quot;0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>构造了如下图的树状:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281247215.png\"></p>\n<p>接下来依据四次的msg.senger和proof构造新的proof用以通过pickupTreasureChest函数中的require条件</p>\n<p>注意要求取同一高度的比特位值不相同<br><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281247882.png\"><br><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images/img/202204281247259.png\"><br>构造得：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[&quot;0x000000000000000000000000000000000000000000000000000000000000004c&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000050&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009e&quot;,&quot;0xe9f810898db8dc62342eaa122fd26525362f2b70bd462edef6e4e34093d66c17&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000004c&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000048&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009f&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000004c&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000048&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009f&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000004c&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000048&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009f&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000050&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,&quot;0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用该数组调用pickupTreasureChest函数，此时smtMode &#x3D; SMT.Mode.BlackList满足了findkey函数下的第一个限制条件</p>\n<p>此处smt已经变为0，相对来说要简单一些，构造proof用来满足第三个限制条件，在此处参考上一步构造的height，及那个用来生成root的l以及r：0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2塞进去就满足了最终限制条件。得到proof如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[&quot;0x000000000000000000000000000000000000000000000000000000000000004c&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000004c&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000048&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009f&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000004c&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000048&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009f&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000004c&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000048&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009f&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000050&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009c&quot;,&quot;0xfcf770421cd6535f7b5b39c39da3a2bc134e41abfec46997159f902b793c7765&quot;,&quot;0x0000000000000000000000000000000000000000000000000000000000000050&quot;,&quot;0x000000000000000000000000000000000000000000000000000000000000009f&quot;,&quot;0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2&quot;]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"attack\"><a href=\"#attack\" class=\"headerlink\" title=\"attack\"></a>attack</h1><p>构造完成之后就没有难度了，按顺序调用函数即可</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> web3 <span class=\"token keyword\">import</span> Web3<span class=\"token punctuation\">,</span>HTTPProvider\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\nw3<span class=\"token operator\">=</span>Web3<span class=\"token punctuation\">(</span>HTTPProvider<span class=\"token punctuation\">(</span><span class=\"token string\">'HTTP://127.0.0.1:7545'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nabi<span class=\"token operator\">=</span><span class=\"token triple-quoted-string string\">'''\n[\n\t&#123;\n\t\t\"inputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t&#125;,\n\t&#123;\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [\n\t\t\t&#123;\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"_from\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t&#125;\n\t\t],\n\t\t\"name\": \"FindKey\",\n\t\t\"type\": \"event\"\n\t&#125;,\n\t&#123;\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [\n\t\t\t&#123;\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"_from\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t&#125;\n\t\t],\n\t\t\"name\": \"OpenTreasureChest\",\n\t\t\"type\": \"event\"\n\t&#125;,\n\t&#123;\n\t\t\"anonymous\": false,\n\t\t\"inputs\": [\n\t\t\t&#123;\n\t\t\t\t\"indexed\": true,\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"_from\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t&#125;\n\t\t],\n\t\t\"name\": \"PickupTreasureChest\",\n\t\t\"type\": \"event\"\n\t&#125;,\n\t&#123;\n\t\t\"inputs\": [],\n\t\t\"name\": \"checkteam\",\n\t\t\"outputs\": [\n\t\t\t&#123;\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t&#125;\n\t\t],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t&#125;,\n\t&#123;\n\t\t\"inputs\": [\n\t\t\t&#123;\n\t\t\t\t\"internalType\": \"bytes32[]\",\n\t\t\t\t\"name\": \"_proofs\",\n\t\t\t\t\"type\": \"bytes32[]\"\n\t\t\t&#125;\n\t\t],\n\t\t\"name\": \"enter\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t&#125;,\n\t&#123;\n\t\t\"inputs\": [\n\t\t\t&#123;\n\t\t\t\t\"internalType\": \"bytes32[]\",\n\t\t\t\t\"name\": \"_proofs\",\n\t\t\t\t\"type\": \"bytes32[]\"\n\t\t\t&#125;\n\t\t],\n\t\t\"name\": \"findKey\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t&#125;,\n\t&#123;\n\t\t\"inputs\": [\n\t\t\t&#123;\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t&#125;\n\t\t],\n\t\t\"name\": \"haveKey\",\n\t\t\"outputs\": [\n\t\t\t&#123;\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t&#125;\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t&#125;,\n\t&#123;\n\t\t\"inputs\": [\n\t\t\t&#123;\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t&#125;\n\t\t],\n\t\t\"name\": \"haveTreasureChest\",\n\t\t\"outputs\": [\n\t\t\t&#123;\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t&#125;\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t&#125;,\n\t&#123;\n\t\t\"inputs\": [],\n\t\t\"name\": \"isSolved\",\n\t\t\"outputs\": [\n\t\t\t&#123;\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t&#125;\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t&#125;,\n\t&#123;\n\t\t\"inputs\": [\n\t\t\t&#123;\n\t\t\t\t\"internalType\": \"bytes32[]\",\n\t\t\t\t\"name\": \"_proofs\",\n\t\t\t\t\"type\": \"bytes32[]\"\n\t\t\t&#125;\n\t\t],\n\t\t\"name\": \"leave\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t&#125;,\n\t&#123;\n\t\t\"inputs\": [],\n\t\t\"name\": \"openTreasureChest\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t&#125;,\n\t&#123;\n\t\t\"inputs\": [\n\t\t\t&#123;\n\t\t\t\t\"internalType\": \"bytes32[]\",\n\t\t\t\t\"name\": \"_proofs\",\n\t\t\t\t\"type\": \"bytes32[]\"\n\t\t\t&#125;\n\t\t],\n\t\t\"name\": \"pickupTreasureChest\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t&#125;,\n\t&#123;\n\t\t\"inputs\": [],\n\t\t\"name\": \"root\",\n\t\t\"outputs\": [\n\t\t\t&#123;\n\t\t\t\t\"internalType\": \"bytes32\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bytes32\"\n\t\t\t&#125;\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t&#125;,\n\t&#123;\n\t\t\"inputs\": [],\n\t\t\"name\": \"smtMode\",\n\t\t\"outputs\": [\n\t\t\t&#123;\n\t\t\t\t\"internalType\": \"enum SMT.Mode\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint8\"\n\t\t\t&#125;\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t&#125;,\n\t&#123;\n\t\t\"inputs\": [],\n\t\t\"name\": \"solved\",\n\t\t\"outputs\": [\n\t\t\t&#123;\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t&#125;\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t&#125;\n]\n'''</span>\nprivatekey1<span class=\"token operator\">=</span><span class=\"token string\">'your_privatekey1'</span>\nprivatekey2<span class=\"token operator\">=</span><span class=\"token string\">'your_privatekey2'</span>\nprivatekey3<span class=\"token operator\">=</span><span class=\"token string\">'your_privatekey3'</span>\nprivatekey4<span class=\"token operator\">=</span><span class=\"token string\">'your_privatekey4'</span>\n\nacct1<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>account<span class=\"token punctuation\">.</span>from_key<span class=\"token punctuation\">(</span>privatekey1<span class=\"token punctuation\">)</span>\nacct2<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>account<span class=\"token punctuation\">.</span>from_key<span class=\"token punctuation\">(</span>privatekey2<span class=\"token punctuation\">)</span>\nacct3<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>account<span class=\"token punctuation\">.</span>from_key<span class=\"token punctuation\">(</span>privatekey3<span class=\"token punctuation\">)</span>\nacct4<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>account<span class=\"token punctuation\">.</span>from_key<span class=\"token punctuation\">(</span>privatekey4<span class=\"token punctuation\">)</span>\n\naddress<span class=\"token operator\">=</span><span class=\"token string\">'your_contract_address'</span>\ncontract<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>contract<span class=\"token punctuation\">(</span>abi<span class=\"token operator\">=</span>abi<span class=\"token punctuation\">,</span>address<span class=\"token operator\">=</span>address<span class=\"token punctuation\">)</span>\n\nenter1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000004c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000050\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0xe9f810898db8dc62342eaa122fd26525362f2b70bd462edef6e4e34093d66c17\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000050\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2\"</span><span class=\"token punctuation\">]</span>\nenter2<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000004c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000050\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000099\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0xf726c3600caf4ae2dc00053b4afe24456ac19369a5be709f08fcc06422ddaaed\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000050\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000099\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2\"</span><span class=\"token punctuation\">]</span>\nenter3<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000004c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000050\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009e\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0xb0d1fdbfcc8a700fa28d1c7de5c93ce07f599052695b20ed2e93a206c573bcdc\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000050\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009e\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2\"</span><span class=\"token punctuation\">]</span>\nenter4<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000004c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000050\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009e\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0xef4cf01a185126f8fd9d2323968857bc6d05b860d81bf93e9c7d43ad068aafc8\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000050\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009e\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2\"</span><span class=\"token punctuation\">]</span>\npick<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000004c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000050\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009e\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0xe9f810898db8dc62342eaa122fd26525362f2b70bd462edef6e4e34093d66c17\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000004c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000048\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009f\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000004c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000048\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009f\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000004c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000048\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009f\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000050\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2\"</span><span class=\"token punctuation\">]</span>\nfind<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000004c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000004c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000048\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009f\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000004c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000048\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009f\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000004c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000048\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009f\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000050\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009c\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0xfcf770421cd6535f7b5b39c39da3a2bc134e41abfec46997159f902b793c7765\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000050\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000000000009f\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"0xba13a52ab72064627701ac75ab564f7e786d093c655849458536cc689abdf8e2\"</span><span class=\"token punctuation\">]</span>\n\n\n\nenter1_txn<span class=\"token operator\">=</span>contract<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span>enter<span class=\"token punctuation\">(</span>enter1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buildTransaction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token string\">'nonce'</span><span class=\"token punctuation\">:</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getTransactionCount<span class=\"token punctuation\">(</span>acct1<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'gas'</span><span class=\"token punctuation\">:</span><span class=\"token number\">300000</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'gasPrice'</span><span class=\"token punctuation\">:</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>gasPrice\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nsigned1<span class=\"token operator\">=</span>acct1<span class=\"token punctuation\">.</span>signTransaction<span class=\"token punctuation\">(</span>enter1_txn<span class=\"token punctuation\">)</span>\ntx_id1<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>sendRawTransaction<span class=\"token punctuation\">(</span>signed1<span class=\"token punctuation\">.</span>rawTransaction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tx_id1<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\nenter2_txn<span class=\"token operator\">=</span>contract<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span>enter<span class=\"token punctuation\">(</span>enter2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buildTransaction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token string\">'nonce'</span><span class=\"token punctuation\">:</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getTransactionCount<span class=\"token punctuation\">(</span>acct2<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'gas'</span><span class=\"token punctuation\">:</span><span class=\"token number\">300000</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'gasPrice'</span><span class=\"token punctuation\">:</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>gasPrice\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nsigned2<span class=\"token operator\">=</span>acct2<span class=\"token punctuation\">.</span>signTransaction<span class=\"token punctuation\">(</span>enter2_txn<span class=\"token punctuation\">)</span>\ntx_id2<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>sendRawTransaction<span class=\"token punctuation\">(</span>signed2<span class=\"token punctuation\">.</span>rawTransaction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tx_id2<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\nenter3_txn<span class=\"token operator\">=</span>contract<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span>enter<span class=\"token punctuation\">(</span>enter3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buildTransaction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token string\">'nonce'</span><span class=\"token punctuation\">:</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getTransactionCount<span class=\"token punctuation\">(</span>acct3<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'gas'</span><span class=\"token punctuation\">:</span><span class=\"token number\">300000</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'gasPrice'</span><span class=\"token punctuation\">:</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>gasPrice\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nsigned3<span class=\"token operator\">=</span>acct3<span class=\"token punctuation\">.</span>signTransaction<span class=\"token punctuation\">(</span>enter3_txn<span class=\"token punctuation\">)</span>\ntx_id3<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>sendRawTransaction<span class=\"token punctuation\">(</span>signed3<span class=\"token punctuation\">.</span>rawTransaction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tx_id3<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\nenter4_txn<span class=\"token operator\">=</span>contract<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span>enter<span class=\"token punctuation\">(</span>enter4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buildTransaction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token string\">'nonce'</span><span class=\"token punctuation\">:</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getTransactionCount<span class=\"token punctuation\">(</span>acct4<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'gas'</span><span class=\"token punctuation\">:</span><span class=\"token number\">300000</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'gasPrice'</span><span class=\"token punctuation\">:</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>gasPrice\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nsigned4<span class=\"token operator\">=</span>acct4<span class=\"token punctuation\">.</span>signTransaction<span class=\"token punctuation\">(</span>enter4_txn<span class=\"token punctuation\">)</span>\ntx_id4<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>sendRawTransaction<span class=\"token punctuation\">(</span>signed4<span class=\"token punctuation\">.</span>rawTransaction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>tx_id4<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\npick_txn<span class=\"token operator\">=</span>contract<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span>pickupTreasureChest<span class=\"token punctuation\">(</span>pick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buildTransaction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token string\">'nonce'</span><span class=\"token punctuation\">:</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getTransactionCount<span class=\"token punctuation\">(</span>acct4<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'gas'</span><span class=\"token punctuation\">:</span><span class=\"token number\">300000</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'gasPrice'</span><span class=\"token punctuation\">:</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>gasPrice\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\npicksigned<span class=\"token operator\">=</span>acct4<span class=\"token punctuation\">.</span>signTransaction<span class=\"token punctuation\">(</span>pick_txn<span class=\"token punctuation\">)</span>\npick_id<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>sendRawTransaction<span class=\"token punctuation\">(</span>picksigned<span class=\"token punctuation\">.</span>rawTransaction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pick_id<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\nfind_txn<span class=\"token operator\">=</span>contract<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span>findKey<span class=\"token punctuation\">(</span>find<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buildTransaction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token string\">'nonce'</span><span class=\"token punctuation\">:</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getTransactionCount<span class=\"token punctuation\">(</span>acct4<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'gas'</span><span class=\"token punctuation\">:</span><span class=\"token number\">300000</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'gasPrice'</span><span class=\"token punctuation\">:</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>gasPrice\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nfindsigned<span class=\"token operator\">=</span>acct4<span class=\"token punctuation\">.</span>signTransaction<span class=\"token punctuation\">(</span>find_txn<span class=\"token punctuation\">)</span>\nfind_id<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>sendRawTransaction<span class=\"token punctuation\">(</span>findsigned<span class=\"token punctuation\">.</span>rawTransaction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>find_id<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n\nsolve_txn<span class=\"token operator\">=</span>contract<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span>openTreasureChest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>buildTransaction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token string\">'nonce'</span><span class=\"token punctuation\">:</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getTransactionCount<span class=\"token punctuation\">(</span>acct4<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'gas'</span><span class=\"token punctuation\">:</span><span class=\"token number\">300000</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'gasPrice'</span><span class=\"token punctuation\">:</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>gasPrice\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\nsolvesigned<span class=\"token operator\">=</span>acct4<span class=\"token punctuation\">.</span>signTransaction<span class=\"token punctuation\">(</span>solve_txn<span class=\"token punctuation\">)</span>\nsolve_id<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>sendRawTransaction<span class=\"token punctuation\">(</span>solvesigned<span class=\"token punctuation\">.</span>rawTransaction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>solve_id<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"周六时候打了一下*ctf，其中的区块链题目还是蛮有意思的，拿出来分享一下 codepragma solidity >=0.8.0 &lt;0.9.0; uint256 constant SMT_STACK_SIZE = 32; uint256 constant DEPTH = 1...","link":"","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[],"tags":[{"name":"区块链 ctf","slug":"区块链-ctf","count":12,"path":"api/tags/区块链-ctf.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#code\"><span class=\"toc-text\">code</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#analyze\"><span class=\"toc-text\">analyze</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#attack\"><span class=\"toc-text\">attack</span></a></li></ol>","author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/296321666270692_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Analysis of uniswapV2","uid":"e27183e0e340d83abbd9dfc8e53b323b","slug":"UniswapV2","date":"2022-08-01T10:44:56.839Z","updated":"2022-12-16T07:39:40.164Z","comments":true,"path":"api/articles/UniswapV2.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/uniswap-uni-logo.png","text":"相对系统且深入的了解了一下uniswapV2 whitepaper： https://uniswap.org/whitepaper.pdf EIP-2612： https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2612.m...","link":"","photos":[],"count_time":{"symbolsCount":"81k","symbolsTime":"1:14"},"categories":[],"tags":[{"name":"区块链 ctf","slug":"区块链-ctf","count":12,"path":"api/tags/区块链-ctf.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/296321666270692_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Compound Governance","uid":"c4cf27239136a3939e68273bf6eed499","slug":"Compound","date":"2022-08-01T10:42:57.893Z","updated":"2023-01-09T03:59:23.605Z","comments":true,"path":"api/articles/Compound.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/5692.png","text":"Governance Flowchart Governance TokenCode Click to see more // SPDX-License-Identifier: BSD-3-Clause pragma solidity ^0.8.10; contract Comp ...","link":"","photos":[],"count_time":{"symbolsCount":"66k","symbolsTime":"1:01"},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":19,"path":"api/tags/区块链.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/296321666270692_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}