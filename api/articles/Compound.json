{"title":"Compound Governance","uid":"c4cf27239136a3939e68273bf6eed499","slug":"Compound","date":"2022-08-01T10:42:57.893Z","updated":"2022-08-01T10:42:57.893Z","comments":true,"path":"api/articles/Compound.json","keywords":null,"cover":[],"content":"<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images1/img/202207141203894.png\"></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Governance-Token\"><a href=\"#Governance-Token\" class=\"headerlink\" title=\"Governance Token\"></a>Governance Token</h1><h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: BSD-3-Clause</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Comp</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/// @notice EIP-20 token name for this token</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Compound\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice EIP-20 token symbol for this token</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> symbol <span class=\"token operator\">=</span> <span class=\"token string\">\"COMP\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice EIP-20 token decimals for this token</span>\n    <span class=\"token builtin\">uint8</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> decimals <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice Total number of tokens in circulation</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> totalSupply <span class=\"token operator\">=</span> <span class=\"token number\">10000000e18</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10 million Comp</span>\n\n    <span class=\"token comment\">/// @notice Allowance amounts on behalf of others</span>\n    <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint96</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> allowances<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice Official record of token balances for each account</span>\n    <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint96</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> balances<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice A record of each accounts delegate</span>\n    <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> delegates<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice A checkpoint for marking number of votes from a given block</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Checkpoint</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint32</span> fromBlock<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint96</span> votes<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/// @notice A record of votes checkpoints for each account, by index</span>\n    <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span> <span class=\"token operator\">=></span> Checkpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> checkpoints<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice The number of checkpoints for each account</span>\n    <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint32</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> numCheckpoints<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice The EIP-712 typehash for the contract's domain</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> DOMAIN_TYPEHASH <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice The EIP-712 typehash for the delegation struct used by the contract</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> DELEGATION_TYPEHASH <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice A record of states for signing / validating signatures</span>\n    <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> nonces<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice An event thats emitted when an account changes its delegate</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">DelegateChanged</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> delegator<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> fromDelegate<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> toDelegate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice An event thats emitted when a delegate account's vote balance changes</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">DelegateVotesChanged</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> delegate<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> previousBalance<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> newBalance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice The standard EIP-20 transfer event</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice The standard EIP-20 approval event</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">Approval</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> owner<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> spender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Construct a new Comp token\n     * @param account The initial account to grant all the tokens\n     */</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        balances<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">uint96</span><span class=\"token punctuation\">(</span>totalSupply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">,</span> totalSupply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n     * @param account The address of the account holding the funds\n     * @param spender The address of the account spending the funds\n     * @return The number of tokens approved\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">allowance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> allowances<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>spender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n     * @return Whether or not the approval succeeded\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> rawAmount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint96</span> amount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rawAmount <span class=\"token operator\">==</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            amount <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint96</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            amount <span class=\"token operator\">=</span> <span class=\"token function\">safe96</span><span class=\"token punctuation\">(</span>rawAmount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::approve: amount exceeds 96 bits\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        allowances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>spender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Approval</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Get the number of tokens held by the `account`\n     * @param account The address of the account to get the balance of\n     * @return The number of tokens held\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> balances<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> dst<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> rawAmount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint96</span> amount <span class=\"token operator\">=</span> <span class=\"token function\">safe96</span><span class=\"token punctuation\">(</span>rawAmount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::transfer: amount exceeds 96 bits\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_transferTokens</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">transferFrom</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> src<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> dst<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> rawAmount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">address</span> spender <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint96</span> spenderAllowance <span class=\"token operator\">=</span> allowances<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>spender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint96</span> amount <span class=\"token operator\">=</span> <span class=\"token function\">safe96</span><span class=\"token punctuation\">(</span>rawAmount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::approve: amount exceeds 96 bits\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>spender <span class=\"token operator\">!=</span> src <span class=\"token operator\">&amp;&amp;</span> spenderAllowance <span class=\"token operator\">!=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint96</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token builtin\">uint96</span> newAllowance <span class=\"token operator\">=</span> <span class=\"token function\">sub96</span><span class=\"token punctuation\">(</span>spenderAllowance<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::transferFrom: transfer amount exceeds spender allowance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            allowances<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>spender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newAllowance<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">emit</span> <span class=\"token function\">Approval</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> newAllowance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token function\">_transferTokens</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">delegate</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> delegatee<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">_delegate</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> delegatee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">delegateBySig</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> delegatee<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> nonce<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> expiry<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">bytes32</span> domainSeparator <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>DOMAIN_TYPEHASH<span class=\"token punctuation\">,</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getChainId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes32</span> structHash <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>DELEGATION_TYPEHASH<span class=\"token punctuation\">,</span> delegatee<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">,</span> expiry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes32</span> digest <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x19\\x01\"</span><span class=\"token punctuation\">,</span> domainSeparator<span class=\"token punctuation\">,</span> structHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">address</span> signatory <span class=\"token operator\">=</span> <span class=\"token function\">ecrecover</span><span class=\"token punctuation\">(</span>digest<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>signatory <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::delegateBySig: invalid signature\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>nonce <span class=\"token operator\">==</span> nonces<span class=\"token punctuation\">[</span>signatory<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::delegateBySig: invalid nonce\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">&lt;=</span> expiry<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::delegateBySig: signature expired\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">_delegate</span><span class=\"token punctuation\">(</span>signatory<span class=\"token punctuation\">,</span> delegatee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getCurrentVotes</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint96</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint32</span> nCheckpoints <span class=\"token operator\">=</span> numCheckpoints<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nCheckpoints <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> checkpoints<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nCheckpoints <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>votes <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getPriorVotes</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> blockNumber<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint96</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>blockNumber <span class=\"token operator\">&lt;</span> block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::getPriorVotes: not yet determined\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">uint32</span> nCheckpoints <span class=\"token operator\">=</span> numCheckpoints<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nCheckpoints <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// First check most recent balance</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>checkpoints<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nCheckpoints <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fromBlock <span class=\"token operator\">&lt;=</span> blockNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> checkpoints<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nCheckpoints <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>votes<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// Next check implicit zero balance</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>checkpoints<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fromBlock <span class=\"token operator\">></span> blockNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token builtin\">uint32</span> lower <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint32</span> upper <span class=\"token operator\">=</span> nCheckpoints <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>upper <span class=\"token operator\">></span> lower<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token builtin\">uint32</span> center <span class=\"token operator\">=</span> upper <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>upper <span class=\"token operator\">-</span> lower<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ceil, avoiding overflow</span>\n            Checkpoint <span class=\"token keyword\">memory</span> cp <span class=\"token operator\">=</span> checkpoints<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>center<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">.</span>fromBlock <span class=\"token operator\">==</span> blockNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> cp<span class=\"token punctuation\">.</span>votes<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">.</span>fromBlock <span class=\"token operator\">&lt;</span> blockNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                lower <span class=\"token operator\">=</span> center<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                upper <span class=\"token operator\">=</span> center <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> checkpoints<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>lower<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>votes<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_delegate</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> delegator<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> delegatee<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">address</span> currentDelegate <span class=\"token operator\">=</span> delegates<span class=\"token punctuation\">[</span>delegator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint96</span> delegatorBalance <span class=\"token operator\">=</span> balances<span class=\"token punctuation\">[</span>delegator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        delegates<span class=\"token punctuation\">[</span>delegator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> delegatee<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">DelegateChanged</span><span class=\"token punctuation\">(</span>delegator<span class=\"token punctuation\">,</span> currentDelegate<span class=\"token punctuation\">,</span> delegatee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_moveDelegates</span><span class=\"token punctuation\">(</span>currentDelegate<span class=\"token punctuation\">,</span> delegatee<span class=\"token punctuation\">,</span> delegatorBalance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_transferTokens</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> src<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> dst<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint96</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>src <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::_transferTokens: cannot transfer from the zero address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>dst <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::_transferTokens: cannot transfer to the zero address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        balances<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">sub96</span><span class=\"token punctuation\">(</span>balances<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::_transferTokens: transfer amount exceeds balance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        balances<span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">add96</span><span class=\"token punctuation\">(</span>balances<span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::_transferTokens: transfer amount overflows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_moveDelegates</span><span class=\"token punctuation\">(</span>delegates<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> delegates<span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_moveDelegates</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> srcRep<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> dstRep<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint96</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcRep <span class=\"token operator\">!=</span> dstRep <span class=\"token operator\">&amp;&amp;</span> amount <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcRep <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token builtin\">uint32</span> srcRepNum <span class=\"token operator\">=</span> numCheckpoints<span class=\"token punctuation\">[</span>srcRep<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token builtin\">uint96</span> srcRepOld <span class=\"token operator\">=</span> srcRepNum <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> checkpoints<span class=\"token punctuation\">[</span>srcRep<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>srcRepNum <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>votes <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token builtin\">uint96</span> srcRepNew <span class=\"token operator\">=</span> <span class=\"token function\">sub96</span><span class=\"token punctuation\">(</span>srcRepOld<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::_moveVotes: vote amount underflows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">_writeCheckpoint</span><span class=\"token punctuation\">(</span>srcRep<span class=\"token punctuation\">,</span> srcRepNum<span class=\"token punctuation\">,</span> srcRepOld<span class=\"token punctuation\">,</span> srcRepNew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dstRep <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token builtin\">uint32</span> dstRepNum <span class=\"token operator\">=</span> numCheckpoints<span class=\"token punctuation\">[</span>dstRep<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token builtin\">uint96</span> dstRepOld <span class=\"token operator\">=</span> dstRepNum <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> checkpoints<span class=\"token punctuation\">[</span>dstRep<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>dstRepNum <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>votes <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token builtin\">uint96</span> dstRepNew <span class=\"token operator\">=</span> <span class=\"token function\">add96</span><span class=\"token punctuation\">(</span>dstRepOld<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::_moveVotes: vote amount overflows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">_writeCheckpoint</span><span class=\"token punctuation\">(</span>dstRep<span class=\"token punctuation\">,</span> dstRepNum<span class=\"token punctuation\">,</span> dstRepOld<span class=\"token punctuation\">,</span> dstRepNew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_writeCheckpoint</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> delegatee<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint32</span> nCheckpoints<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint96</span> oldVotes<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint96</span> newVotes<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token builtin\">uint32</span> blockNumber <span class=\"token operator\">=</span> <span class=\"token function\">safe32</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::_writeCheckpoint: block number exceeds 32 bits\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nCheckpoints <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> checkpoints<span class=\"token punctuation\">[</span>delegatee<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nCheckpoints <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fromBlock <span class=\"token operator\">==</span> blockNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          checkpoints<span class=\"token punctuation\">[</span>delegatee<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nCheckpoints <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>votes <span class=\"token operator\">=</span> newVotes<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          checkpoints<span class=\"token punctuation\">[</span>delegatee<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nCheckpoints<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Checkpoint</span><span class=\"token punctuation\">(</span>blockNumber<span class=\"token punctuation\">,</span> newVotes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          numCheckpoints<span class=\"token punctuation\">[</span>delegatee<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nCheckpoints <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token keyword\">emit</span> <span class=\"token function\">DelegateVotesChanged</span><span class=\"token punctuation\">(</span>delegatee<span class=\"token punctuation\">,</span> oldVotes<span class=\"token punctuation\">,</span> newVotes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">safe32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> n<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> errorMessage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">safe96</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> n<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> errorMessage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint96</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">uint96</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">add96</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint96</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint96</span> b<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> errorMessage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint96</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint96</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> a<span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sub96</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint96</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint96</span> b<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> errorMessage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint96</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getChainId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint256</span> chainId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span> chainId <span class=\"token operator\">:=</span> <span class=\"token function\">chainid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> chainId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyze\"><a href=\"#Analyze\" class=\"headerlink\" title=\"Analyze\"></a>Analyze</h2><p>COMP，是一个代表vote的ERC-20代币，包含了一些相关的治理方法</p>\n<p>多余的就不做过多解释了，直接进入比较特色的地方</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">delegate</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> delegatee<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_delegate</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> delegatee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">delegateBySig</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> delegatee<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> nonce<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> expiry<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">bytes32</span> domainSeparator <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>DOMAIN_TYPEHASH<span class=\"token punctuation\">,</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getChainId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bytes32</span> structHash <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>DELEGATION_TYPEHASH<span class=\"token punctuation\">,</span> delegatee<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">,</span> expiry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bytes32</span> digest <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x19\\x01\"</span><span class=\"token punctuation\">,</span> domainSeparator<span class=\"token punctuation\">,</span> structHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> signatory <span class=\"token operator\">=</span> <span class=\"token function\">ecrecover</span><span class=\"token punctuation\">(</span>digest<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>signatory <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::delegateBySig: invalid signature\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>nonce <span class=\"token operator\">==</span> nonces<span class=\"token punctuation\">[</span>signatory<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::delegateBySig: invalid nonce\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">&lt;=</span> expiry<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::delegateBySig: signature expired\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_delegate</span><span class=\"token punctuation\">(</span>signatory<span class=\"token punctuation\">,</span> delegatee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">_delegate</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> delegator<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> delegatee<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> currentDelegate <span class=\"token operator\">=</span> delegates<span class=\"token punctuation\">[</span>delegator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint96</span> delegatorBalance <span class=\"token operator\">=</span> balances<span class=\"token punctuation\">[</span>delegator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    delegates<span class=\"token punctuation\">[</span>delegator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> delegatee<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">DelegateChanged</span><span class=\"token punctuation\">(</span>delegator<span class=\"token punctuation\">,</span> currentDelegate<span class=\"token punctuation\">,</span> delegatee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">_moveDelegates</span><span class=\"token punctuation\">(</span>currentDelegate<span class=\"token punctuation\">,</span> delegatee<span class=\"token punctuation\">,</span> delegatorBalance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_moveDelegates</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> srcRep<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> dstRep<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint96</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcRep <span class=\"token operator\">!=</span> dstRep <span class=\"token operator\">&amp;&amp;</span> amount <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>srcRep <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token builtin\">uint32</span> srcRepNum <span class=\"token operator\">=</span> numCheckpoints<span class=\"token punctuation\">[</span>srcRep<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token builtin\">uint96</span> srcRepOld <span class=\"token operator\">=</span> srcRepNum <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> checkpoints<span class=\"token punctuation\">[</span>srcRep<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>srcRepNum <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>votes <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token builtin\">uint96</span> srcRepNew <span class=\"token operator\">=</span> <span class=\"token function\">sub96</span><span class=\"token punctuation\">(</span>srcRepOld<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::_moveVotes: vote amount underflows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">_writeCheckpoint</span><span class=\"token punctuation\">(</span>srcRep<span class=\"token punctuation\">,</span> srcRepNum<span class=\"token punctuation\">,</span> srcRepOld<span class=\"token punctuation\">,</span> srcRepNew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dstRep <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token builtin\">uint32</span> dstRepNum <span class=\"token operator\">=</span> numCheckpoints<span class=\"token punctuation\">[</span>dstRep<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token builtin\">uint96</span> dstRepOld <span class=\"token operator\">=</span> dstRepNum <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> checkpoints<span class=\"token punctuation\">[</span>dstRep<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>dstRepNum <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>votes <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token builtin\">uint96</span> dstRepNew <span class=\"token operator\">=</span> <span class=\"token function\">add96</span><span class=\"token punctuation\">(</span>dstRepOld<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::_moveVotes: vote amount overflows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">_writeCheckpoint</span><span class=\"token punctuation\">(</span>dstRep<span class=\"token punctuation\">,</span> dstRepNum<span class=\"token punctuation\">,</span> dstRepOld<span class=\"token punctuation\">,</span> dstRepNew<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_writeCheckpoint</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> delegatee<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint32</span> nCheckpoints<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint96</span> oldVotes<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint96</span> newVotes<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">uint32</span> blockNumber <span class=\"token operator\">=</span> <span class=\"token function\">safe32</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::_writeCheckpoint: block number exceeds 32 bits\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nCheckpoints <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> checkpoints<span class=\"token punctuation\">[</span>delegatee<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nCheckpoints <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fromBlock <span class=\"token operator\">==</span> blockNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      checkpoints<span class=\"token punctuation\">[</span>delegatee<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nCheckpoints <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>votes <span class=\"token operator\">=</span> newVotes<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      checkpoints<span class=\"token punctuation\">[</span>delegatee<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nCheckpoints<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">Checkpoint</span><span class=\"token punctuation\">(</span>blockNumber<span class=\"token punctuation\">,</span> newVotes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      numCheckpoints<span class=\"token punctuation\">[</span>delegatee<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nCheckpoints <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">emit</span> <span class=\"token function\">DelegateVotesChanged</span><span class=\"token punctuation\">(</span>delegatee<span class=\"token punctuation\">,</span> oldVotes<span class=\"token punctuation\">,</span> newVotes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>转账是时会调用到 moveDelegates函数，同时调用writeCheckpoint函数更新票数。该部分函数实现了将投票权进行委托。被委托人的投票权就是自己的COPMP+被委托给的COMP</p>\n<p>判断是否在同一block，在则直接加，不在则将长度加一，对应最新的block存储新的数据</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">getPriorVotes</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> blockNumber<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint96</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>blockNumber <span class=\"token operator\">&lt;</span> block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Comp::getPriorVotes: not yet determined\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">uint32</span> nCheckpoints <span class=\"token operator\">=</span> numCheckpoints<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nCheckpoints <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// First check most recent balance</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>checkpoints<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nCheckpoints <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fromBlock <span class=\"token operator\">&lt;=</span> blockNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> checkpoints<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nCheckpoints <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>votes<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// Next check implicit zero balance</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>checkpoints<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>fromBlock <span class=\"token operator\">></span> blockNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token builtin\">uint32</span> lower <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint32</span> upper <span class=\"token operator\">=</span> nCheckpoints <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>upper <span class=\"token operator\">></span> lower<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint32</span> center <span class=\"token operator\">=</span> upper <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>upper <span class=\"token operator\">-</span> lower<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ceil, avoiding overflow</span>\n        Checkpoint <span class=\"token keyword\">memory</span> cp <span class=\"token operator\">=</span> checkpoints<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>center<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">.</span>fromBlock <span class=\"token operator\">==</span> blockNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> cp<span class=\"token punctuation\">.</span>votes<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">.</span>fromBlock <span class=\"token operator\">&lt;</span> blockNumber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            lower <span class=\"token operator\">=</span> center<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            upper <span class=\"token operator\">=</span> center <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> checkpoints<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>lower<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>votes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>为了获得某个区块号下的投票权，我们可以调用getPriorVotes来检索该值。调用时会判断fromblock所搜索的blocknumber进行比较，所以只对于过去的block适用</p>\n<h1 id=\"Governance-Alpha\"><a href=\"#Governance-Alpha\" class=\"headerlink\" title=\"Governance Alpha\"></a>Governance Alpha</h1><h2 id=\"Code-1\"><a href=\"#Code-1\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: BSD-3-Clause</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">GovernorAlpha</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/// @notice The name of this contract</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Compound Governor Alpha\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">quorumVotes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">400000e18</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 400,000 = 4% of Comp</span>\n\n    <span class=\"token comment\">/// @notice The number of votes required in order for a voter to become a proposer</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">proposalThreshold</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">100000e18</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 100,000 = 1% of Comp</span>\n\n    <span class=\"token comment\">/// @notice The maximum number of actions that can be included in a proposal</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">proposalMaxOperations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 10 actions</span>\n\n    <span class=\"token comment\">/// @notice The delay before voting on a proposal may take place, once proposed</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">votingDelay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 1 block</span>\n\n    <span class=\"token comment\">/// @notice The duration of voting on a proposal, in blocks</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">votingPeriod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> virtual <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">17280</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// ~3 days in blocks (assuming 15s blocks)</span>\n\n    <span class=\"token comment\">/// @notice The address of the Compound Protocol Timelock</span>\n    TimelockInterface <span class=\"token keyword\">public</span> timelock<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice The address of the Compound governance token</span>\n    CompInterface <span class=\"token keyword\">public</span> comp<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice The address of the Governor Guardian</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> guardian<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice The total number of proposals</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> proposalCount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Proposal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">/// @notice Unique id for looking up a proposal</span>\n        <span class=\"token builtin\">uint</span> id<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice Creator of the proposal</span>\n        <span class=\"token builtin\">address</span> proposer<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds</span>\n        <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice the ordered list of target addresses for calls to be made</span>\n        <span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> targets<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made</span>\n        <span class=\"token builtin\">uint</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice The ordered list of function signatures to be called</span>\n        <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> signatures<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice The ordered list of calldata to be passed to each call</span>\n        <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> calldatas<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice The block at which voting begins: holders must delegate their votes prior to this block</span>\n        <span class=\"token builtin\">uint</span> startBlock<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice The block at which voting ends: votes must be cast prior to this block</span>\n        <span class=\"token builtin\">uint</span> endBlock<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice Current number of votes in favor of this proposal</span>\n        <span class=\"token builtin\">uint</span> forVotes<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice Current number of votes in opposition to this proposal</span>\n        <span class=\"token builtin\">uint</span> againstVotes<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice Flag marking whether the proposal has been canceled</span>\n        <span class=\"token builtin\">bool</span> canceled<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice Flag marking whether the proposal has been executed</span>\n        <span class=\"token builtin\">bool</span> executed<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice Receipts of ballots for the entire set of voters</span>\n        <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> Receipt<span class=\"token punctuation\">)</span> receipts<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/// @notice Ballot receipt record for a voter</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Receipt</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">/// @notice Whether or not a vote has been cast</span>\n        <span class=\"token builtin\">bool</span> hasVoted<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice Whether or not the voter supports the proposal</span>\n        <span class=\"token builtin\">bool</span> support<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/// @notice The number of votes the voter had, which were cast</span>\n        <span class=\"token builtin\">uint96</span> votes<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/// @notice Possible states that a proposal may be in</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ProposalState</span> <span class=\"token punctuation\">&#123;</span>\n        Pending<span class=\"token punctuation\">,</span>\n        Active<span class=\"token punctuation\">,</span>\n        Canceled<span class=\"token punctuation\">,</span>\n        Defeated<span class=\"token punctuation\">,</span>\n        Succeeded<span class=\"token punctuation\">,</span>\n        Queued<span class=\"token punctuation\">,</span>\n        Expired<span class=\"token punctuation\">,</span>\n        Executed\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/// @notice The official record of all proposals ever proposed</span>\n    <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> <span class=\"token operator\">=></span> Proposal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> proposals<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice The latest proposal for each proposer</span>\n    <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> latestProposalIds<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice The EIP-712 typehash for the contract's domain</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> DOMAIN_TYPEHASH <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice The EIP-712 typehash for the ballot struct used by the contract</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> BALLOT_TYPEHASH <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ballot(uint256 proposalId,bool support)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice An event emitted when a new proposal is created</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">ProposalCreated</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> id<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> proposer<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> targets<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> signatures<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> calldatas<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> startBlock<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> endBlock<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice An event emitted when a vote has been cast on a proposal</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">VoteCast</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> voter<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span> support<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> votes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice An event emitted when a proposal has been canceled</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">ProposalCanceled</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice An event emitted when a proposal has been queued in the Timelock</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">ProposalQueued</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> id<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice An event emitted when a proposal has been executed in the Timelock</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">ProposalExecuted</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> timelock_<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> comp_<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> guardian_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        timelock <span class=\"token operator\">=</span> <span class=\"token function\">TimelockInterface</span><span class=\"token punctuation\">(</span>timelock_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        comp <span class=\"token operator\">=</span> <span class=\"token function\">CompInterface</span><span class=\"token punctuation\">(</span>comp_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        guardian <span class=\"token operator\">=</span> guardian_<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">propose</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> targets<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> values<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> signatures<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> calldatas<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> description<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">.</span><span class=\"token function\">getPriorVotes</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> <span class=\"token function\">sub256</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">proposalThreshold</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::propose: proposer votes below proposal threshold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> signatures<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> calldatas<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::propose: proposal function information arity mismatch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::propose: must provide actions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token function\">proposalMaxOperations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::propose: too many actions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">uint</span> latestProposalId <span class=\"token operator\">=</span> latestProposalIds<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>latestProposalId <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          ProposalState proposersLatestProposalState <span class=\"token operator\">=</span> <span class=\"token function\">state</span><span class=\"token punctuation\">(</span>latestProposalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>proposersLatestProposalState <span class=\"token operator\">!=</span> ProposalState<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>proposersLatestProposalState <span class=\"token operator\">!=</span> ProposalState<span class=\"token punctuation\">.</span>Pending<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token builtin\">uint</span> startBlock <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> <span class=\"token function\">votingDelay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint</span> endBlock <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>startBlock<span class=\"token punctuation\">,</span> <span class=\"token function\">votingPeriod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        proposalCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint</span> proposalId <span class=\"token operator\">=</span> proposalCount<span class=\"token punctuation\">;</span>\n        Proposal <span class=\"token keyword\">storage</span> newProposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// This should never happen but add a check in case.</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>newProposal<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::propose: ProposalID collsion\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newProposal<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> proposalId<span class=\"token punctuation\">;</span>\n        newProposal<span class=\"token punctuation\">.</span>proposer <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n        newProposal<span class=\"token punctuation\">.</span>eta <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        newProposal<span class=\"token punctuation\">.</span>targets <span class=\"token operator\">=</span> targets<span class=\"token punctuation\">;</span>\n        newProposal<span class=\"token punctuation\">.</span>values <span class=\"token operator\">=</span> values<span class=\"token punctuation\">;</span>\n        newProposal<span class=\"token punctuation\">.</span>signatures <span class=\"token operator\">=</span> signatures<span class=\"token punctuation\">;</span>\n        newProposal<span class=\"token punctuation\">.</span>calldatas <span class=\"token operator\">=</span> calldatas<span class=\"token punctuation\">;</span>\n        newProposal<span class=\"token punctuation\">.</span>startBlock <span class=\"token operator\">=</span> startBlock<span class=\"token punctuation\">;</span>\n        newProposal<span class=\"token punctuation\">.</span>endBlock <span class=\"token operator\">=</span> endBlock<span class=\"token punctuation\">;</span>\n        newProposal<span class=\"token punctuation\">.</span>forVotes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        newProposal<span class=\"token punctuation\">.</span>againstVotes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        newProposal<span class=\"token punctuation\">.</span>canceled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        newProposal<span class=\"token punctuation\">.</span>executed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        latestProposalIds<span class=\"token punctuation\">[</span>newProposal<span class=\"token punctuation\">.</span>proposer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newProposal<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">ProposalCreated</span><span class=\"token punctuation\">(</span>newProposal<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> targets<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> signatures<span class=\"token punctuation\">,</span> calldatas<span class=\"token punctuation\">,</span> startBlock<span class=\"token punctuation\">,</span> endBlock<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> newProposal<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">queue</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ProposalState<span class=\"token punctuation\">.</span>Succeeded<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::queue: proposal can only be queued if it is succeeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Proposal <span class=\"token keyword\">storage</span> proposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint</span> eta <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">,</span> timelock<span class=\"token punctuation\">.</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">_queueOrRevert</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>signatures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>calldatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        proposal<span class=\"token punctuation\">.</span>eta <span class=\"token operator\">=</span> eta<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">ProposalQueued</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_queueOrRevert</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> signature<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timelock<span class=\"token punctuation\">.</span><span class=\"token function\">queuedTransactions</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        timelock<span class=\"token punctuation\">.</span><span class=\"token function\">queueTransaction</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ProposalState<span class=\"token punctuation\">.</span>Queued<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::execute: proposal can only be executed if it is queued\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Proposal <span class=\"token keyword\">storage</span> proposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        proposal<span class=\"token punctuation\">.</span>executed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            timelock<span class=\"token punctuation\">.</span>executeTransaction<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">:</span> proposal<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>signatures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>calldatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">ProposalExecuted</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        ProposalState state <span class=\"token operator\">=</span> <span class=\"token function\">state</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">!=</span> ProposalState<span class=\"token punctuation\">.</span>Executed<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::cancel: cannot cancel executed proposal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Proposal <span class=\"token keyword\">storage</span> proposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> guardian <span class=\"token operator\">||</span> comp<span class=\"token punctuation\">.</span><span class=\"token function\">getPriorVotes</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>proposer<span class=\"token punctuation\">,</span> <span class=\"token function\">sub256</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">proposalThreshold</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::cancel: proposer above threshold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        proposal<span class=\"token punctuation\">.</span>canceled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            timelock<span class=\"token punctuation\">.</span><span class=\"token function\">cancelTransaction</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>signatures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>calldatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">ProposalCanceled</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getActions</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> targets<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> values<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> signatures<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> calldatas<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        Proposal <span class=\"token keyword\">storage</span> p <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>signatures<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>calldatas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getReceipt</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> voter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span>Receipt <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>receipts<span class=\"token punctuation\">[</span>voter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span>ProposalState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>proposalCount <span class=\"token operator\">>=</span> proposalId <span class=\"token operator\">&amp;&amp;</span> proposalId <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::state: invalid proposal id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Proposal <span class=\"token keyword\">storage</span> proposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>canceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Canceled<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number <span class=\"token operator\">&lt;=</span> proposal<span class=\"token punctuation\">.</span>startBlock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Pending<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number <span class=\"token operator\">&lt;=</span> proposal<span class=\"token punctuation\">.</span>endBlock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>forVotes <span class=\"token operator\">&lt;=</span> proposal<span class=\"token punctuation\">.</span>againstVotes <span class=\"token operator\">||</span> proposal<span class=\"token punctuation\">.</span>forVotes <span class=\"token operator\">&lt;</span> <span class=\"token function\">quorumVotes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Defeated<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>eta <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Succeeded<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>executed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Executed<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">>=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>eta<span class=\"token punctuation\">,</span> timelock<span class=\"token punctuation\">.</span><span class=\"token function\">GRACE_PERIOD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Expired<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Queued<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">castVote</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span> support<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">_castVote</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">castVoteBySig</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span> support<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">bytes32</span> domainSeparator <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>DOMAIN_TYPEHASH<span class=\"token punctuation\">,</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getChainId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes32</span> structHash <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>BALLOT_TYPEHASH<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes32</span> digest <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x19\\x01\"</span><span class=\"token punctuation\">,</span> domainSeparator<span class=\"token punctuation\">,</span> structHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">address</span> signatory <span class=\"token operator\">=</span> <span class=\"token function\">ecrecover</span><span class=\"token punctuation\">(</span>digest<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>signatory <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::castVoteBySig: invalid signature\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">_castVote</span><span class=\"token punctuation\">(</span>signatory<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_castVote</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> voter<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span> support<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ProposalState<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::_castVote: voting is closed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Proposal <span class=\"token keyword\">storage</span> proposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        Receipt <span class=\"token keyword\">storage</span> receipt <span class=\"token operator\">=</span> proposal<span class=\"token punctuation\">.</span>receipts<span class=\"token punctuation\">[</span>voter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>receipt<span class=\"token punctuation\">.</span>hasVoted <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::_castVote: voter already voted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint96</span> votes <span class=\"token operator\">=</span> comp<span class=\"token punctuation\">.</span><span class=\"token function\">getPriorVotes</span><span class=\"token punctuation\">(</span>voter<span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>startBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>support<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            proposal<span class=\"token punctuation\">.</span>forVotes <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>forVotes<span class=\"token punctuation\">,</span> votes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            proposal<span class=\"token punctuation\">.</span>againstVotes <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>againstVotes<span class=\"token punctuation\">,</span> votes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        receipt<span class=\"token punctuation\">.</span>hasVoted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        receipt<span class=\"token punctuation\">.</span>support <span class=\"token operator\">=</span> support<span class=\"token punctuation\">;</span>\n        receipt<span class=\"token punctuation\">.</span>votes <span class=\"token operator\">=</span> votes<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">VoteCast</span><span class=\"token punctuation\">(</span>voter<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">,</span> votes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__acceptAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> guardian<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::__acceptAdmin: sender must be gov guardian\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        timelock<span class=\"token punctuation\">.</span><span class=\"token function\">acceptAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__abdicate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> guardian<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::__abdicate: sender must be gov guardian\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        guardian <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__queueSetTimelockPendingAdmin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> newPendingAdmin<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> guardian<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::__queueSetTimelockPendingAdmin: sender must be gov guardian\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        timelock<span class=\"token punctuation\">.</span><span class=\"token function\">queueTransaction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>timelock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"setPendingAdmin(address)\"</span><span class=\"token punctuation\">,</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>newPendingAdmin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__executeSetTimelockPendingAdmin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> newPendingAdmin<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> guardian<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::__executeSetTimelockPendingAdmin: sender must be gov guardian\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        timelock<span class=\"token punctuation\">.</span><span class=\"token function\">executeTransaction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>timelock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"setPendingAdmin(address)\"</span><span class=\"token punctuation\">,</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>newPendingAdmin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"addition overflow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sub256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"subtraction underflow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getChainId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint</span> chainId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span> chainId <span class=\"token operator\">:=</span> <span class=\"token function\">chainid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> chainId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimelockInterface</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">GRACE_PERIOD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">acceptAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">queuedTransactions</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> hash<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">queueTransaction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">calldata</span> signature<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">calldata</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">cancelTransaction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">calldata</span> signature<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">calldata</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">executeTransaction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">calldata</span> signature<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">calldata</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CompInterface</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getPriorVotes</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> blockNumber<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint96</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyze-1\"><a href=\"#Analyze-1\" class=\"headerlink\" title=\"Analyze\"></a>Analyze</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">propose</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> targets<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> values<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> signatures<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> calldatas<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> description<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">.</span><span class=\"token function\">getPriorVotes</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> <span class=\"token function\">sub256</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token function\">proposalThreshold</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::propose: proposer votes below proposal threshold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> signatures<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> calldatas<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::propose: proposal function information arity mismatch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::propose: must provide actions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token function\">proposalMaxOperations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::propose: too many actions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">uint</span> latestProposalId <span class=\"token operator\">=</span> latestProposalIds<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>latestProposalId <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      ProposalState proposersLatestProposalState <span class=\"token operator\">=</span> <span class=\"token function\">state</span><span class=\"token punctuation\">(</span>latestProposalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>proposersLatestProposalState <span class=\"token operator\">!=</span> ProposalState<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>proposersLatestProposalState <span class=\"token operator\">!=</span> ProposalState<span class=\"token punctuation\">.</span>Pending<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token builtin\">uint</span> startBlock <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> <span class=\"token function\">votingDelay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint</span> endBlock <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>startBlock<span class=\"token punctuation\">,</span> <span class=\"token function\">votingPeriod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    proposalCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint</span> proposalId <span class=\"token operator\">=</span> proposalCount<span class=\"token punctuation\">;</span>\n    Proposal <span class=\"token keyword\">storage</span> newProposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// This should never happen but add a check in case.</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>newProposal<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::propose: ProposalID collsion\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    newProposal<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> proposalId<span class=\"token punctuation\">;</span>\n    newProposal<span class=\"token punctuation\">.</span>proposer <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    newProposal<span class=\"token punctuation\">.</span>eta <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    newProposal<span class=\"token punctuation\">.</span>targets <span class=\"token operator\">=</span> targets<span class=\"token punctuation\">;</span>\n    newProposal<span class=\"token punctuation\">.</span>values <span class=\"token operator\">=</span> values<span class=\"token punctuation\">;</span>\n    newProposal<span class=\"token punctuation\">.</span>signatures <span class=\"token operator\">=</span> signatures<span class=\"token punctuation\">;</span>\n    newProposal<span class=\"token punctuation\">.</span>calldatas <span class=\"token operator\">=</span> calldatas<span class=\"token punctuation\">;</span>\n    newProposal<span class=\"token punctuation\">.</span>startBlock <span class=\"token operator\">=</span> startBlock<span class=\"token punctuation\">;</span>\n    newProposal<span class=\"token punctuation\">.</span>endBlock <span class=\"token operator\">=</span> endBlock<span class=\"token punctuation\">;</span>\n    newProposal<span class=\"token punctuation\">.</span>forVotes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    newProposal<span class=\"token punctuation\">.</span>againstVotes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    newProposal<span class=\"token punctuation\">.</span>canceled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    newProposal<span class=\"token punctuation\">.</span>executed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    latestProposalIds<span class=\"token punctuation\">[</span>newProposal<span class=\"token punctuation\">.</span>proposer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newProposal<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">ProposalCreated</span><span class=\"token punctuation\">(</span>newProposal<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> targets<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> signatures<span class=\"token punctuation\">,</span> calldatas<span class=\"token punctuation\">,</span> startBlock<span class=\"token punctuation\">,</span> endBlock<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> newProposal<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>创建提案有所限制，需要提案人再上一个块的票数大于提案门槛。紧接着判断target，value，signature以及calldata长度对应相等，检测对应的action不为0也不大与最大值10</p>\n<p>如果创建该提案者不止有这一个提案，则判断上一个提案是否处于active或pending状态下，必须满足只有一个提案处于active或pending的状态</p>\n<p>创建时需要提供执行时需要的target，value，函数的signuture以及calldata（或纯calldata）</p>\n<p>计算开始和结束的block，最后更新提案到Proposal映射中去，同时更新最新的提案id为当前的提案id</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    ProposalState state <span class=\"token operator\">=</span> <span class=\"token function\">state</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">!=</span> ProposalState<span class=\"token punctuation\">.</span>Executed<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::cancel: cannot cancel executed proposal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Proposal <span class=\"token keyword\">storage</span> proposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> guardian <span class=\"token operator\">||</span> comp<span class=\"token punctuation\">.</span><span class=\"token function\">getPriorVotes</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>proposer<span class=\"token punctuation\">,</span> <span class=\"token function\">sub256</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">proposalThreshold</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::cancel: proposer above threshold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    proposal<span class=\"token punctuation\">.</span>canceled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        timelock<span class=\"token punctuation\">.</span><span class=\"token function\">cancelTransaction</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>signatures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>calldatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">ProposalCanceled</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>结束一个提案，首先判断是否已执行，不能结束一个已执行的提案，只有满足guardian执行操作或者满足proposer再上一个块的票数低于提案门槛的情况下才可以结束一个提案</p>\n<p>将对应提案的canceled变量设置为true，同时取消对需要执行的操作标记，将timelock.queuedTransactions(keccak256(abi.encode(target, value, signature, data, eta))重新更改为false</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">castVote</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span> support<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_castVote</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">castVoteBySig</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span> support<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">bytes32</span> domainSeparator <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>DOMAIN_TYPEHASH<span class=\"token punctuation\">,</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getChainId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bytes32</span> structHash <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>BALLOT_TYPEHASH<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bytes32</span> digest <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x19\\x01\"</span><span class=\"token punctuation\">,</span> domainSeparator<span class=\"token punctuation\">,</span> structHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> signatory <span class=\"token operator\">=</span> <span class=\"token function\">ecrecover</span><span class=\"token punctuation\">(</span>digest<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>signatory <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::castVoteBySig: invalid signature\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">_castVote</span><span class=\"token punctuation\">(</span>signatory<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">_castVote</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> voter<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span> support<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ProposalState<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::_castVote: voting is closed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Proposal <span class=\"token keyword\">storage</span> proposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    Receipt <span class=\"token keyword\">storage</span> receipt <span class=\"token operator\">=</span> proposal<span class=\"token punctuation\">.</span>receipts<span class=\"token punctuation\">[</span>voter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>receipt<span class=\"token punctuation\">.</span>hasVoted <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::_castVote: voter already voted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint96</span> votes <span class=\"token operator\">=</span> comp<span class=\"token punctuation\">.</span><span class=\"token function\">getPriorVotes</span><span class=\"token punctuation\">(</span>voter<span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>startBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>support<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        proposal<span class=\"token punctuation\">.</span>forVotes <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>forVotes<span class=\"token punctuation\">,</span> votes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        proposal<span class=\"token punctuation\">.</span>againstVotes <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>againstVotes<span class=\"token punctuation\">,</span> votes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    receipt<span class=\"token punctuation\">.</span>hasVoted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    receipt<span class=\"token punctuation\">.</span>support <span class=\"token operator\">=</span> support<span class=\"token punctuation\">;</span>\n    receipt<span class=\"token punctuation\">.</span>votes <span class=\"token operator\">=</span> votes<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">VoteCast</span><span class=\"token punctuation\">(</span>voter<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">,</span> votes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>三个投票函数，核心函数为_castVote，三个参数分别为投票者，投票的提案编号以及支持与否</p>\n<p>首先判断所投提案是否是active，必须在active情况下可以进行投票，再判断当前投票者是否已经对此提案进行过投票，要求没有进行过投票</p>\n<p>投票是任何人均可投票，前提是有票（这里对应到compound token合约）票数是取决于上一个区块时对应的vote而不是当前区块，对应支持与否将所对应的票数进行加减，同时记录投票者的投票数据</p>\n<p>castVoteBySig使用了签名的方法，其余相同</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">queue</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ProposalState<span class=\"token punctuation\">.</span>Succeeded<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::queue: proposal can only be queued if it is succeeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Proposal <span class=\"token keyword\">storage</span> proposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint</span> eta <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">,</span> timelock<span class=\"token punctuation\">.</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_queueOrRevert</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>signatures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>calldatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    proposal<span class=\"token punctuation\">.</span>eta <span class=\"token operator\">=</span> eta<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">ProposalQueued</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>此函数将提案加入排队，先判断提案是否成功，成功的投票才可以加入队列，支持票大于反对票并且支持票大于4%comp发行量</p>\n<p>再通过调用_queueOrRevert函数判断已经进入队列的提案是否含有相同操作的交易，如果不存在则将对应交易进行标记记录，避免队列中含有相同的交易</p>\n<p>同时更新eta，即提案开始执行的时间</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ProposalState<span class=\"token punctuation\">.</span>Queued<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorAlpha::execute: proposal can only be executed if it is queued\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Proposal <span class=\"token keyword\">storage</span> proposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    proposal<span class=\"token punctuation\">.</span>executed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        timelock<span class=\"token punctuation\">.</span>executeTransaction<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">:</span> proposal<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>signatures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>calldatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">ProposalExecuted</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>该函数用于执行（投票后不立刻执行，而是需要有人进行操作），提案有一定公示期，在此期间可以取消（Timelock. Delay()），先判断提案是否已经处于队列中，满足要求则更新对应变量，调用timelock合约下的executeTransaction函数依次执行操作</p>\n<p>剩下一些get函数，运算函数以及变量修改函数比较简单，这里就不再做过多解释了</p>\n<h1 id=\"Timelock\"><a href=\"#Timelock\" class=\"headerlink\" title=\"Timelock\"></a>Timelock</h1><h2 id=\"Code-2\"><a href=\"#Code-2\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: BSD-3-Clause</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./SafeMath.sol\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Timelock</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\">SafeMath</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">event</span> <span class=\"token function\">NewAdmin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> newAdmin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">NewPendingAdmin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> newPendingAdmin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">NewDelay</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> <span class=\"token keyword\">indexed</span> newDelay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">CancelTransaction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">indexed</span> txHash<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> signature<span class=\"token punctuation\">,</span>  <span class=\"token builtin\">bytes</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">ExecuteTransaction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">indexed</span> txHash<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> signature<span class=\"token punctuation\">,</span>  <span class=\"token builtin\">bytes</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">QueueTransaction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">indexed</span> txHash<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> signature<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> GRACE_PERIOD <span class=\"token operator\">=</span> <span class=\"token number\">14</span> days<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> MINIMUM_DELAY <span class=\"token operator\">=</span> <span class=\"token number\">2</span> days<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> MAXIMUM_DELAY <span class=\"token operator\">=</span> <span class=\"token number\">30</span> days<span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> admin<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> pendingAdmin<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> delay<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">mapping</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> queuedTransactions<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> admin_<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> delay_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>delay_ <span class=\"token operator\">>=</span> MINIMUM_DELAY<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::constructor: Delay must exceed minimum delay.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>delay_ <span class=\"token operator\">&lt;=</span> MAXIMUM_DELAY<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::setDelay: Delay must not exceed maximum delay.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        admin <span class=\"token operator\">=</span> admin_<span class=\"token punctuation\">;</span>\n        delay <span class=\"token operator\">=</span> delay_<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setDelay</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> delay_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::setDelay: Call must come from Timelock.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>delay_ <span class=\"token operator\">>=</span> MINIMUM_DELAY<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::setDelay: Delay must exceed minimum delay.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>delay_ <span class=\"token operator\">&lt;=</span> MAXIMUM_DELAY<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::setDelay: Delay must not exceed maximum delay.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        delay <span class=\"token operator\">=</span> delay_<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">NewDelay</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">acceptAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> pendingAdmin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::acceptAdmin: Call must come from pendingAdmin.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        admin <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n        pendingAdmin <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">NewAdmin</span><span class=\"token punctuation\">(</span>admin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setPendingAdmin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> pendingAdmin_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::setPendingAdmin: Call must come from Timelock.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pendingAdmin <span class=\"token operator\">=</span> pendingAdmin_<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">NewPendingAdmin</span><span class=\"token punctuation\">(</span>pendingAdmin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">queueTransaction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> signature<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> admin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::queueTransaction: Call must come from admin.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>eta <span class=\"token operator\">>=</span> <span class=\"token function\">getBlockTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::queueTransaction: Estimated execution block must satisfy delay.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes32</span> txHash <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queuedTransactions<span class=\"token punctuation\">[</span>txHash<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">QueueTransaction</span><span class=\"token punctuation\">(</span>txHash<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> txHash<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">cancelTransaction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> signature<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> admin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::cancelTransaction: Call must come from admin.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes32</span> txHash <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queuedTransactions<span class=\"token punctuation\">[</span>txHash<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">CancelTransaction</span><span class=\"token punctuation\">(</span>txHash<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">executeTransaction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> signature<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> admin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::executeTransaction: Call must come from admin.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes32</span> txHash <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>queuedTransactions<span class=\"token punctuation\">[</span>txHash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::executeTransaction: Transaction hasn't been queued.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">getBlockTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> eta<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">getBlockTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> eta<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>GRACE_PERIOD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::executeTransaction: Transaction is stale.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        queuedTransactions<span class=\"token punctuation\">[</span>txHash<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> callData<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            callData <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            callData <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes4</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// solium-disable-next-line security/no-call-value</span>\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> returnData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>callData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::executeTransaction: Transaction execution reverted.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">ExecuteTransaction</span><span class=\"token punctuation\">(</span>txHash<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> returnData<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getBlockTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// solium-disable-next-line security/no-block-members</span>\n        <span class=\"token keyword\">return</span> block<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyze-2\"><a href=\"#Analyze-2\" class=\"headerlink\" title=\"Analyze\"></a>Analyze</h2><p>配合Governance Alpha合约，进行排队操作，取消操作，执行操作等功能</p>\n<p>其中delay为执行时间的限制</p>\n<p>代码如下，比较简单，不再过多解释</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">queueTransaction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> signature<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> admin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::queueTransaction: Call must come from admin.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>eta <span class=\"token operator\">>=</span> <span class=\"token function\">getBlockTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::queueTransaction: Estimated execution block must satisfy delay.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">bytes32</span> txHash <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    queuedTransactions<span class=\"token punctuation\">[</span>txHash<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">QueueTransaction</span><span class=\"token punctuation\">(</span>txHash<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> txHash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">cancelTransaction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> signature<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> admin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::cancelTransaction: Call must come from admin.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">bytes32</span> txHash <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    queuedTransactions<span class=\"token punctuation\">[</span>txHash<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">CancelTransaction</span><span class=\"token punctuation\">(</span>txHash<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">executeTransaction</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> signature<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> admin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::executeTransaction: Call must come from admin.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">bytes32</span> txHash <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>queuedTransactions<span class=\"token punctuation\">[</span>txHash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::executeTransaction: Transaction hasn't been queued.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">getBlockTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> eta<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">getBlockTimestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> eta<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>GRACE_PERIOD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::executeTransaction: Transaction is stale.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    queuedTransactions<span class=\"token punctuation\">[</span>txHash<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> callData<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        callData <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        callData <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes4</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>signature<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// solium-disable-next-line security/no-call-value</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> returnData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span>callData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Timelock::executeTransaction: Transaction execution reverted.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">ExecuteTransaction</span><span class=\"token punctuation\">(</span>txHash<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> returnData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"GovernorBravo-sol\"><a href=\"#GovernorBravo-sol\" class=\"headerlink\" title=\"GovernorBravo.sol\"></a><strong>GovernorBravo.sol</strong></h1><h2 id=\"Code-3\"><a href=\"#Code-3\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.5.16</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">pragma</span> experimental ABIEncoderV2<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./GovernorBravoInterfaces.sol\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">GovernorBravoDelegate</span> <span class=\"token keyword\">is</span> GovernorBravoDelegateStorageV1<span class=\"token punctuation\">,</span> GovernorBravoEvents <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">/// @notice The name of this contract</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Compound Governor Bravo\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice The minimum setable proposal threshold</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> MIN_PROPOSAL_THRESHOLD <span class=\"token operator\">=</span> <span class=\"token number\">50000e18</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 50,000 Comp</span>\n\n    <span class=\"token comment\">/// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">quorumVotes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">400000e18</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 400,000 = 4% of Comp</span>\n\n    <span class=\"token comment\">/// @notice The maximum number of actions that can be included in a proposal</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">proposalMaxOperations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 10 actions</span>\n\n    <span class=\"token comment\">/// @notice The EIP-712 typehash for the contract's domain</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> DOMAIN_TYPEHASH <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// @notice The EIP-712 typehash for the ballot struct used by the contract</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> BALLOT_TYPEHASH <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ballot(uint256 proposalId,uint8 support)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> timelock_<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> comp_<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> votingPeriod_<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> votingDelay_<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> proposalThreshold_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> admin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::initialize: admin only\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        timelock <span class=\"token operator\">=</span> <span class=\"token function\">TimelockInterface</span><span class=\"token punctuation\">(</span>timelock_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        comp <span class=\"token operator\">=</span> <span class=\"token function\">CompInterface</span><span class=\"token punctuation\">(</span>comp_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        votingPeriod <span class=\"token operator\">=</span> votingPeriod_<span class=\"token punctuation\">;</span>\n        votingDelay <span class=\"token operator\">=</span> votingDelay_<span class=\"token punctuation\">;</span>\n        proposalThreshold <span class=\"token operator\">=</span> proposalThreshold_<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">propose</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> targets<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> values<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> signatures<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> calldatas<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> description<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Reject proposals before initiating as Governor</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>initialProposalId <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::propose: Governor Bravo not active\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>comp<span class=\"token punctuation\">.</span><span class=\"token function\">getPriorVotes</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> <span class=\"token function\">sub256</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> proposalThreshold<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::propose: proposer votes below proposal threshold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> signatures<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> calldatas<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::propose: proposal function information arity mismatch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::propose: must provide actions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>targets<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token function\">proposalMaxOperations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::propose: too many actions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">uint</span> latestProposalId <span class=\"token operator\">=</span> latestProposalIds<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>latestProposalId <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          ProposalState proposersLatestProposalState <span class=\"token operator\">=</span> <span class=\"token function\">state</span><span class=\"token punctuation\">(</span>latestProposalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>proposersLatestProposalState <span class=\"token operator\">!=</span> ProposalState<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::propose: one live proposal per proposer, found an already active proposal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>proposersLatestProposalState <span class=\"token operator\">!=</span> ProposalState<span class=\"token punctuation\">.</span>Pending<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::propose: one live proposal per proposer, found an already pending proposal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token builtin\">uint</span> startBlock <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> votingDelay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint</span> endBlock <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>startBlock<span class=\"token punctuation\">,</span> votingPeriod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        proposalCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        Proposal <span class=\"token keyword\">memory</span> newProposal <span class=\"token operator\">=</span> <span class=\"token function\">Proposal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            id<span class=\"token punctuation\">:</span> proposalCount<span class=\"token punctuation\">,</span>\n            proposer<span class=\"token punctuation\">:</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span>\n            eta<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            targets<span class=\"token punctuation\">:</span> targets<span class=\"token punctuation\">,</span>\n            values<span class=\"token punctuation\">:</span> values<span class=\"token punctuation\">,</span>\n            signatures<span class=\"token punctuation\">:</span> signatures<span class=\"token punctuation\">,</span>\n            calldatas<span class=\"token punctuation\">:</span> calldatas<span class=\"token punctuation\">,</span>\n            startBlock<span class=\"token punctuation\">:</span> startBlock<span class=\"token punctuation\">,</span>\n            endBlock<span class=\"token punctuation\">:</span> endBlock<span class=\"token punctuation\">,</span>\n            forVotes<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            againstVotes<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            abstainVotes<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            canceled<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            executed<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        proposals<span class=\"token punctuation\">[</span>newProposal<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newProposal<span class=\"token punctuation\">;</span>\n        latestProposalIds<span class=\"token punctuation\">[</span>newProposal<span class=\"token punctuation\">.</span>proposer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newProposal<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">ProposalCreated</span><span class=\"token punctuation\">(</span>newProposal<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> targets<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">,</span> signatures<span class=\"token punctuation\">,</span> calldatas<span class=\"token punctuation\">,</span> startBlock<span class=\"token punctuation\">,</span> endBlock<span class=\"token punctuation\">,</span> description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> newProposal<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">queue</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ProposalState<span class=\"token punctuation\">.</span>Succeeded<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::queue: proposal can only be queued if it is succeeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Proposal <span class=\"token keyword\">storage</span> proposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint</span> eta <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">,</span> timelock<span class=\"token punctuation\">.</span><span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">_queueOrRevert</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>signatures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>calldatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        proposal<span class=\"token punctuation\">.</span>eta <span class=\"token operator\">=</span> eta<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">ProposalQueued</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_queueOrRevert</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> signature<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> eta<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timelock<span class=\"token punctuation\">.</span><span class=\"token function\">queuedTransactions</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::_queueOrRevert: proposal action already queued at eta\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        timelock<span class=\"token punctuation\">.</span><span class=\"token function\">queueTransaction</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ProposalState<span class=\"token punctuation\">.</span>Queued<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::execute: proposal can only be executed if it is queued\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Proposal <span class=\"token keyword\">storage</span> proposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        proposal<span class=\"token punctuation\">.</span>executed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            timelock<span class=\"token punctuation\">.</span>executeTransaction<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>signatures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>calldatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">ProposalExecuted</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        ProposalState state <span class=\"token operator\">=</span> <span class=\"token function\">state</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">!=</span> ProposalState<span class=\"token punctuation\">.</span>Executed<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::cancel: cannot cancel executed proposal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Proposal <span class=\"token keyword\">storage</span> proposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> proposal<span class=\"token punctuation\">.</span>proposer <span class=\"token operator\">||</span> comp<span class=\"token punctuation\">.</span><span class=\"token function\">getPriorVotes</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>proposer<span class=\"token punctuation\">,</span> <span class=\"token function\">sub256</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> proposalThreshold<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::cancel: proposer above threshold\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        proposal<span class=\"token punctuation\">.</span>canceled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            timelock<span class=\"token punctuation\">.</span><span class=\"token function\">cancelTransaction</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>signatures<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>calldatas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>eta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">ProposalCanceled</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getActions</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> targets<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> values<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> signatures<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> calldatas<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        Proposal <span class=\"token keyword\">storage</span> p <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>targets<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>signatures<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>calldatas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getReceipt</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> voter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span>Receipt <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>receipts<span class=\"token punctuation\">[</span>voter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span>ProposalState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>proposalCount <span class=\"token operator\">>=</span> proposalId <span class=\"token operator\">&amp;&amp;</span> proposalId <span class=\"token operator\">></span> initialProposalId<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::state: invalid proposal id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Proposal <span class=\"token keyword\">storage</span> proposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>canceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Canceled<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number <span class=\"token operator\">&lt;=</span> proposal<span class=\"token punctuation\">.</span>startBlock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Pending<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number <span class=\"token operator\">&lt;=</span> proposal<span class=\"token punctuation\">.</span>endBlock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>forVotes <span class=\"token operator\">&lt;=</span> proposal<span class=\"token punctuation\">.</span>againstVotes <span class=\"token operator\">||</span> proposal<span class=\"token punctuation\">.</span>forVotes <span class=\"token operator\">&lt;</span> <span class=\"token function\">quorumVotes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Defeated<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>eta <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Succeeded<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>executed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Executed<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">>=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>eta<span class=\"token punctuation\">,</span> timelock<span class=\"token punctuation\">.</span><span class=\"token function\">GRACE_PERIOD</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Expired<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> ProposalState<span class=\"token punctuation\">.</span>Queued<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n      * @notice Cast a vote for a proposal\n      * @param proposalId The id of the proposal to vote on\n      * @param support The support value for the vote. 0=against, 1=for, 2=abstain\n      */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">castVote</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint8</span> support<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">VoteCast</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">,</span> <span class=\"token function\">_castVote</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n      * @notice Cast a vote for a proposal with a reason\n      * @param proposalId The id of the proposal to vote on\n      * @param support The support value for the vote. 0=against, 1=for, 2=abstain\n      * @param reason The reason given for the vote by the voter\n      */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">castVoteWithReason</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint8</span> support<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">calldata</span> reason<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">VoteCast</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">,</span> <span class=\"token function\">_castVote</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n      * @notice Cast a vote for a proposal by signature\n      * @dev External function that accepts EIP-712 signatures for voting on proposals.\n      */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">castVoteBySig</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint8</span> support<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">bytes32</span> domainSeparator <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>DOMAIN_TYPEHASH<span class=\"token punctuation\">,</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getChainId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes32</span> structHash <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>BALLOT_TYPEHASH<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes32</span> digest <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x19\\x01\"</span><span class=\"token punctuation\">,</span> domainSeparator<span class=\"token punctuation\">,</span> structHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">address</span> signatory <span class=\"token operator\">=</span> <span class=\"token function\">ecrecover</span><span class=\"token punctuation\">(</span>digest<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>signatory <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::castVoteBySig: invalid signature\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">VoteCast</span><span class=\"token punctuation\">(</span>signatory<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">,</span> <span class=\"token function\">_castVote</span><span class=\"token punctuation\">(</span>signatory<span class=\"token punctuation\">,</span> proposalId<span class=\"token punctuation\">,</span> support<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n      * @notice Internal function that caries out voting logic\n      * @param voter The voter that is casting their vote\n      * @param proposalId The id of the proposal to vote on\n      * @param support The support value for the vote. 0=against, 1=for, 2=abstain\n      * @return The number of votes cast\n      */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_castVote</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> voter<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> proposalId<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint8</span> support<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint96</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span>proposalId<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ProposalState<span class=\"token punctuation\">.</span>Active<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::_castVote: voting is closed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>support <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::_castVote: invalid vote type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Proposal <span class=\"token keyword\">storage</span> proposal <span class=\"token operator\">=</span> proposals<span class=\"token punctuation\">[</span>proposalId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        Receipt <span class=\"token keyword\">storage</span> receipt <span class=\"token operator\">=</span> proposal<span class=\"token punctuation\">.</span>receipts<span class=\"token punctuation\">[</span>voter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>receipt<span class=\"token punctuation\">.</span>hasVoted <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::_castVote: voter already voted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint96</span> votes <span class=\"token operator\">=</span> comp<span class=\"token punctuation\">.</span><span class=\"token function\">getPriorVotes</span><span class=\"token punctuation\">(</span>voter<span class=\"token punctuation\">,</span> proposal<span class=\"token punctuation\">.</span>startBlock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>support <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            proposal<span class=\"token punctuation\">.</span>againstVotes <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>againstVotes<span class=\"token punctuation\">,</span> votes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>support <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            proposal<span class=\"token punctuation\">.</span>forVotes <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>forVotes<span class=\"token punctuation\">,</span> votes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>support <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            proposal<span class=\"token punctuation\">.</span>abstainVotes <span class=\"token operator\">=</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span>proposal<span class=\"token punctuation\">.</span>abstainVotes<span class=\"token punctuation\">,</span> votes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        receipt<span class=\"token punctuation\">.</span>hasVoted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        receipt<span class=\"token punctuation\">.</span>support <span class=\"token operator\">=</span> support<span class=\"token punctuation\">;</span>\n        receipt<span class=\"token punctuation\">.</span>votes <span class=\"token operator\">=</span> votes<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> votes<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/*\n     * @notice Admin function for setting the voting delay\n     * @param newVotingDelay new voting delay, in blocks\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_setVotingDelay</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> newVotingDelay<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> admin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::_setVotingDelay: admin only\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint</span> oldVotingDelay <span class=\"token operator\">=</span> votingDelay<span class=\"token punctuation\">;</span>\n        votingDelay <span class=\"token operator\">=</span> newVotingDelay<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">VotingDelaySet</span><span class=\"token punctuation\">(</span>oldVotingDelay<span class=\"token punctuation\">,</span>votingDelay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/*\n     * @notice Admin function for setting the voting period\n     * @param newVotingPeriod new voting period, in blocks\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_setVotingPeriod</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> newVotingPeriod<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> admin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::_setVotingPeriod: admin only\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint</span> oldVotingPeriod <span class=\"token operator\">=</span> votingPeriod<span class=\"token punctuation\">;</span>\n        votingPeriod <span class=\"token operator\">=</span> newVotingPeriod<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">VotingPeriodSet</span><span class=\"token punctuation\">(</span>oldVotingPeriod<span class=\"token punctuation\">,</span> votingPeriod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/*\n     * @notice Admin function for setting the proposal threshold\n     * @dev newProposalThreshold must be greater than the hardcoded min\n     * @param newProposalThreshold new proposal threshold\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_setProposalThreshold</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> newProposalThereshold<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> admin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::_setProposalThreshold: admin only\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>newProposalThereshold <span class=\"token operator\">>=</span> MIN_PROPOSAL_THRESHOLD<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::_setProposalThreshold: new threshold below min\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint</span> oldProposalThreshold <span class=\"token operator\">=</span> proposalThreshold<span class=\"token punctuation\">;</span>\n        proposalThreshold <span class=\"token operator\">=</span> newProposalThereshold<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">ProposalThresholdSet</span><span class=\"token punctuation\">(</span>oldProposalThreshold<span class=\"token punctuation\">,</span> proposalThreshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n      * @notice Initiate the GovernorBravo contract\n      * @dev Admin only. Sets initial proposal id which initiates the contract, ensuring a continious proposal id count\n      * @param governorAlpha The address for the Governor to continue the proposal id count from\n      */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_initiate</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> governorAlpha<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> admin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::_initiate: admin only\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>initialProposalId <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravo::_initiate: can only initiate once\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        proposalCount <span class=\"token operator\">=</span> <span class=\"token function\">GovernorAlpha</span><span class=\"token punctuation\">(</span>governorAlpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">proposalCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        initialProposalId <span class=\"token operator\">=</span> proposalCount<span class=\"token punctuation\">;</span>\n        timelock<span class=\"token punctuation\">.</span><span class=\"token function\">acceptAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n      * @param newPendingAdmin New pending admin.\n      */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_setPendingAdmin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> newPendingAdmin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Check caller = admin</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> admin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravoDelegator:_setPendingAdmin: admin only\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Save current value, if any, for inclusion in log</span>\n        <span class=\"token builtin\">address</span> oldPendingAdmin <span class=\"token operator\">=</span> pendingAdmin<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Store pendingAdmin with value newPendingAdmin</span>\n        pendingAdmin <span class=\"token operator\">=</span> newPendingAdmin<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">NewPendingAdmin</span><span class=\"token punctuation\">(</span>oldPendingAdmin<span class=\"token punctuation\">,</span> newPendingAdmin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n      * @dev Admin function for pending admin to accept role and update admin\n      */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_acceptAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Check caller is pendingAdmin and pendingAdmin ≠ address(0)</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> pendingAdmin <span class=\"token operator\">&amp;&amp;</span> msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravoDelegator:_acceptAdmin: admin only\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Save current values for inclusion in log</span>\n        <span class=\"token builtin\">address</span> oldAdmin <span class=\"token operator\">=</span> admin<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">address</span> oldPendingAdmin <span class=\"token operator\">=</span> pendingAdmin<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Store admin with value pendingAdmin</span>\n        admin <span class=\"token operator\">=</span> pendingAdmin<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Clear the pending value</span>\n        pendingAdmin <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">NewAdmin</span><span class=\"token punctuation\">(</span>oldAdmin<span class=\"token punctuation\">,</span> admin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">NewPendingAdmin</span><span class=\"token punctuation\">(</span>oldPendingAdmin<span class=\"token punctuation\">,</span> pendingAdmin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">add256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"addition overflow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sub256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"subtraction underflow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getChainId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint</span> chainId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span> chainId <span class=\"token operator\">:=</span> <span class=\"token function\">chainid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> chainId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyze-3\"><a href=\"#Analyze-3\" class=\"headerlink\" title=\"Analyze\"></a>Analyze</h2><p>对应的vote token为DFH</p>\n<p>和Governance Alpha大体相同，但是有所区别，在该合约中VotingDelay，VotingPeriod和ProposalThreshold变量可以修改而不是合约建立后就不可变</p>\n<p>提案条件判断也从票数大于提案门槛变成票数大于提案门槛或提案者是白名单账户，并且要求了初始提案数目不为0，此处的初始提案数量来自Governance Alpha，其余条件相同</p>\n<p>投票时将bool型的support改为了uint8类型，只有0，1，2值为有效值，相当于在支持与否的情况下新增了弃权票，同时在投票出做出的改变还有castVoteWithReason，允许投票者以一定的理由进行投票.票数以提案投票开始时对应块的票数。</p>\n<p>采用了proxy的方式，便于合约的更新</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">GovernorBravoDelegator</span> <span class=\"token keyword\">is</span> GovernorBravoDelegatorStorage<span class=\"token punctuation\">,</span> GovernorBravoEvents <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token builtin\">address</span> timelock_<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token builtin\">address</span> uni_<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token builtin\">address</span> admin_<span class=\"token punctuation\">,</span>\n\t        <span class=\"token builtin\">address</span> implementation_<span class=\"token punctuation\">,</span>\n\t        <span class=\"token builtin\">uint</span> votingPeriod_<span class=\"token punctuation\">,</span>\n\t        <span class=\"token builtin\">uint</span> votingDelay_<span class=\"token punctuation\">,</span>\n            <span class=\"token builtin\">uint</span> proposalThreshold_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">// Admin set to msg.sender for initialization</span>\n        admin <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">delegateTo</span><span class=\"token punctuation\">(</span>implementation_<span class=\"token punctuation\">,</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"initialize(address,address,uint256,uint256,uint256)\"</span><span class=\"token punctuation\">,</span>\n                                                            timelock_<span class=\"token punctuation\">,</span>\n                                                            uni_<span class=\"token punctuation\">,</span>\n                                                            votingPeriod_<span class=\"token punctuation\">,</span>\n                                                            votingDelay_<span class=\"token punctuation\">,</span>\n                                                            proposalThreshold_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_setImplementation</span><span class=\"token punctuation\">(</span>implementation_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tadmin <span class=\"token operator\">=</span> admin_<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\n\t<span class=\"token comment\">/**\n     * @notice Called by the admin to update the implementation of the delegator\n     * @param implementation_ The address of the new implementation for delegation\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_setImplementation</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> implementation_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> admin<span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravoDelegator::_setImplementation: admin only\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>implementation_ <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GovernorBravoDelegator::_setImplementation: invalid implementation address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">address</span> oldImplementation <span class=\"token operator\">=</span> implementation<span class=\"token punctuation\">;</span>\n        implementation <span class=\"token operator\">=</span> implementation_<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">NewImplementation</span><span class=\"token punctuation\">(</span>oldImplementation<span class=\"token punctuation\">,</span> implementation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Internal method to delegate execution to another contract\n     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n     * @param callee The contract to delegatecall\n     * @param data The raw data to delegatecall\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">delegateTo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> callee<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> returnData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> callee<span class=\"token punctuation\">.</span><span class=\"token function\">delegatecall</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">revert</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>returnData<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> returndatasize<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n     * @dev Delegates execution to an implementation contract.\n     * It returns to the external caller whatever the implementation returns\n     * or forwards reverts.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// delegate all other functions to current implementation</span>\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> implementation<span class=\"token punctuation\">.</span><span class=\"token function\">delegatecall</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">let</span> free_mem_ptr <span class=\"token operator\">:=</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span>\n              <span class=\"token function\">returndatacopy</span><span class=\"token punctuation\">(</span>free_mem_ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> returndatasize<span class=\"token punctuation\">)</span>\n\n              <span class=\"token keyword\">switch</span> success\n              <span class=\"token keyword\">case</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">revert</span><span class=\"token punctuation\">(</span>free_mem_ptr<span class=\"token punctuation\">,</span> returndatasize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n              <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>free_mem_ptr<span class=\"token punctuation\">,</span> returndatasize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>主体逻辑是相同的，代码就不再分析了</p>\n<h1 id=\"summary\"><a href=\"#summary\" class=\"headerlink\" title=\"summary\"></a>summary</h1><p>compound实现了对defi项目的治理，采用投票的方式进行公平决策，持有vote token即可参与投票，投票结束后判断成功与否执行对应的操作进而公平公正的实现了defi的治理</p>\n<p>其中Governor Alpha和Governor Bravo有所区别，在此简单的对比总结一下</p>\n<table>\n<thead>\n<tr>\n<th><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images1/img/202207101644660.png\"></th>\n<th><img src=\"https://cdn.jsdelivr.net/gh/bcYng-w/images1/img/202207101644251.png\"></th>\n<th>example</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>参数不可更新</td>\n<td>参数可更新</td>\n<td>VotingDelay，VotingPeriod，ProposalThreshold等变量</td>\n</tr>\n<tr>\n<td>仅存在yes，no 选择</td>\n<td>除yes，no外新增了abstain</td>\n<td>x</td>\n</tr>\n<tr>\n<td>投票时不能携带理由或评论</td>\n<td>投票时可以携带理由或评论</td>\n<td>投票函数增加了string类型的reason变量</td>\n</tr>\n<tr>\n<td>每次更新需要重置提案编号</td>\n<td>维护固定且连续的提案编号</td>\n<td>x</td>\n</tr>\n</tbody></table>\n","text":" Governance TokenCode// SPDX-License-Identifier: BSD-3-Clause pragma solidity ^0.8.10; contract Comp &#123; /// @notice EIP-20 token name fo...","link":"","photos":[],"count_time":{"symbolsCount":"66k","symbolsTime":"1:01"},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":17,"path":"api/tags/区块链.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Governance-Token\"><span class=\"toc-text\">Governance Token</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyze\"><span class=\"toc-text\">Analyze</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Governance-Alpha\"><span class=\"toc-text\">Governance Alpha</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-1\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyze-1\"><span class=\"toc-text\">Analyze</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Timelock\"><span class=\"toc-text\">Timelock</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-2\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyze-2\"><span class=\"toc-text\">Analyze</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#GovernorBravo-sol\"><span class=\"toc-text\">GovernorBravo.sol</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code-3\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyze-3\"><span class=\"toc-text\">Analyze</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#summary\"><span class=\"toc-text\">summary</span></a></li></ol>","author":{"name":"bcYng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"2022 *ctf-->Treasure Hunter","uid":"de2cba75e8e35434333862362c47f8f7","slug":"star ctf-treasure hunter","date":"2022-08-01T10:44:08.818Z","updated":"2022-08-01T10:44:08.818Z","comments":true,"path":"api/articles/star ctf-treasure hunter.json","keywords":null,"cover":[],"text":"周六时候打了一下*ctf，其中的区块链题目还是蛮有意思的，拿出来分享一下 codepragma solidity >=0.8.0 &lt;0.9.0; uint256 constant SMT_STACK_SIZE = 32; uint256 constant DEPTH = 1...","link":"","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[],"tags":[{"name":"区块链 ctf","slug":"区块链-ctf","count":9,"path":"api/tags/区块链-ctf.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Smart Contract ctf","uid":"2dde006a1ba2b506fb11671b03da33e3","slug":"blockchain-ctf","date":"2022-08-01T10:35:33.060Z","updated":"2022-08-01T10:35:33.060Z","comments":true,"path":"api/articles/blockchain-ctf.json","keywords":null,"cover":[],"text":"题库地址：https://blockchain-ctf.securityinnovation.com/#/ 1.DonationCodepragma solidity 0.4.24; import \"../CtfFramework.sol\"; import \"../../node...","link":"","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":17,"path":"api/tags/区块链.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}