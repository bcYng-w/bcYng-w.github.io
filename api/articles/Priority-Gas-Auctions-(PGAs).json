{"title":"Priority Gas Auctions (PGAs)","uid":"ac4aeeb950031db089d1689b68bf4df9","slug":"Priority-Gas-Auctions-(PGAs)","date":"2023-01-03T16:27:44.588Z","updated":"2023-01-03T16:35:04.184Z","comments":true,"path":"api/articles/Priority-Gas-Auctions-(PGAs).json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/20201017172017.png","content":"<h1 id=\"0x01-前提\"><a href=\"#0x01-前提\" class=\"headerlink\" title=\"0x01 前提\"></a>0x01 前提</h1><p>我们都知道，常规意义上，在以太坊上提交交易是一个有序的过程，现在重新审视一下这个过程：</p>\n<ul>\n<li>用户需要在钱包构建交易，并签名，钱包后端会将该交易广播到 P2P 网络；</li>\n<li>该交易首先会进入各个节点的 mempool，按照一定的顺序排列；</li>\n<li>矿工从 mempool 中选取合适的交易进行打包，挖矿出块，该交易就成功上链了。</li>\n</ul>\n<p>三明治攻击（ Sandwich Attack）正是利用了这一原理（<a href=\"https://etherscan.io/tx/0x65a6d6e7b88a3d7c6c11ef4658765bcd94e2a0f831a1e9752f711bbecc08740a\">攻击实例</a>），接下来记录一下关于PGAs的学习</p>\n<h1 id=\"0x02-原理理解\"><a href=\"#0x02-原理理解\" class=\"headerlink\" title=\"0x02 原理理解\"></a>0x02 原理理解</h1><p>简单来说，Front-Running 是指在一笔正常交易等待打包的过程中，抢跑程序通过使用更高的Gas 从而抢先完成交易的行为，从而实现获利。而 Mempool 是一组已经广播到网络中并等待被打包进区块的以太坊交易，交易在Mempool中等待被记账，但此时交易信息是公开可见的，抢跑程序就可以通过不断扫描 Mempool 中的交易，来分析发现可攻击的目标，之后使用更高的gas来优先执行自己的攻击交易</p>\n<h1 id=\"0x03-实现\"><a href=\"#0x03-实现\" class=\"headerlink\" title=\"0x03 实现\"></a>0x03 实现</h1><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"crypto/ecdsa\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"github.com/ethereum/go-ethereum/common\"</span>\n\t<span class=\"token string\">\"github.com/ethereum/go-ethereum/core/types\"</span>\n\t<span class=\"token string\">\"github.com/ethereum/go-ethereum/crypto\"</span>\n\t<span class=\"token string\">\"github.com/ethereum/go-ethereum/ethclient\"</span>\n\t<span class=\"token string\">\"github.com/ethereum/go-ethereum/ethclient/gethclient\"</span>\n\t<span class=\"token string\">\"github.com/ethereum/go-ethereum/rpc\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"math/big\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\turl <span class=\"token operator\">=</span> <span class=\"token string\">\"api\"</span>\n\twss <span class=\"token operator\">=</span> <span class=\"token string\">\"api\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> txd <span class=\"token operator\">*</span>types<span class=\"token punctuation\">.</span>Transaction\n<span class=\"token keyword\">var</span> target <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> 监控合约地址\n<span class=\"token keyword\">var</span> PVK <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> 私钥\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>backend <span class=\"token operator\">*</span>ethclient<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">,</span> rpcCli <span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tgcli <span class=\"token operator\">:=</span> gethclient<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>rpcCli<span class=\"token punctuation\">)</span>\n\ttxch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> common<span class=\"token punctuation\">.</span>Hash<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> gcli<span class=\"token punctuation\">.</span><span class=\"token function\">SubscribePendingTransactions</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> txch<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to SubscribePendingTransactions: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\nloop<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">case</span> txhash <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>txch<span class=\"token punctuation\">:</span>\n\t\t\ttx<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> backend<span class=\"token punctuation\">.</span><span class=\"token function\">TransactionByHash</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> txhash<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\tdata<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">MarshalJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">To</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t\tto <span class=\"token operator\">:=</span> tx<span class=\"token punctuation\">.</span><span class=\"token function\">To</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">if</span> to <span class=\"token operator\">==</span> target <span class=\"token punctuation\">&#123;</span>\n\t\t\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tx: %v\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\ttxd <span class=\"token operator\">=</span> tx\n\t\t\t\t\t<span class=\"token keyword\">break</span> loop\n\t\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">createTx</span><span class=\"token punctuation\">(</span>backend <span class=\"token operator\">*</span>ethclient<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">,</span> rpcCli <span class=\"token operator\">*</span>rpc<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tinput <span class=\"token operator\">:=</span> txd<span class=\"token punctuation\">.</span><span class=\"token function\">Data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tgas <span class=\"token operator\">:=</span> txd<span class=\"token punctuation\">.</span><span class=\"token function\">Gas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> a <span class=\"token builtin\">uint64</span> <span class=\"token operator\">=</span> txd<span class=\"token punctuation\">.</span><span class=\"token function\">GasPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Uint64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n\tgasprice <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>big<span class=\"token punctuation\">.</span>Int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetUint64</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\tvalue <span class=\"token operator\">:=</span> big<span class=\"token punctuation\">.</span><span class=\"token function\">NewInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\tprivateKey<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">HexToECDSA</span><span class=\"token punctuation\">(</span>PVK<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tpublicKey <span class=\"token operator\">:=</span> privateKey<span class=\"token punctuation\">.</span><span class=\"token function\">Public</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tpublicKeyECDSA<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> publicKey<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ecdsa<span class=\"token punctuation\">.</span>PublicKey<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cannot assert type: publicKey is not of type *ecdsa.PublicKey\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tfromAddress <span class=\"token operator\">:=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">PubkeyToAddress</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>publicKeyECDSA<span class=\"token punctuation\">)</span>\n\tnonce<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> backend<span class=\"token punctuation\">.</span><span class=\"token function\">PendingNonceAt</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fromAddress<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>fromAddress<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">)</span>\n\tchainID<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> backend<span class=\"token punctuation\">.</span><span class=\"token function\">NetworkID</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\ttx <span class=\"token operator\">:=</span> types<span class=\"token punctuation\">.</span><span class=\"token function\">NewTransaction</span><span class=\"token punctuation\">(</span>nonce<span class=\"token punctuation\">,</span> common<span class=\"token punctuation\">.</span><span class=\"token function\">HexToAddress</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> gas<span class=\"token punctuation\">,</span> gasprice<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span>\n\n\tsignedTx<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> types<span class=\"token punctuation\">.</span><span class=\"token function\">SignTx</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> types<span class=\"token punctuation\">.</span><span class=\"token function\">NewEIP155Signer</span><span class=\"token punctuation\">(</span>chainID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> privateKey<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\terr <span class=\"token operator\">=</span> backend<span class=\"token punctuation\">.</span><span class=\"token function\">SendTransaction</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> signedTx<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tx sent: %s\\n\"</span><span class=\"token punctuation\">,</span> signedTx<span class=\"token punctuation\">.</span><span class=\"token function\">Hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ttransactionHash <span class=\"token operator\">:=</span> common<span class=\"token punctuation\">.</span><span class=\"token function\">HexToHash</span><span class=\"token punctuation\">(</span>signedTx<span class=\"token punctuation\">.</span><span class=\"token function\">Hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> isPending<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> backend<span class=\"token punctuation\">.</span><span class=\"token function\">TransactionByHash</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> transactionHash<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>isPending<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>isPending <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">break</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tbackend<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> ethclient<span class=\"token punctuation\">.</span><span class=\"token function\">Dial</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to dial: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\trpcCli<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> rpc<span class=\"token punctuation\">.</span><span class=\"token function\">Dial</span><span class=\"token punctuation\">(</span>wss<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to dial: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t\n\t<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>backend<span class=\"token punctuation\">,</span> rpcCli<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">createTx</span><span class=\"token punctuation\">(</span>backend<span class=\"token punctuation\">,</span> rpcCli<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>部署一个我们的测试合约</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">test</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> ss<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ss <span class=\"token operator\">==</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            ss<span class=\"token operator\">=</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">re</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        ss<span class=\"token operator\">=</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>将上述的target地址设置为该合约地址，运行程序，之后我们在remix中调用函数<code>a()</code>，这时程序会持续监控mempool直到发现这笔交易，之后程序会使用更高的gasPrice和相同的gasLimit执行相同的交易</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230104002029136.png\"></p>\n<p>在remix中查看执行结果是否符合预期（ps：在remix中调用函数的地址为0x22…..）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230104002131515.png\"></p>\n<p>查看发现我们先在remix中执行的交易没有成功执行，ss修改为了另一个地址（该地址为测试程序中私钥对应的地址），可见符合预期结果，再来看一下两笔交易的详情</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230104002443331.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20230104002501824.png\"></p>\n<p>图二位攻击交易，两者使用相同的gasLimit，攻击交易使用跟高的GasPrice，两笔交易在同一区块中被确认，攻击者成功实现交易抢跑</p>\n<p>同理，除了实现交易抢跑之外还可以实现交易取消更改操作，首先发送一笔错误的交易，随后我们立刻发送一笔正确的交易，使用更高的gas和相同的nonce，这样第二笔正确的交易就会被更快的执行，将会先被确认，第二笔交易所用的nonce为已使用状态，在以太坊中，一个nonce只能用一次，所以使用相同nonce的交易一则会被称为无效交易</p>\n","text":"0x01 前提我们都知道，常规意义上，在以太坊上提交交易是一个有序的过程，现在重新审视一下这个过程： 用户需要在钱包构建交易，并签名，钱包后端会将该交易广播到 P2P 网络； 该交易首先会进入各个节点的 mempool，按照一定的顺序排列； 矿工从 mempool 中选取合适的交...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"区块链 ctf","slug":"区块链-ctf","count":12,"path":"api/tags/区块链-ctf.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x01-%E5%89%8D%E6%8F%90\"><span class=\"toc-text\">0x01 前提</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x02-%E5%8E%9F%E7%90%86%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">0x02 原理理解</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#0x03-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">0x03 实现</span></a></li></ol>","author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/296321666270692_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Quill Audit CTF","uid":"44a7f484fa434c0aa60841dc0d5e49cd","slug":"quii","date":"2023-01-27T06:00:47.995Z","updated":"2023-03-23T08:16:03.793Z","comments":true,"path":"api/articles/quii.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image?url=https%253A%252F%252Fsuper-static-assets.s3.amazonaws.com%252Fa799195c-7c08-410a-9254-50dd9f21a772%252Fimages%252Fa910cf7c-97f8-4902-8d32-7e8fe79312f8.png","text":"QuillCTF看到Quill在弄的区块链安全CTF题目，看到完成奖励很是心动 只是可惜，发现这个挑战时候已经结束了五道题，只剩下三道题目，不过看起来应该还在更新之中，本着挑战一下的心态还是来试一试吧 0x0E Molch’s Vault暂不展示 0x0D DonateCode/...","link":"","photos":[],"count_time":{"symbolsCount":"34k","symbolsTime":"31 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":19,"path":"api/tags/区块链.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/296321666270692_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Down Under CTF","uid":"37d952c359458cb6532fc36cd0258d93","slug":"DownUnder","date":"2022-10-11T15:34:16.219Z","updated":"2022-12-16T06:59:31.988Z","comments":true,"path":"api/articles/DownUnder.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/f67bba9809a0d5a0a679952624d88928527fc48cfe7fcd381ab21a60cb838f3f.png","text":"DownUnder ctf 2022-blockchain题解 Solve Me一道签到题，没什么难度，调用指定函数即可 function solveChallenge() external &#123; isSolved = true; &#125; Secret and Ep...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":19,"path":"api/tags/区块链.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/296321666270692_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}