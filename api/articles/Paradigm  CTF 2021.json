{"title":"Paradigm CTF 2021","uid":"e4a055270fc77b5d73f92a425173cb60","slug":"Paradigm  CTF 2021","date":"2022-10-15T12:42:45.830Z","updated":"2022-10-15T12:42:45.830Z","comments":true,"path":"api/articles/Paradigm  CTF 2021.json","keywords":null,"cover":[],"content":"<p>由于团队的需要，需要复现一下Paradigm CTF 2021，相对简单的题目呗团队内其他成员复现，我来弄一弄没有解决的五道比较难的题目</p>\n<span id=\"more\"></span>\n\n<h1 id=\"1-Rever\"><a href=\"#1-Rever\" class=\"headerlink\" title=\"1.Rever\"></a>1.Rever</h1><h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token number\">0.8</span><span class=\"token number\">.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Deployer</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Challenge</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> fwd<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> rev<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> code<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> code<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token builtin\">uint8</span> op <span class=\"token operator\">=</span> <span class=\"token builtin\">uint8</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n                   op <span class=\"token operator\">==</span> <span class=\"token number\">0x3B</span> <span class=\"token comment\">// EXTCODECOPY</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x3C</span> <span class=\"token comment\">// EXTCODESIZE</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x3F</span> <span class=\"token comment\">// EXTCODEHASH</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x54</span> <span class=\"token comment\">// SLOAD</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x55</span> <span class=\"token comment\">// SSTORE</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF0</span> <span class=\"token comment\">// CREATE</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF1</span> <span class=\"token comment\">// CALL</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF2</span> <span class=\"token comment\">// CALLCODE</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF4</span> <span class=\"token comment\">// DELEGATECALL</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF5</span> <span class=\"token comment\">// CREATE2</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xFA</span> <span class=\"token comment\">// STATICCALL</span>\n                <span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xFF</span> <span class=\"token comment\">// SELFDESTRUCT</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">>=</span> <span class=\"token number\">0x60</span> <span class=\"token operator\">&amp;&amp;</span> op <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span> i <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>op <span class=\"token operator\">-</span> <span class=\"token number\">0x60</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            \n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bytes</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            b<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">deployOne</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> code<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"deployOne/code-too-long\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">safe</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"deployOne/code-unsafe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Deployer</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> code<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span>  <span class=\"token punctuation\">&#123;</span>\n        fwd <span class=\"token operator\">=</span> <span class=\"token function\">deployOne</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rev <span class=\"token operator\">=</span> <span class=\"token function\">deployOne</span><span class=\"token punctuation\">(</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Setup</span> <span class=\"token punctuation\">&#123;</span>\n    Challenge <span class=\"token keyword\">public</span> challenge<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        challenge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Challenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> what<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">.</span><span class=\"token function\">fwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> what<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>challenge<span class=\"token punctuation\">.</span><span class=\"token function\">rev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> what<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> who<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> what<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token builtin\">bool</span> ok<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">&#123;</span>\n            ok <span class=\"token operator\">:=</span> <span class=\"token function\">staticcall</span><span class=\"token punctuation\">(</span><span class=\"token function\">gas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> who<span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>what<span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span>what<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token function\">iszero</span><span class=\"token punctuation\">(</span><span class=\"token function\">iszero</span><span class=\"token punctuation\">(</span><span class=\"token function\">returndatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">let</span> ptr <span class=\"token operator\">:=</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">returndatacopy</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token function\">returndatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    ok <span class=\"token operator\">:=</span> <span class=\"token function\">mload</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> ok<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Analyse\"><a href=\"#Analyse\" class=\"headerlink\" title=\"Analyse\"></a>Analyse</h2><p>做出这道题需要对汇编知识有些理解</p>\n<p>我们首先对题目合约进行分析</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221011142240846.png\"></p>\n<p>梳理一下思路来看，challenge合约中deploy函数创建deployer合约，获得合约地址，并且调用safe函数对于创建时传入的bytecode进行判断，限制,部署的合约不应含有以下功能</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">op <span class=\"token operator\">==</span> <span class=\"token number\">0x3B</span> <span class=\"token comment\">// EXTCODECOPY</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x3C</span> <span class=\"token comment\">// EXTCODESIZE</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x3F</span> <span class=\"token comment\">// EXTCODEHASH</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x54</span> <span class=\"token comment\">// SLOAD</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0x55</span> <span class=\"token comment\">// SSTORE</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF0</span> <span class=\"token comment\">// CREATE</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF1</span> <span class=\"token comment\">// CALL</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF2</span> <span class=\"token comment\">// CALLCODE</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF4</span> <span class=\"token comment\">// DELEGATECALL</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xF5</span> <span class=\"token comment\">// CREATE2</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xFA</span> <span class=\"token comment\">// STATICCALL</span>\n<span class=\"token operator\">||</span> op <span class=\"token operator\">==</span> <span class=\"token number\">0xFF</span> <span class=\"token comment\">// SELFDESTRUCT</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>deploy函数被调用时会部署两个合约，<code>fwd</code>地址为以<code>code</code>部署的合约地址，<code>rev</code>是以<code>reversed(list(code))</code>部署的合约地址，其中<code>flip</code>函数就是将code进行倒序（以字节为单位）</p>\n<p>比如0x1234567890—&gt;0x9078563412</p>\n<p>Setup合约会调用<code>fwd</code>，<code>rev</code>合约，<code>calldata</code>为mload(0x160,0x160+string.length)，之后进行判断<code>returndatasize</code>是否非空，是则执行if，否则直接返回false</p>\n<p>if中执行内容为将指针移动到mload(0x40)，并且将returndata拷贝到ptr中，读取mload(ptr)的值作为返回值。关于mload(0x40)我们可以看下边这一段解释</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> <strong>As others pointed out, the <code>mload(0x40) </code>returns where the pointer addresses that you can start using it. (free-pointer)</strong></p>\n<p><strong>The first four 32 bytes (128) are always reserved when your smart contract is deployed. This is the reason your <code>mload(0x40)</code> returns 80. 80 is represented in hex format. It is 128 in decimal, which is where you can start writing in memory! This is how the memory looks like currently.</strong></p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/W0BPj.png\"></p>\n<p>目前合约部分分析完成，再来看一下python代码部分</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> eth_sandbox\n<span class=\"token keyword\">from</span> weakref <span class=\"token keyword\">import</span> WeakKeyDictionary\n<span class=\"token keyword\">import</span> web3\n<span class=\"token keyword\">from</span> web3 <span class=\"token keyword\">import</span> Web3\n<span class=\"token keyword\">from</span> eth_abi <span class=\"token keyword\">import</span> encode_single\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> string\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">random_string</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span>ascii_uppercase <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span>digits<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">checker</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> web3<span class=\"token punctuation\">:</span> Web3<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">:</span>\n    testcases <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"aba\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"paradigm\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"tattarrattat\"</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">:</span>\n                <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> random_string<span class=\"token punctuation\">(</span><span class=\"token number\">63</span><span class=\"token punctuation\">)</span>\n                testcases<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span> <span class=\"token operator\">+</span> random_string<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> random_string<span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\n                testcases<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span> <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">reversed</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            testcases<span class=\"token punctuation\">[</span>random_string<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> testcases<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> web3<span class=\"token punctuation\">.</span>sha3<span class=\"token punctuation\">(</span>text<span class=\"token operator\">=</span><span class=\"token string\">\"test(string)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> encode_single<span class=\"token punctuation\">(</span><span class=\"token string\">'uint256'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> encode_single<span class=\"token punctuation\">(</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> web3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token string\">\"to\"</span><span class=\"token punctuation\">:</span> addr<span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\neth_sandbox<span class=\"token punctuation\">.</span>run_launcher<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    eth_sandbox<span class=\"token punctuation\">.</span>new_launch_instance_action<span class=\"token punctuation\">(</span>deploy_value<span class=\"token operator\">=</span>Web3<span class=\"token punctuation\">.</span>toWei<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ether'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    eth_sandbox<span class=\"token punctuation\">.</span>new_get_flag_action<span class=\"token punctuation\">(</span>checker<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>相当于调用test函数，参数为<code>uint256--32</code>，和<code>string--random_string(128)</code>，其中的string有两种生成方式，有一半为true，一半为false，其中true部分判断随机数是否大于0.5，为真将是<code>str=random_string(63)+random_string(1)+reversed(list(str))</code>，否则为<code>str=random_string(64)+reversed(list(str))</code>,false部分直接生成<code>random_string(63)</code></p>\n<p>自己运行一下看一看</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"> True\na True\nab False\naba True\nparadigm False\ntattarrattat True\nQWTJSI421LTGK7DIPYTWCIOZKB72AUTWKC5VMG6S17TZ13UIAD5CZAIA1FJ0WGWBBWGW0JF1AIAZC5DAIU31ZT71S6GMV5CKWTUA27BKZOICWTYPID7KGTL124ISJTWQ True\nH7Q0SGZPXLBC8Y405032K9YOGC6LOHY2KOSV098P0WDV5OBNABI467OWJSQKXY971M97I3JHFBRR3TYH0BCQIJRB3CGU3XCZ1K43K1X2F5K4FWDBWC023A3YUUGM5K31 False\nSCEKU7670FB1B3TZDXP31MI2AGFZF3T56HATKRU7IEVVGVGZCWRKLCXE3BSJD06660DJSB3EXCLKRWCZGVGVVEI7URKTAH65T3FZFGA2IM13PXDZT3B1BF0767UKECS True\nQTFOQ4MOR53F3ZVAK3I54LR2NW68TNAVJS8S1PVCQS6LWSJDC3PFJU4CIDFV1G2MI4DKDBWYVPCO4X2DJFQLY76GZISGSRENMRG5M1SNW0ZA2INPMXWNE7O0ALD2Z972 False\nI9N053FHRKGJAZ38LHIPICM8TTKY5PAF45ND7OB513VLDIH10MF0UYANUB9V152KK251V9BUNAYU0FM01HIDLV315BO7DN54FAP5YKTT8MCIPIHL83ZAJGKRHF350N9I True\nMPCEVBOGX6KJ3DTA55FF572FTUHWE029DSI3L2546ESZPR1UVSUHM8KPZNPQ0Y6MJTQM6K1A9GS6KIMQ832WF5Z518272ZZ0VLYCL1ACRM0B993YPOZMLC9W9KQI81PK False\nQTUHXHFZKCSSVZ4KNM139MVJBJAL66BODI9I3XVGSMX2EM8JGJYXBFEAB76D6L2M2L6D67BAEFBXYJGJ8ME2XMSGVX3I9IDOB66LAJBJVM931MNK4ZVSSCKZFHXHUTQ True\nA5XJHVVKLGZQC3JIEVD8JFSOT9IPQ9WCEZ46JAIVOFIZDLQD1DRK5FJKBLULLCZAFLEVLP6YCOOXFYVGSAVGIYGJV8JHD3K5IFAGZIYIBVQPRW3ICD01O7OCUS34ZT24 False\nZ8OP27WJOVCNIBYVGKFJ2BCXSZ5HPLMJAZDN9E5JK03BOUBUPG6RK3VUB1JOGBWTWBGOJ1BUV3KR6GPUBUOB30KJ5E9NDZAJMLPH5ZSXCB2JFKGVYBINCVOJW72PO8Z True\n22JCMPM4MMYRH02XQAAXGW0QCRAYP8HLGRZG6A1WL868XBCFFNP585TJHVAGB0CZ53VZ1EB8RCVAP9ARPS1Z7I3O72KZ5OAPDL7DHBAXPA3KP3PPH7TNRLU7MB9NFE8S False<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>每次调用的返回值与bool值相等就可以完成挑战，清楚了整体流程，思考一下怎么进行攻击</p>\n<p>在remix中任意参数进行调用test函数，debug一下，执行到第一次staticcall时有以下内存值</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">stack<span class=\"token operator\">:</span>\n<span class=\"token punctuation\">[</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000002d5cc5\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000005c9eb5d6a6c2c1b3efc52255c0b356f116f6f66d\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000000c0\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000004\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000000c0\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000020\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000000c4\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x000000000000000000000000000000000000000000000000000000003ca7255b\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000005c9eb5d6a6c2c1b3efc52255c0b356f116f6f66d\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000001c7\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000080\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000000ae\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000f9fbd554\"</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">memory<span class=\"token operator\">:</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token property\">\"0x0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x10\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x20\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x30\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x40\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x50\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"000000000000000000000000000000c0\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x60\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x70\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x80\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x90\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000003\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xa0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"61626100000000000000000000000000\\taba?????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xb0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xc0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3ca7255b000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xd0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以第一次staticcall的具体情况是<code>stasiccall(gas=0x2d5cc5,to=0x5c9eb5d6a6c2c1b3efc52255c0b356f116f6f66d,in=0xc0,insize=0x04,out=0xc0,outsize=0x20)</code></p>\n<p>calldata自然就是memory[0xc0:0xc0+4]也就是0x3ca7255b，根据当前执行判断一下，不难发现这个data就是fwd()的function selector，这样我们清楚了staticcall的结构，接下来看一下第二次stsiccall，得到数据如下</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">stack<span class=\"token operator\">:</span>\n<span class=\"token punctuation\">[</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000002d50ef\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000000a0\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000003\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000080\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000001c7\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000000\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x0000000000000000000000000000000000000000000000000000000000000080\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000000000ae\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"0x00000000000000000000000000000000000000000000000000000000f9fbd554\"</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">memory<span class=\"token operator\">:</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token property\">\"0x0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x10\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x20\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x30\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x40\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x50\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"000000000000000000000000000000e0\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x60\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x70\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x80\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0x90\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000003\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xa0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"61626100000000000000000000000000\\taba?????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xb0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00000000000000000000000000000000\\t????????????????\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xc0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0000000000000000000000006f16a4f3\\t????????????o???\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"0xd0\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"43b671b610476c5dcb740e4c5afcbac1\\tC?q??Gl??t?LZ???\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以第二次staticcall调用具体为<code>stasiccall(gas=0x2d50ef,to=0x000000000000000000000000000000000000,in=0xa0,insize=0x03,out=0x00,outsize=0x00)</code></p>\n<p>calldata则为memory[0xa0:0xa0+3]也就是0x616261</p>\n<p>再根据之前的分析，我们知道，这个challenge的本意就是对于输入的string是否是回文进行判断，是则true，否则false，所以用100位bytecode写一个回文判断合约就好，构建合约如下：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">atttack</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">external</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">assembly</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">calldatacopy</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token function\">calldatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">let</span> left <span class=\"token operator\">:=</span> <span class=\"token number\">0x00</span>\n            <span class=\"token keyword\">let</span> right <span class=\"token operator\">:=</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token function\">calldatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token function\">lt</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">let</span> left_r <span class=\"token operator\">:=</span> <span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span><span class=\"token function\">mload</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">let</span> right_r <span class=\"token operator\">:=</span> <span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span><span class=\"token function\">mload</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token function\">iszero</span><span class=\"token punctuation\">(</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>left_r<span class=\"token punctuation\">,</span> right_r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#125;</span>\n                left <span class=\"token operator\">:=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">)</span>\n                right <span class=\"token operator\">:=</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>直接编译，opcode总共有174，显然不符合题目合约code.length &lt; 101的限制，所以我们需要自己用bytecode来实现相同功能</p>\n<p>由于自己实在是太菜，看一下标准答案进行一下参考吧😩</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token punctuation\">&#123;</span>           \n    <span class=\"token keyword\">let</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">returndatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> m <span class=\"token operator\">:=</span> <span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token function\">selfbalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">calldatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> e <span class=\"token operator\">:=</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token function\">calldatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">selfbalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token function\">and</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token function\">calldataload</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token function\">calldataload</span><span class=\"token punctuation\">(</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">lt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>i <span class=\"token operator\">:=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token function\">selfbalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span><span class=\"token function\">callvalue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token function\">callvalue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于deploy函数限制了code的长度，所以参考答案中这种写法是别有用意的，直接使用returndatasize，selfbalance即可避免多一次push操作，再用数据也可以直接dup，而不是重新push，节约了字节码(gas)</p>\n<p>自己用bytecode写合约实在是太难了，我们用一个巧办法得到合约的字节码，然后再进行一下分析理解</p>\n<p>写两个合约如下</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">//contract 1</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">attack</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">assembly</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">let</span> i <span class=\"token operator\">:=</span> <span class=\"token function\">returndatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">let</span> m <span class=\"token operator\">:=</span> <span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token function\">selfbalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">calldatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">let</span> e <span class=\"token operator\">:=</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token function\">calldatasize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">selfbalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token function\">and</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token function\">calldataload</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">shr</span><span class=\"token punctuation\">(</span><span class=\"token number\">248</span><span class=\"token punctuation\">,</span> <span class=\"token function\">calldataload</span><span class=\"token punctuation\">(</span><span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">lt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>i <span class=\"token operator\">:=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token function\">selfbalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n            \n            <span class=\"token function\">mstore</span><span class=\"token punctuation\">(</span><span class=\"token function\">callvalue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">eq</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token function\">callvalue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//contract 2</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">attack</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">assembly</span><span class=\"token punctuation\">&#123;</span>\n       \n       <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分别进行部署得到bytecode，对于大致一样的部分进行分割，再去对于核心逻辑进行分割，returndatasize的opcode是<code>0x3d</code>return的opcode是<code>0xf3</code>，获得到的bytecode中只含有一个<code>0x3d</code>以及两个<code>0xf3</code>根据两个合约大致一样的部分进行分割之后即可得到code（也可以这样理解，<code>0xf3</code>一定会在<code>0x3d</code>之后）得到bytecode如下</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">3d36471c4736035b8183108382033560f81c843560f81c14161560365747830192506018565b8183143452602034f3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>倒置拼接之后发现并不正确，我们来仔细分析一下，首先来看一下deploy的合约的code是什么样的构造</p>\n<p>两次deploy我们用0xabcd和0x做参数，查看真正的部署的code的区别</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">0x<span class=\"token operator\">:</span>\n0x608060405234801561001057600080fd5b506040516101a73803806101a7833981810160405281019061003291906100a2565b805160208201f35b600061004d61004884610114565b6100e3565b90508281526020810184848401111561006557600080fd5b610070848285610144565b509392505050565b600082601f83011261008957600080fd5b815161009984826020860161003a565b91505092915050565b6000602082840312156100b457600080fd5b600082015167ffffffffffffffff8111156100ce57600080fd5b6100da84828501610078565b91505092915050565b6000604051905081810181811067ffffffffffffffff8211171561010a57610109610177565b5b8060405250919050565b600067ffffffffffffffff82111561012f5761012e610177565b5b601f19601f8301169050602081019050919050565b60005b83811015610162578082015181840152602081019050610147565b83811115610171576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000\n0xabcd<span class=\"token operator\">:</span>\n0x608060405234801561001057600080fd5b506040516101a73803806101a7833981810160405281019061003291906100a2565b805160208201f35b600061004d61004884610114565b6100e3565b90508281526020810184848401111561006557600080fd5b610070848285610144565b509392505050565b600082601f83011261008957600080fd5b815161009984826020860161003a565b91505092915050565b6000602082840312156100b457600080fd5b600082015167ffffffffffffffff8111156100ce57600080fd5b6100da84828501610078565b91505092915050565b6000604051905081810181811067ffffffffffffffff8211171561010a57610109610177565b5b8060405250919050565b600067ffffffffffffffff82111561012f5761012e610177565b5b601f19601f8301169050602081019050919050565b60005b83811015610162578082015181840152602081019050610147565b83811115610171576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfe00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002abcd000000000000000000000000000000000000000000000000000000000000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221015003807535.png\"></p>\n<p>发现首先用32字节记录了length，之后在再存储了code，所以在opcode之前有0x20的length</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221015004431427.png\"></p>\n<p>再继续向下分析，for循环执行时，判断条件是否为真，为假则退出循环，而这部分我们查看自己的opcode发现并没有指定位置，我们去寻找退出循环的JUMPDEST为第38位，也就是0x26,这里的0x2a是错误的，进行修改</p>\n<p>再次向下分析，执行完for循环中的内容之后，会执行JUMP无条件跳转，所以我们这里应该是跳转到for循环的开始，也就是第一个JUMPDEST，在opcode中是第七位，而这里执行的却是PUSH1 0x18，显然是不对的，将这里的push值改成0x07</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221015011445437.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221015014702106.png\"></p>\n<p>（ps：JUMP1以及JUMP的释义如上两图）</p>\n<p>最终得到修改后的code</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\">0x3d36471c4736035b8183108382033560f81c843560f81c1416156026575b47830192506007565b8183143452602034f3\n倒置拼接之后得到结果：\n0x3d36471c4736035b8183108382033560f81c843560f81c1416156026575b47830192506007565b8183143452602034f334206052341483815b56076050920183475b5726601516141cf86035841cf860350382831083815b0336471c47363d\n或：\n0x3d36471c4736035b8183108382033560f81c843560f81c1416156026575b47830192506007565b8183143452602034f3f334206052341483815b56076050920183475b5726601516141cf86035841cf860350382831083815b0336471c47363d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>得到结果之后进行攻击合约部署即可</p>\n<h2 id=\"Attack\"><a href=\"#Attack\" class=\"headerlink\" title=\"Attack\"></a>Attack</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Exploit</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>Setup setup<span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// setup.challenge().deploy(hex\"3d36471c4736035b8183108382033560f81c843560f81c1416156026575b47830192506007565b8183143452602034f334206052341483815b56076050920183475b5726601516141cf86035841cf860350382831083815b0336471c47363d\");</span>\n        setup<span class=\"token punctuation\">.</span><span class=\"token function\">challenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span>hex<span class=\"token string\">\"3d36471c4736035b8183108382033560f81c843560f81c1416156026575b47830192506007565b8183143452602034f3f334206052341483815b56076050920183475b5726601516141cf86035841cf860350382831083815b0336471c47363d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>setup<span class=\"token punctuation\">.</span><span class=\"token function\">challenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>setup<span class=\"token punctuation\">.</span><span class=\"token function\">challenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">rev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>部署合约，进行测试</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221015015532199.png\"></p>\n<p>python生成的随机数中第一种情况</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221015203658141.png\"></p>\n<p>第二种情况</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/bcYng-image/image/img/image-20221015015648030.png\"></p>\n<p>测试正确，完成挑战！</p>\n","feature":true,"text":"由于团队的需要，需要复现一下Paradigm CTF 2021，相对简单的题目呗团队内其他成员复现，我来弄一弄没有解决的五道比较难的题目 1.ReverCodepragma solidity 0.8.0; contract Deployer &#123; constructor(...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":17,"path":"api/tags/区块链.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-Rever\"><span class=\"toc-text\">1.Rever</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Code\"><span class=\"toc-text\">Code</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Analyse\"><span class=\"toc-text\">Analyse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Attack\"><span class=\"toc-text\">Attack</span></a></li></ol></li></ol>","author":{"name":"bcYng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"Down Under CTF","uid":"37d952c359458cb6532fc36cd0258d93","slug":"DownUnder","date":"2022-10-11T15:34:16.219Z","updated":"2022-10-11T15:34:16.219Z","comments":true,"path":"api/articles/DownUnder.json","keywords":null,"cover":null,"text":"DownUnder ctf 2022-blockchain题解 Solve Me一道签到题，没什么难度，调用指定函数即可 function solveChallenge() external &#123; isSolved = true; &#125; Secret and Ep...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[],"tags":[{"name":"区块链","slug":"区块链","count":17,"path":"api/tags/区块链.json"}],"author":{"name":"bcYng","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}